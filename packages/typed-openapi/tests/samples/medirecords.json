{
  "openapi": "3.1.0",
  "info": {
    "title": "Appointments",
    "version": "1.0.0-oas3-oas3.1",
    "contact": {},
    "description": "Sharing appointment data enables practices to explore new revenue opportunities. A great example could be that out of practice hours new and existing patients could have the option to see availabilities and/or book appointments on the business website.\n**Appointments** are used to manage a provider or rooms schedule. Appointments can be booked with patient or non-patient sessions.\n\n**Appointment types** are used to differentiate the duration and different classifications of appointments."
  },
  "servers": [
    {
      "description": "",
      "url": "https://api.medirecords.com"
    }
  ],
  "security": [],
  "tags": [
    {
      "name": "Appointment Type"
    },
    {
      "name": "Appointments"
    },
    {
      "name": "Billing"
    },
    {
      "name": "Patient Claiming"
    },
    {
      "name": "Medications"
    },
    {
      "name": "Address"
    },
    {
      "name": "Demographics"
    },
    {
      "name": "Interested Parties"
    },
    {
      "name": "Referrals"
    },
    {
      "name": "Relationships"
    },
    {
      "name": "Settings"
    },
    {
      "name": "Inbound"
    },
    {
      "name": "Outbound"
    },
    {
      "name": "Webhook"
    },
    {
      "name": "Code System"
    },
    {
      "name": "Practices"
    },
    {
      "name": "Rooms"
    },
    {
      "name": "Regular Sessions"
    },
    {
      "name": "Available Sessions"
    },
    {
      "name": "Holiday Sessions"
    },
    {
      "name": "Tags"
    },
    {
      "name": "Tagging Entity"
    },
    {
      "name": "Providers"
    },
    {
      "name": "Users"
    },
    {
      "name": "usergroup"
    }
  ],
  "paths": {
    "/v1/practices/{practice_id}/appointment-types": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "Practice GUID"
        }
      ],
      "get": {
        "summary": "Get all appointment types",
        "tags": [
          "Appointment Type"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AppointmentTypePage",
                  "type": "object",
                  "properties": {
                    "data": {
                      "title": "AppointmentType",
                      "type": "object",
                      "x-examples": {
                        "Full Appointment Type Response": {
                          "id": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7",
                          "name": "Custom Consultation",
                          "duration": "6 hrs",
                          "colour": "#a9a9a9",
                          "order": 34,
                          "activeStatus": 1,
                          "community": true,
                          "telehealth": true,
                          "description": "A Custom Consultation for patients",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2020-08-24T14:15:22Z"
                        }
                      },
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Appointment Type id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                          "format": "uuid",
                          "example": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7"
                        },
                        "name": {
                          "type": "string",
                          "description": "Represents the appointment type name",
                          "maxLength": 500,
                          "example": "Custom Consultation"
                        },
                        "duration": {
                          "type": "string",
                          "description": "Represents the appointment type duration",
                          "example": "4 hrs"
                        },
                        "colour": {
                          "type": "string",
                          "description": "Represents the hex colour code set while creating the appointment type",
                          "maxLength": 20,
                          "example": "#a9a9a9"
                        },
                        "order": {
                          "type": "integer",
                          "description": "Represents the order in which the appointment type needs to be displayed",
                          "example": 34
                        },
                        "activeStatus": {
                          "type": "integer",
                          "description": "Represents the status of the appointment type. If the status of the appt type is 1 then its active . If the status of the of the appt type is 2 , then its inactive .",
                          "enum": [
                            1,
                            2
                          ],
                          "example": 1
                        },
                        "community": {
                          "description": "Represents if the  appointment type is community or not . If the appt type is community , then ‘true’ is returned.  Else , ‘false’  is returned",
                          "type": "boolean"
                        },
                        "telehealth": {
                          "description": "Represents if the appt type is telehealth or  not . If the appointment type is telehealth , then ‘true ’is returned . Else  'false' is returned.",
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string",
                          "description": "Represents the appointment type description."
                        },
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      },
                      "x-internal": false,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalElements": {
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    }
                  },
                  "x-examples": {
                    "Full Paged Appointment Type Response": {
                      "data": {
                        "id": "e79966e8-5ba4-465e-89e3-ffd5f647265c",
                        "name": "Custom Consultation",
                        "duration": "4 hrs",
                        "colour": "#a9a9a9",
                        "order": 34,
                        "activeStatus": 1,
                        "community": true,
                        "telehealth": true,
                        "description": "A Custom Consultation for Patients",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2019-08-24T14:15:22Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2020-08-24T14:15:22Z"
                      },
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 1,
                      "page": 0
                    }
                  },
                  "x-internal": false,
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "List of Appointment Types With Pagination": {
                    "value": {
                      "data": {
                        "id": "041f8122-d8a9-11e7-894e-133f32cd70ad",
                        "name": "Custom Consultation",
                        "duration": "4 hrs",
                        "colour": "#a9a9a9",
                        "order": 34,
                        "activeStatus": 1,
                        "community": true,
                        "telehealth": true,
                        "description": "A Custom Consultation for patients",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2019-08-24T14:15:22Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2019-09-20T13:05:12Z"
                      },
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 1,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Invalid practice id Error Response": {
                    "value": {
                      "message": "findAllByPractice.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPractice.id",
                          "value": "xxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-practice-id-appointment-types",
        "description": "Get all appointment types for a given practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "activeStatus",
            "description": "Represents the status of the appointment type. If the status of the appt type is 1 then its active . If the status of the of the appt type is 2 , then its inactive ."
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "community",
            "description": "Represents if the  appointment type is community or not . If the appt type is community , then ‘true’ is returned.  Else , ‘false’  is returned"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "telehealth",
            "description": "Represents if the appt type is telehealth or  not . If the appointment type is telehealth , then ‘true ’is returned . Else  'false' is returned."
          }
        ]
      }
    },
    "/v1/practices/{practice_id}/appointment-types/{appointment_type_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "Practice GUID"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "appointment_type_id",
          "in": "path",
          "required": true,
          "description": "Appointment Type GUID"
        }
      ],
      "get": {
        "summary": "Get appointment type by id",
        "tags": [
          "Appointment Type"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AppointmentType",
                  "type": "object",
                  "x-examples": {
                    "Full Appointment Type Response": {
                      "id": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7",
                      "name": "Custom Consultation",
                      "duration": "6 hrs",
                      "colour": "#a9a9a9",
                      "order": 34,
                      "activeStatus": 1,
                      "community": true,
                      "telehealth": true,
                      "description": "A Custom Consultation for patients",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-08-24T14:15:22Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Appointment Type id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7"
                    },
                    "name": {
                      "type": "string",
                      "description": "Represents the appointment type name",
                      "maxLength": 500,
                      "example": "Custom Consultation"
                    },
                    "duration": {
                      "type": "string",
                      "description": "Represents the appointment type duration",
                      "example": "4 hrs"
                    },
                    "colour": {
                      "type": "string",
                      "description": "Represents the hex colour code set while creating the appointment type",
                      "maxLength": 20,
                      "example": "#a9a9a9"
                    },
                    "order": {
                      "type": "integer",
                      "description": "Represents the order in which the appointment type needs to be displayed",
                      "example": 34
                    },
                    "activeStatus": {
                      "type": "integer",
                      "description": "Represents the status of the appointment type. If the status of the appt type is 1 then its active . If the status of the of the appt type is 2 , then its inactive .",
                      "enum": [
                        1,
                        2
                      ],
                      "example": 1
                    },
                    "community": {
                      "description": "Represents if the  appointment type is community or not . If the appt type is community , then ‘true’ is returned.  Else , ‘false’  is returned",
                      "type": "boolean"
                    },
                    "telehealth": {
                      "description": "Represents if the appt type is telehealth or  not . If the appointment type is telehealth , then ‘true ’is returned . Else  'false' is returned.",
                      "type": "boolean"
                    },
                    "description": {
                      "type": "string",
                      "description": "Represents the appointment type description."
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-internal": false,
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Appointment Type Get Response": {
                    "value": {
                      "id": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7",
                      "name": "Custom Consultation",
                      "duration": "6 hrs",
                      "colour": "#a9a9a9",
                      "order": 34,
                      "activeStatus": 1,
                      "community": true,
                      "telehealth": true,
                      "description": "A Custom Consultation for patients",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-08-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.appointmentTypeId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.appointmentTypeId",
                          "value": "1234567",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-practices-practice_id-appointment-types-appointment_type_id",
        "description": "Get appointment type by practice id and appointment type id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/practices/{practice_id}/appointments": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "practice GUID"
        }
      ],
      "post": {
        "summary": "Create appointment",
        "operationId": "post-api-practices-practice_id-appointments",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AppointmentObject",
                  "type": "object",
                  "description": "",
                  "x-examples": {
                    "Full Appointment Response": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "notes": "Patient injured knee",
                      "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "walkIn": true,
                      "firstAvailableDoctor": true,
                      "urgency": 1,
                      "cancellationReason": 1,
                      "emailReminder": true,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-02-14 05:10:09.088"
                    }
                  },
                  "x-internal": false,
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "example": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "description": "Appointment id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                    },
                    "practiceId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the  practice id , the user wants the appointment to be booked in.",
                      "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                    },
                    "patientId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
                      "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
                    },
                    "appointmentTypeId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the appointment type Id",
                      "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
                    },
                    "scheduleTime": {
                      "type": "string",
                      "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
                      "example": "2019-02-13T05:10"
                    },
                    "appointmentStatus": {
                      "type": "number",
                      "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
                      "example": 2,
                      "minimum": 2,
                      "maximum": 8,
                      "exclusiveMinimum": false
                    },
                    "appointmentIntervalCode": {
                      "type": "number",
                      "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
                      "example": 6
                    },
                    "roomId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "description": "A GUID that represents the roomId, the user wants to book for the appointment",
                      "nullable": true
                    },
                    "referralId": {
                      "type": "string",
                      "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "description": "A GUID that represents the referralId ",
                      "nullable": true
                    },
                    "notes": {
                      "type": "string",
                      "example": "Patient injured knee",
                      "maxLength": 500,
                      "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
                      "nullable": true
                    },
                    "providerId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
                      "nullable": true
                    },
                    "walkIn": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "firstAvailableDoctor": {
                      "type": "boolean",
                      "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
                      "nullable": true
                    },
                    "urgency": {
                      "type": "number",
                      "example": 1,
                      "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
                      "nullable": true
                    },
                    "cancellationReason": {
                      "type": "number",
                      "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
                      "example": 1,
                      "nullable": true
                    },
                    "emailReminder": {
                      "type": "boolean",
                      "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent"
                    },
                    "reminderMethod": {
                      "type": "number",
                      "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
                      "example": 1,
                      "nullable": true
                    },
                    "reminderType": {
                      "type": "number",
                      "example": 7,
                      "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
                      "nullable": true
                    },
                    "confirmationLink": {
                      "type": "string",
                      "description": "Represents the appointment confirmation link ",
                      "example": "https://medirecords.page.link/JLTg",
                      "nullable": true
                    },
                    "telehealthLinkForProvider": {
                      "type": "string",
                      "description": "Represents the coviu link for provider , in case of telehealth appointments",
                      "example": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060"
                    },
                    "telehealthLinkForPatient": {
                      "type": "string",
                      "description": "Represents the coviu link for patient , in case of telehealth appointments",
                      "example": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "appointmentTypeId",
                    "scheduleTime",
                    "appointmentStatus",
                    "appointmentIntervalCode"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "notes": "An appointment already exists for the patient with the same provider today. Patient injured knee",
                      "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "walkIn": true,
                      "firstAvailableDoctor": true,
                      "urgency": 1,
                      "cancellationReason": 1,
                      "emailReminder": true,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2020-12-15T07:43:52.529+0000",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-12-15T07:43:52.529+0000"
                    }
                  },
                  "Response with Mandatory Fields": {
                    "value": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": null,
                      "referralId": null,
                      "notes": null,
                      "providerId": null,
                      "walkIn": false,
                      "firstAvailableDoctor": false,
                      "urgency": 0,
                      "cancellationReason": null,
                      "emailReminder": false,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2021-01-15T12:17:59.137+0000",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2021-01-15T12:17:59.137+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Validation Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "reminderType",
                          "value": "99",
                          "message": "Must be a valid value"
                        },
                        {
                          "parameter": "appointmentIntervalCode",
                          "value": "66",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Appointments"
        ],
        "description": "Create an appointment for a practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AppointmentObjectCreate",
                "type": "object",
                "description": "",
                "x-examples": {
                  "Full Appointment Response": {
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13 05:10:09.088",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 6,
                    "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "notes": "Patient injured knee",
                    "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "walkIn": true,
                    "firstAvailableDoctor": true,
                    "allowDoubleBookingForPatient": true,
                    "allowDoubleBookingForProvider": false,
                    "urgency": 1,
                    "cancellationReason": 1,
                    "emailReminder": true,
                    "reminderMethod": 1,
                    "reminderType": 7
                  }
                },
                "x-internal": false,
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "patientId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
                    "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
                  },
                  "appointmentTypeId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A GUID that represents the appointment type Id",
                    "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
                  },
                  "scheduleTime": {
                    "type": "string",
                    "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
                    "example": "2019-02-13 05:10:09.088"
                  },
                  "appointmentStatus": {
                    "type": "number",
                    "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
                    "example": 2,
                    "minimum": 2,
                    "maximum": 8,
                    "exclusiveMinimum": false
                  },
                  "appointmentIntervalCode": {
                    "type": "number",
                    "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
                    "example": 6
                  },
                  "roomId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "description": "A GUID that represents the roomId, the user wants to book for the appointment",
                    "nullable": true
                  },
                  "referralId": {
                    "type": "string",
                    "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "description": "A GUID that represents the referralId ",
                    "nullable": true
                  },
                  "notes": {
                    "type": "string",
                    "example": "Patient injured knee",
                    "maxLength": 500,
                    "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
                    "nullable": true
                  },
                  "providerId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
                    "nullable": true
                  },
                  "walkIn": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "firstAvailableDoctor": {
                    "type": "boolean",
                    "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
                    "nullable": true
                  },
                  "allowDoubleBookingForPatient": {
                    "description": "This flag indicates if multiple appointments can to be booked for the patient with the same provider on the same day. By default the flag is set to false. If the flag is set to true and if there is any double booking made for the patient, the same is indicated to the user via notes field in the response payload.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "allowDoubleBookingForProvider": {
                    "description": "This flag indicates if the provider can be double booked with different patient at the same time. By default the flag is set to false. If the flag is set to true and if there is any double booking made for the provider, the same is indicated to the user via notes field in the response payload.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "urgency": {
                    "type": "number",
                    "example": 1,
                    "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
                    "nullable": true
                  },
                  "cancellationReason": {
                    "type": "number",
                    "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
                    "example": 1,
                    "nullable": true
                  },
                  "emailReminder": {
                    "type": "boolean",
                    "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent",
                    "nullable": true
                  },
                  "reminderMethod": {
                    "type": "number",
                    "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
                    "example": 1,
                    "nullable": true
                  },
                  "reminderType": {
                    "type": "number",
                    "example": 7,
                    "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
                    "nullable": true
                  }
                },
                "required": [
                  "patientId",
                  "appointmentTypeId",
                  "scheduleTime",
                  "appointmentStatus",
                  "appointmentIntervalCode"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13T05:10",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 6,
                    "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "notes": "Patient injured knee",
                    "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "walkIn": true,
                    "firstAvailableDoctor": true,
                    "allowDoubleBookingForPatient": true,
                    "allowDoubleBookingForProvider": false,
                    "urgency": 1,
                    "cancellationReason": 1,
                    "emailReminder": true,
                    "reminderMethod": 1,
                    "reminderType": 7
                  }
                },
                "Request with Mandatory Fields": {
                  "value": {
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13T05:10",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 6,
                    "roomId": null,
                    "referralId": null,
                    "notes": null,
                    "providerId": null,
                    "walkIn": null,
                    "firstAvailableDoctor": null,
                    "allowDoubleBookingForPatient": null,
                    "allowDoubleBookingForProvider": null,
                    "urgency": null,
                    "cancellationReason": null,
                    "emailReminder": null,
                    "reminderMethod": null,
                    "reminderType": null
                  }
                },
                "Bad Request": {
                  "value": {
                    "practiceId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13T05:10",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 66,
                    "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "notes": "Patient injured knee",
                    "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "walkIn": null,
                    "firstAvailableDoctor": null,
                    "allowDoubleBookingForPatient": null,
                    "allowDoubleBookingForProvider": null,
                    "urgency": 1,
                    "cancellationReason": 1,
                    "emailReminder": null,
                    "reminderMethod": 1,
                    "reminderType": 99
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all appointments",
        "operationId": "get-api-practices-practice_id-appointments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AppointmentObjectPage",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "AppointmentObject",
                        "type": "object",
                        "description": "",
                        "x-examples": {
                          "Full Appointment Response": {
                            "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                            "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                            "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                            "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                            "scheduleTime": "2019-02-13T05:10",
                            "appointmentStatus": 2,
                            "appointmentIntervalCode": 6,
                            "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                            "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                            "notes": "Patient injured knee",
                            "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                            "walkIn": true,
                            "firstAvailableDoctor": true,
                            "urgency": 1,
                            "cancellationReason": 1,
                            "emailReminder": true,
                            "reminderMethod": 1,
                            "reminderType": 7,
                            "confirmationLink": "https://medirecords.page.link/JLTg",
                            "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                            "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-02-13 05:10:09.088",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-02-14 05:10:09.088"
                          }
                        },
                        "x-internal": false,
                        "x-tags": [
                          "Other"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                            "description": "Appointment id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                          },
                          "practiceId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A GUID that represents the  practice id , the user wants the appointment to be booked in.",
                            "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                          },
                          "patientId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
                            "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
                          },
                          "appointmentTypeId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A GUID that represents the appointment type Id",
                            "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
                          },
                          "scheduleTime": {
                            "type": "string",
                            "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
                            "example": "2019-02-13T05:10"
                          },
                          "appointmentStatus": {
                            "type": "number",
                            "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
                            "example": 2,
                            "minimum": 2,
                            "maximum": 8,
                            "exclusiveMinimum": false
                          },
                          "appointmentIntervalCode": {
                            "type": "number",
                            "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
                            "example": 6
                          },
                          "roomId": {
                            "type": "string",
                            "format": "uuid",
                            "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                            "description": "A GUID that represents the roomId, the user wants to book for the appointment",
                            "nullable": true
                          },
                          "referralId": {
                            "type": "string",
                            "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                            "description": "A GUID that represents the referralId ",
                            "nullable": true
                          },
                          "notes": {
                            "type": "string",
                            "example": "Patient injured knee",
                            "maxLength": 500,
                            "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
                            "nullable": true
                          },
                          "providerId": {
                            "type": "string",
                            "format": "uuid",
                            "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                            "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
                            "nullable": true
                          },
                          "walkIn": {
                            "type": "boolean",
                            "nullable": true
                          },
                          "firstAvailableDoctor": {
                            "type": "boolean",
                            "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
                            "nullable": true
                          },
                          "urgency": {
                            "type": "number",
                            "example": 1,
                            "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
                            "nullable": true
                          },
                          "cancellationReason": {
                            "type": "number",
                            "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
                            "example": 1,
                            "nullable": true
                          },
                          "emailReminder": {
                            "type": "boolean",
                            "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent"
                          },
                          "reminderMethod": {
                            "type": "number",
                            "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
                            "example": 1,
                            "nullable": true
                          },
                          "reminderType": {
                            "type": "number",
                            "example": 7,
                            "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
                            "nullable": true
                          },
                          "confirmationLink": {
                            "type": "string",
                            "description": "Represents the appointment confirmation link ",
                            "example": "https://medirecords.page.link/JLTg",
                            "nullable": true
                          },
                          "telehealthLinkForProvider": {
                            "type": "string",
                            "description": "Represents the coviu link for provider , in case of telehealth appointments",
                            "example": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060"
                          },
                          "telehealthLinkForPatient": {
                            "type": "string",
                            "description": "Represents the coviu link for patient , in case of telehealth appointments",
                            "example": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                            "nullable": true
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "required": [
                          "id",
                          "practiceId",
                          "patientId",
                          "appointmentTypeId",
                          "scheduleTime",
                          "appointmentStatus",
                          "appointmentIntervalCode"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "totalElements": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "x-examples": {
                    "Full Practice Paged Response": {
                      "data": [
                        {
                          "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                          "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                          "scheduleTime": "2019-02-13 05:10:09.088",
                          "appointmentStatus": 2,
                          "appointmentIntervalCode": 6,
                          "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                          "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                          "notes": "Patient injured knee",
                          "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                          "walkIn": true,
                          "firstAvailableDoctor": true,
                          "urgency": 1,
                          "cancellationReason": 1,
                          "emailReminder": true,
                          "reminderMethod": 1,
                          "reminderType": 7,
                          "confirmationLink": "https://medirecords.page.link/JLTg",
                          "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                          "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-14 05:10:09.088"
                        },
                        {
                          "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "patientId": "6d5bab6a-85ff-11ea-8f14-4b1d1a625a1f",
                          "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                          "scheduleTime": "6d5bab6a-85ff-11ea-8f14-4b1d1a625a1f",
                          "appointmentStatus": 2,
                          "appointmentIntervalCode": 7,
                          "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                          "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                          "notes": "Patient injured hip",
                          "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                          "walkIn": true,
                          "firstAvailableDoctor": true,
                          "urgency": 1,
                          "cancellationReason": 1,
                          "emailReminder": true,
                          "reminderMethod": 1,
                          "reminderType": 7,
                          "confirmationLink": "https://medirecords.page.link/JLTg",
                          "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                          "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-13 05:10:09.088"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  },
                  "x-internal": false,
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Appointments with appointmentStatus equal to \"2\" and given specific providerId": {
                    "value": {
                      "data": [
                        {
                          "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                          "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                          "scheduleTime": "2019-02-13T05:10",
                          "appointmentStatus": 2,
                          "appointmentIntervalCode": 6,
                          "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                          "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                          "notes": "Patient injured knee",
                          "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                          "walkIn": true,
                          "firstAvailableDoctor": true,
                          "urgency": 1,
                          "cancellationReason": 1,
                          "emailReminder": true,
                          "reminderMethod": 1,
                          "reminderType": 7,
                          "confirmationLink": "https://medirecords.page.link/JLTg",
                          "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                          "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-14 05:10:09.088"
                        },
                        {
                          "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "patientId": "6d5bab6a-85ff-11ea-8f14-4b1d1a625a1f",
                          "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                          "scheduleTime": "6d5bab6a-85ff-11ea-8f14-4b1d1a625a1f",
                          "appointmentStatus": 2,
                          "appointmentIntervalCode": 7,
                          "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                          "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                          "notes": "Patient injured hip",
                          "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                          "walkIn": true,
                          "firstAvailableDoctor": true,
                          "urgency": 1,
                          "cancellationReason": 1,
                          "emailReminder": true,
                          "reminderMethod": 1,
                          "reminderType": 7,
                          "confirmationLink": "https://medirecords.page.link/JLTg",
                          "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                          "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-13 05:10:09.088"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Example": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "providerIddd",
                          "value": "providerIddd",
                          "message": "Invalid query parameter"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get all appointments for a given practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "providerId",
            "description": "A GUID that represents the provider Id."
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "appointmentStatus",
            "description": "Represents the status of the appointment."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "roomId",
            "description": "A GUID that represents the room Id."
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "urgency",
            "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "patientId",
            "description": "A GUID that represents the patient id."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "appointmentTypeId",
            "description": "A GUID that represents the appointment type Id."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "appointmentDateRangeStart",
            "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDThh:mm."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "appointmentDateRangeEnd",
            "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDThh:mm."
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/practices/{practice_id}/appointments/{appointment_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "practice GUID"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "appointment_id",
          "in": "path",
          "required": true,
          "description": "appointment GUID"
        }
      ],
      "get": {
        "summary": "Get appointment",
        "tags": [
          "Appointments"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AppointmentObject",
                  "type": "object",
                  "description": "",
                  "x-examples": {
                    "Full Appointment Response": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "notes": "Patient injured knee",
                      "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "walkIn": true,
                      "firstAvailableDoctor": true,
                      "urgency": 1,
                      "cancellationReason": 1,
                      "emailReminder": true,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-02-14 05:10:09.088"
                    }
                  },
                  "x-internal": false,
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "example": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "description": "Appointment id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                    },
                    "practiceId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the  practice id , the user wants the appointment to be booked in.",
                      "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                    },
                    "patientId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
                      "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
                    },
                    "appointmentTypeId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the appointment type Id",
                      "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
                    },
                    "scheduleTime": {
                      "type": "string",
                      "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
                      "example": "2019-02-13T05:10"
                    },
                    "appointmentStatus": {
                      "type": "number",
                      "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
                      "example": 2,
                      "minimum": 2,
                      "maximum": 8,
                      "exclusiveMinimum": false
                    },
                    "appointmentIntervalCode": {
                      "type": "number",
                      "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
                      "example": 6
                    },
                    "roomId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "description": "A GUID that represents the roomId, the user wants to book for the appointment",
                      "nullable": true
                    },
                    "referralId": {
                      "type": "string",
                      "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "description": "A GUID that represents the referralId ",
                      "nullable": true
                    },
                    "notes": {
                      "type": "string",
                      "example": "Patient injured knee",
                      "maxLength": 500,
                      "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
                      "nullable": true
                    },
                    "providerId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
                      "nullable": true
                    },
                    "walkIn": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "firstAvailableDoctor": {
                      "type": "boolean",
                      "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
                      "nullable": true
                    },
                    "urgency": {
                      "type": "number",
                      "example": 1,
                      "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
                      "nullable": true
                    },
                    "cancellationReason": {
                      "type": "number",
                      "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
                      "example": 1,
                      "nullable": true
                    },
                    "emailReminder": {
                      "type": "boolean",
                      "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent"
                    },
                    "reminderMethod": {
                      "type": "number",
                      "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
                      "example": 1,
                      "nullable": true
                    },
                    "reminderType": {
                      "type": "number",
                      "example": 7,
                      "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
                      "nullable": true
                    },
                    "confirmationLink": {
                      "type": "string",
                      "description": "Represents the appointment confirmation link ",
                      "example": "https://medirecords.page.link/JLTg",
                      "nullable": true
                    },
                    "telehealthLinkForProvider": {
                      "type": "string",
                      "description": "Represents the coviu link for provider , in case of telehealth appointments",
                      "example": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060"
                    },
                    "telehealthLinkForPatient": {
                      "type": "string",
                      "description": "Represents the coviu link for patient , in case of telehealth appointments",
                      "example": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "appointmentTypeId",
                    "scheduleTime",
                    "appointmentStatus",
                    "appointmentIntervalCode"
                  ]
                },
                "examples": {
                  "Appointment Get Response": {
                    "value": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "notes": "Patient injured knee",
                      "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "walkIn": null,
                      "firstAvailableDoctor": null,
                      "urgency": 1,
                      "cancellationReason": 1,
                      "emailReminder": true,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "string",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request No Appointment Error Response": {
                    "value": {
                      "message": "No Appontment for id: b97d12fe-7cd9-4849-9bee-59c806974b95",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-practices-practice_id-appointments-appointment_id",
        "description": "Get an appointment by practice id and appointment id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update appointment",
        "operationId": "put-api-practices-practice_id-appointments-appointment_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AppointmentObject",
                  "type": "object",
                  "description": "",
                  "x-examples": {
                    "Full Appointment Response": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "notes": "Patient injured knee",
                      "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "walkIn": true,
                      "firstAvailableDoctor": true,
                      "urgency": 1,
                      "cancellationReason": 1,
                      "emailReminder": true,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-02-14 05:10:09.088"
                    }
                  },
                  "x-internal": false,
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "example": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "description": "Appointment id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                    },
                    "practiceId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the  practice id , the user wants the appointment to be booked in.",
                      "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                    },
                    "patientId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
                      "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
                    },
                    "appointmentTypeId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "A GUID that represents the appointment type Id",
                      "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
                    },
                    "scheduleTime": {
                      "type": "string",
                      "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
                      "example": "2019-02-13T05:10"
                    },
                    "appointmentStatus": {
                      "type": "number",
                      "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
                      "example": 2,
                      "minimum": 2,
                      "maximum": 8,
                      "exclusiveMinimum": false
                    },
                    "appointmentIntervalCode": {
                      "type": "number",
                      "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
                      "example": 6
                    },
                    "roomId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "description": "A GUID that represents the roomId, the user wants to book for the appointment",
                      "nullable": true
                    },
                    "referralId": {
                      "type": "string",
                      "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "description": "A GUID that represents the referralId ",
                      "nullable": true
                    },
                    "notes": {
                      "type": "string",
                      "example": "Patient injured knee",
                      "maxLength": 500,
                      "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
                      "nullable": true
                    },
                    "providerId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
                      "nullable": true
                    },
                    "walkIn": {
                      "type": "boolean",
                      "nullable": true
                    },
                    "firstAvailableDoctor": {
                      "type": "boolean",
                      "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
                      "nullable": true
                    },
                    "urgency": {
                      "type": "number",
                      "example": 1,
                      "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
                      "nullable": true
                    },
                    "cancellationReason": {
                      "type": "number",
                      "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
                      "example": 1,
                      "nullable": true
                    },
                    "emailReminder": {
                      "type": "boolean",
                      "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent"
                    },
                    "reminderMethod": {
                      "type": "number",
                      "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
                      "example": 1,
                      "nullable": true
                    },
                    "reminderType": {
                      "type": "number",
                      "example": 7,
                      "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
                      "nullable": true
                    },
                    "confirmationLink": {
                      "type": "string",
                      "description": "Represents the appointment confirmation link ",
                      "example": "https://medirecords.page.link/JLTg",
                      "nullable": true
                    },
                    "telehealthLinkForProvider": {
                      "type": "string",
                      "description": "Represents the coviu link for provider , in case of telehealth appointments",
                      "example": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060"
                    },
                    "telehealthLinkForPatient": {
                      "type": "string",
                      "description": "Represents the coviu link for patient , in case of telehealth appointments",
                      "example": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "appointmentTypeId",
                    "scheduleTime",
                    "appointmentStatus",
                    "appointmentIntervalCode"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                      "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                      "notes": "Patient injured knee",
                      "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                      "walkIn": true,
                      "firstAvailableDoctor": true,
                      "urgency": 1,
                      "cancellationReason": 1,
                      "emailReminder": true,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2020-12-15T07:43:52.529+0000",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-12-15T07:43:52.529+0000"
                    }
                  },
                  "Response With Mandatory Fields": {
                    "value": {
                      "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                      "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                      "scheduleTime": "2019-02-13T05:10",
                      "appointmentStatus": 2,
                      "appointmentIntervalCode": 6,
                      "roomId": null,
                      "referralId": null,
                      "notes": null,
                      "providerId": null,
                      "walkIn": false,
                      "firstAvailableDoctor": false,
                      "urgency": 0,
                      "cancellationReason": null,
                      "emailReminder": false,
                      "reminderMethod": 1,
                      "reminderType": 7,
                      "confirmationLink": "https://medirecords.page.link/JLTg",
                      "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                      "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2021-01-15T12:17:59.137+0000",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2021-01-15T12:17:59.137+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Field Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "reminderType",
                          "value": "99",
                          "message": "Must be a valid value"
                        },
                        {
                          "parameter": "appointmentIntervalCode",
                          "value": "66",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Appointments"
        ],
        "description": "Update appointment for a given practice id and appointment id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AppointmentObjectCreate",
                "type": "object",
                "description": "",
                "x-examples": {
                  "Full Appointment Response": {
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13 05:10:09.088",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 6,
                    "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "notes": "Patient injured knee",
                    "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "walkIn": true,
                    "firstAvailableDoctor": true,
                    "allowDoubleBookingForPatient": true,
                    "allowDoubleBookingForProvider": false,
                    "urgency": 1,
                    "cancellationReason": 1,
                    "emailReminder": true,
                    "reminderMethod": 1,
                    "reminderType": 7
                  }
                },
                "x-internal": false,
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "patientId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
                    "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
                  },
                  "appointmentTypeId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A GUID that represents the appointment type Id",
                    "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
                  },
                  "scheduleTime": {
                    "type": "string",
                    "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
                    "example": "2019-02-13 05:10:09.088"
                  },
                  "appointmentStatus": {
                    "type": "number",
                    "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
                    "example": 2,
                    "minimum": 2,
                    "maximum": 8,
                    "exclusiveMinimum": false
                  },
                  "appointmentIntervalCode": {
                    "type": "number",
                    "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
                    "example": 6
                  },
                  "roomId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "description": "A GUID that represents the roomId, the user wants to book for the appointment",
                    "nullable": true
                  },
                  "referralId": {
                    "type": "string",
                    "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "description": "A GUID that represents the referralId ",
                    "nullable": true
                  },
                  "notes": {
                    "type": "string",
                    "example": "Patient injured knee",
                    "maxLength": 500,
                    "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
                    "nullable": true
                  },
                  "providerId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
                    "nullable": true
                  },
                  "walkIn": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "firstAvailableDoctor": {
                    "type": "boolean",
                    "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
                    "nullable": true
                  },
                  "allowDoubleBookingForPatient": {
                    "description": "This flag indicates if multiple appointments can to be booked for the patient with the same provider on the same day. By default the flag is set to false. If the flag is set to true and if there is any double booking made for the patient, the same is indicated to the user via notes field in the response payload.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "allowDoubleBookingForProvider": {
                    "description": "This flag indicates if the provider can be double booked with different patient at the same time. By default the flag is set to false. If the flag is set to true and if there is any double booking made for the provider, the same is indicated to the user via notes field in the response payload.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "urgency": {
                    "type": "number",
                    "example": 1,
                    "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
                    "nullable": true
                  },
                  "cancellationReason": {
                    "type": "number",
                    "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
                    "example": 1,
                    "nullable": true
                  },
                  "emailReminder": {
                    "type": "boolean",
                    "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent",
                    "nullable": true
                  },
                  "reminderMethod": {
                    "type": "number",
                    "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
                    "example": 1,
                    "nullable": true
                  },
                  "reminderType": {
                    "type": "number",
                    "example": 7,
                    "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
                    "nullable": true
                  }
                },
                "required": [
                  "patientId",
                  "appointmentTypeId",
                  "scheduleTime",
                  "appointmentStatus",
                  "appointmentIntervalCode"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13T05:10",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 6,
                    "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "notes": "Patient injured knee",
                    "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "walkIn": true,
                    "firstAvailableDoctor": true,
                    "allowDoubleBookingForPatient": true,
                    "allowDoubleBookingForProvider": false,
                    "urgency": 1,
                    "cancellationReason": 1,
                    "emailReminder": true,
                    "reminderMethod": 1,
                    "reminderType": 7
                  }
                },
                "Request With Mandatory Fields": {
                  "value": {
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13T05:10",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 6,
                    "roomId": null,
                    "referralId": null,
                    "notes": null,
                    "providerId": null,
                    "walkIn": null,
                    "firstAvailableDoctor": null,
                    "allowDoubleBookingForPatient": null,
                    "allowDoubleBookingForProvider": null,
                    "urgency": null,
                    "cancellationReason": null,
                    "emailReminder": null,
                    "reminderMethod": null,
                    "reminderType": null
                  }
                },
                "Bad Request With Invalid Field": {
                  "value": {
                    "practiceId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                    "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                    "scheduleTime": "2019-02-13T05:10",
                    "appointmentStatus": 2,
                    "appointmentIntervalCode": 66,
                    "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                    "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                    "notes": "Patient injured knee",
                    "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                    "walkIn": null,
                    "firstAvailableDoctor": null,
                    "allowDoubleBookingForPatient": null,
                    "allowDoubleBookingForProvider": null,
                    "urgency": 1,
                    "cancellationReason": 1,
                    "emailReminder": null,
                    "reminderMethod": 1,
                    "reminderType": 99
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete appointment",
        "operationId": "delete-api-practices-practice_id-appointments-appointment_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "No Appointment for id: 28e9eef0-3e51-11eb-b325-eb33c64e8a0x",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Appointments"
        ],
        "description": "Delete an appointment by practice id and appointment id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/medications/formulary": {
      "post": {
        "summary": "Create formulary",
        "tags": [
          "Formulary"
        ],
        "operationId": "create-formulary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "Create Formulary": {
                  "value": {
                    "name": "Cough Medications"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Formulary",
                  "type": "object",
                  "description": "An object that represents a formulary list. A formulary list contains various drug products",
                  "x-examples": {
                    "Example": {
                      "id": "65f54952-6dca-40f2-a878-8ed6995e7638",
                      "name": "Fever Medications",
                      "createdBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "createdDateTime": "2022-11-13T11:54:41.384Z",
                      "updatedBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "updatedDateTime": "2022-11-13T11:54:41.384Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 36,
                      "format": "uuid",
                      "example": "65f54952-6dca-40f2-a878-8ed6995e7638",
                      "minLength": 36
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1
                    },
                    "createdBy": {
                      "type": "string",
                      "minLength": 36,
                      "x-stoplight": {
                        "id": "ucds5czdna518"
                      },
                      "format": "uuid",
                      "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "maxLength": 36
                    },
                    "createdDateTime": {
                      "type": "string",
                      "minLength": 1,
                      "x-stoplight": {
                        "id": "y624hy3u2wbuf"
                      },
                      "format": "date-time",
                      "example": "2022-11-13T11:54:41.384Z"
                    },
                    "updatedBy": {
                      "type": "string",
                      "minLength": 36,
                      "x-stoplight": {
                        "id": "z7e45whxletl7"
                      },
                      "format": "uuid",
                      "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "maxLength": 36
                    },
                    "updatedDateTime": {
                      "type": "string",
                      "minLength": 1,
                      "x-stoplight": {
                        "id": "zdhq0zyrs0cp1"
                      },
                      "format": "date-time",
                      "example": "2022-11-13T11:54:41.384Z"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "id": "65f54952-6dca-40f2-a878-8ed6995e7638",
                      "name": "Fever Medications",
                      "createdBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "createdDateTime": "2022-11-13T11:54:41.384Z",
                      "updatedBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "updatedDateTime": "2022-11-13T11:54:41.384Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-stoplight": {
                    "id": "17lb92rqpnj73"
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable"
          }
        },
        "description": "Create a new formulary"
      }
    },
    "/v1/medications/formulary/{formulary_id}/product": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "formulary_id",
          "in": "path",
          "required": true,
          "description": "Formulary guid"
        }
      ],
      "post": {
        "summary": "Add products to formulary",
        "tags": [
          "Formulary"
        ],
        "operationId": "add-drug-product-formulary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "amtCode": {
                      "type": "integer",
                      "x-stoplight": {
                        "id": "b9xjksx8t35er"
                      },
                      "example": 170059949034
                    }
                  }
                }
              },
              "examples": {
                "example": {
                  "value": [
                    {
                      "amtCode": 200059949034
                    },
                    {
                      "amtCode": 170059949034
                    }
                  ]
                }
              }
            }
          },
          "description": ""
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "added": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "title": "Formulary Item",
                            "x-stoplight": {
                              "id": "npl25tibv495a"
                            },
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "x-stoplight": {
                                  "id": "ie6imb7bpnsqv"
                                },
                                "format": "uuid",
                                "example": "35f2843c-6917-4b2c-9015-23717a66e6b7",
                                "minLength": 36,
                                "maxLength": 36
                              },
                              "amtCode": {
                                "type": "integer",
                                "x-stoplight": {
                                  "id": "vdpq4eiy12zpd"
                                },
                                "example": 27638011000036104
                              },
                              "createdBy": {
                                "type": "string",
                                "x-stoplight": {
                                  "id": "8w8ezcuceu6ab"
                                },
                                "format": "uuid",
                                "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                                "minLength": 36,
                                "maxLength": 36
                              },
                              "createdDateTime": {
                                "type": "string",
                                "x-stoplight": {
                                  "id": "c9nol83zf1g23"
                                },
                                "format": "date-time",
                                "example": "2022-11-11 02:28:02.152"
                              },
                              "updatedBy": {
                                "type": "string",
                                "x-stoplight": {
                                  "id": "9xlx8kijvi7k0"
                                },
                                "format": "uuid",
                                "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                                "minLength": 36,
                                "maxLength": 36
                              },
                              "updatedDateTime": {
                                "type": "string",
                                "x-stoplight": {
                                  "id": "a8yquedcu4h4w"
                                },
                                "format": "date-time",
                                "example": "2022-11-11 02:28:02.152"
                              }
                            },
                            "description": "An object representing a drug product under a formulary"
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fieldName": {
                                "type": "string",
                                "x-stoplight": {
                                  "id": "ksab0rmsvgpzn"
                                }
                              },
                              "value": {
                                "type": "number",
                                "x-stoplight": {
                                  "id": "0nk6l9lfvn8iz"
                                }
                              },
                              "errorMessage": {
                                "type": "string",
                                "x-stoplight": {
                                  "id": "ofe0pf329lqub"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "added": {
                        "count": 1,
                        "data": [
                          {
                            "id": "35f2843c-6917-4b2c-9015-23717a66e6b7",
                            "amtCode": 27638011000036104,
                            "createdBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                            "createdDateTime": "2022-11-11 02:28:02.152",
                            "updatedBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                            "updatedDateTime": "2022-11-11 02:28:02.152"
                          }
                        ]
                      },
                      "errors": {
                        "count": 2,
                        "data": [
                          {
                            "fieldName": "amtCode",
                            "value": 34,
                            "message": "AMT code doesn't exist"
                          },
                          {
                            "fieldName": "amtCode",
                            "value": 56,
                            "message": "AMT code is already in the formulary list"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-stoplight": {
                    "id": "17lb92rqpnj73"
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable"
          }
        },
        "description": "Add drug products to formulary"
      }
    },
    "/v1/medications/formulary/{formulary_id}/user-group/{user_group_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "formulary_id",
          "in": "path",
          "required": true,
          "description": "Formulary guid"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "user_group_id",
          "in": "path",
          "required": true,
          "description": "User group guid"
        }
      ],
      "post": {
        "summary": "Link formulary to user group",
        "tags": [
          "Formulary"
        ],
        "operationId": "link-formulary-user-group",
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Formulary User Group",
                  "type": "object",
                  "description": "Relationship between formulary and user group",
                  "x-examples": {
                    "Example": {
                      "id": "f2bfdaf9-dbdb-4b61-91a2-45935f9a3a74",
                      "formularyId": "721b3e20-c16d-4443-9b4b-db18587f7540",
                      "userGroupId": "8804a3ad-7fdb-464b-8854-31b93898b196",
                      "createdBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "createdDateTime": "2022-11-29T04:25:30.329Z",
                      "updatedBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "updatedDateTime": "2022-11-29T04:25:30.329Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 36,
                      "format": "uuid",
                      "minLength": 36,
                      "example": "f2bfdaf9-dbdb-4b61-91a2-45935f9a3a74"
                    },
                    "formularyId": {
                      "type": "string",
                      "maxLength": 36,
                      "x-stoplight": {
                        "id": "kcenai3tbcec5"
                      },
                      "minLength": 36,
                      "format": "uuid",
                      "example": "721b3e20-c16d-4443-9b4b-db18587f7540"
                    },
                    "userGroupId": {
                      "type": "string",
                      "maxLength": 36,
                      "x-stoplight": {
                        "id": "ld0vxa472yv5c"
                      },
                      "format": "uuid",
                      "example": "8804a3ad-7fdb-464b-8854-31b93898b196",
                      "minLength": 36
                    },
                    "createdBy": {
                      "type": "string",
                      "x-stoplight": {
                        "id": "h5f4g6ht33cpt"
                      },
                      "format": "uuid",
                      "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "minLength": 36,
                      "maxLength": 36
                    },
                    "createdDateTime": {
                      "type": "string",
                      "minLength": 1,
                      "x-stoplight": {
                        "id": "h1os6un1xs72f"
                      },
                      "format": "date-time",
                      "example": "2022-11-29T04:25:30.329Z"
                    },
                    "updatedBy": {
                      "type": "string",
                      "minLength": 36,
                      "x-stoplight": {
                        "id": "kqt59fhqud44d"
                      },
                      "format": "uuid",
                      "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "maxLength": 36
                    },
                    "updatedDateTime": {
                      "type": "string",
                      "minLength": 1,
                      "x-stoplight": {
                        "id": "7tabed8ddm0i1"
                      },
                      "format": "date-time",
                      "example": "2022-11-29T04:25:30.329Z"
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "id": "f2bfdaf9-dbdb-4b61-91a2-45935f9a3a74",
                      "formularyId": "721b3e20-c16d-4443-9b4b-db18587f7540",
                      "userGroupId": "8804a3ad-7fdb-464b-8854-31b93898b196",
                      "createdBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "createdDateTime": "2022-11-29T04:25:30.329Z",
                      "updatedBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
                      "updatedDateTime": "2022-11-29T04:25:30.329Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-stoplight": {
                    "id": "17lb92rqpnj73"
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable"
          }
        },
        "description": "Grant access to a formulary"
      }
    },
    "/v1/patients": {
      "post": {
        "summary": "Create patient",
        "operationId": "create-all-patients",
        "description": "Create a patient",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Patient",
                "type": "object",
                "description": "The common properties that are included for a patient",
                "x-examples": {
                  "Full Patient Details the can be change": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-01-03",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2016-09-07",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsi": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 2,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever"
                  }
                },
                "properties": {
                  "defaultPracticeId": {
                    "type": "string",
                    "description": "Default practice id where the patient details are created",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                    "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "format": "uuid"
                  },
                  "usualDoctorId": {
                    "type": "string",
                    "description": "A user id that represents the usual doctor for the patient",
                    "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "format": "uuid",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)"
                  },
                  "titleCode": {
                    "type": "integer",
                    "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title-code",
                    "example": 315890000
                  },
                  "firstName": {
                    "description": "Represents the patient first name. The firstName is null when oneNameOnly flag is set to true",
                    "type": "string",
                    "nullable": true
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Represents patient last name",
                    "minLength": 1,
                    "maxLength": 40,
                    "example": "Mark"
                  },
                  "middleName": {
                    "type": "string",
                    "description": "Represents the patient middle name",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "David",
                    "nullable": true
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "Tim",
                    "nullable": true
                  },
                  "previouslyKnownAs": {
                    "type": "string",
                    "description": "Represents the patient previously known name",
                    "maxLength": 40,
                    "example": "Jake",
                    "minLength": 0,
                    "nullable": true
                  },
                  "dob": {
                    "type": "string",
                    "title": "DateOfBirth",
                    "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                    "format": "date",
                    "x-examples": {
                      "Date of Birth": "1970-01-10"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "estimated": {
                    "type": "boolean",
                    "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                    "nullable": true
                  },
                  "oneNameOnly": {
                    "type": "boolean",
                    "example": false,
                    "description": "The flag is set to true, if the patient has one name only",
                    "nullable": true
                  },
                  "dateOfDeath": {
                    "type": "string",
                    "nullable": true,
                    "title": "DateOfDeath",
                    "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                    "default": "yyyy-MM-dd",
                    "example": "2018-12-01",
                    "x-examples": {
                      "Date Of Death Format": "2018-12-01"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "causeOfDeath": {
                    "type": "string",
                    "description": "Represents the patient cause of death. This field is mandatory if the date of death is entered.",
                    "example": "Cancer",
                    "maxLength": 300,
                    "nullable": true
                  },
                  "patientStatusCode": {
                    "type": "integer",
                    "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status-code",
                    "example": 2
                  },
                  "ethnicityCode": {
                    "type": "integer",
                    "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity-code",
                    "example": 55,
                    "nullable": true
                  },
                  "englishAsSecondLanguage": {
                    "type": "boolean",
                    "description": "If english is the patient second language the flag is set as true else it is set to false",
                    "nullable": true
                  },
                  "atsiStatus": {
                    "type": "integer",
                    "title": "Atsi",
                    "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                    "example": 4,
                    "nullable": true,
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "ctgCoPaymentRelief": {
                    "type": "boolean",
                    "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "placeOfBirth": {
                    "type": "string",
                    "description": "Represents the  place of birth for patient with atsi status. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": "Sydney",
                    "minLength": 0,
                    "maxLength": 100,
                    "nullable": true
                  },
                  "skinCode": {
                    "type": "integer",
                    "description": "Represents the skin code for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin-code. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": 16,
                    "nullable": true
                  },
                  "languageSpokenAtHome": {
                    "type": "integer",
                    "description": "Represents the language spoken at home for patient with atsi status\n1 - Aghu Tharrnggala\n2 - Alngith dialect.\nThis field is  only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "homePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "HomePhone",
                    "x-examples": {
                      "HomePhone Number": "0298761234"
                    },
                    "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "maxLength": 10,
                    "example": "0298761234",
                    "x-internal": false,
                    "minLength": 8
                  },
                  "mobilePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "MobilePhone",
                    "x-examples": {
                      "MobileNumber": "0413324123"
                    },
                    "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0413324123",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "workPhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "OfficePhone",
                    "x-examples": {
                      "OfficePhoneNumber": "0298671234"
                    },
                    "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0298671234",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "title": "Email",
                    "description": "Represents the patient email id.",
                    "x-examples": {
                      "Email": "Timothy.Mark@nedirecords.com"
                    },
                    "x-tags": [
                      "Common Models"
                    ],
                    "format": "email",
                    "example": "Timothy.Mark@nedirecords.com",
                    "maxLength": 100,
                    "x-internal": false
                  },
                  "contactMethod": {
                    "title": "PatientContactMethod",
                    "type": "number",
                    "nullable": true,
                    "x-examples": {
                      "example-1": 1
                    },
                    "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field",
                    "maxLength": 500,
                    "example": "Patient had a mild fever",
                    "nullable": true
                  }
                },
                "required": [
                  "defaultPracticeId",
                  "titleCode",
                  "lastName",
                  "gender",
                  "dob"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-10-12",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2014-05-08",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsiStatus": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 1,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever"
                  }
                },
                "Request With Mandatory Fields - With FirstName": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "0076b99c-294f-11eb-80f0-077af7b65083",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "N",
                    "preferredName": "Tim",
                    "previouslyKnownAs": null,
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": null,
                    "oneNameOnly": null,
                    "dateOfDeath": null,
                    "causeOfDeath": null,
                    "patientStatusCode": 1,
                    "ethnicityCode": null,
                    "englishAsSecondLanguage": null,
                    "atsiStatus": null,
                    "ctgCoPaymentRelief": null,
                    "placeOfBirth": null,
                    "skinCode": null,
                    "languageSpokenAtHome": null,
                    "homePhone": null,
                    "mobilePhone": null,
                    "workPhone": null,
                    "email": null,
                    "contactMethod": null,
                    "notes": null
                  }
                },
                "Request With Mandatory Fields - Without FirstName": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "0076b99c-294f-11eb-80f0-077af7b65083",
                    "titleCode": 315890000,
                    "firstName": null,
                    "lastName": "Mark",
                    "middleName": null,
                    "preferredName": null,
                    "previouslyKnownAs": null,
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": null,
                    "oneNameOnly": true,
                    "dateOfDeath": null,
                    "causeOfDeath": null,
                    "patientStatusCode": 1,
                    "ethnicityCode": null,
                    "englishAsSecondLanguage": null,
                    "atsiStatus": null,
                    "ctgCoPaymentRelief": null,
                    "placeOfBirth": null,
                    "skinCode": null,
                    "languageSpokenAtHome": null,
                    "homePhone": null,
                    "mobilePhone": null,
                    "workPhone": null,
                    "email": null,
                    "contactMethod": null,
                    "notes": null
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": null,
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": null,
                    "oneNameOnly": false,
                    "dateOfDeath": "2018-12-01",
                    "causeOfDeath": null,
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": null,
                    "atsiStatus": 4,
                    "ctgCoPaymentRelief": null,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": null,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": null,
                    "notes": "Patient had a mild fever"
                  }
                }
              }
            }
          },
          "description": "Patient Create Request"
        },
        "responses": {
          "201": {
            "description": "Patient Create Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientResponse",
                  "description": "The Patient Response properties that are included for a patient",
                  "type": "object",
                  "x-examples": {
                    "Full Patient Response": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-12-12",
                      "estimated": true,
                      "oneNameOnly": "false",
                      "dateOfDeath": "2018-03-04",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsi": 1,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "defaultPracticeId": {
                      "type": "string",
                      "description": "Default practice id where the patient details are created",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "format": "uuid",
                      "nullable": true
                    },
                    "usualDoctorId": {
                      "type": "string",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "description": "A user id that represents the usual doctor for the patient",
                      "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "format": "uuid",
                      "nullable": true
                    },
                    "titleCode": {
                      "type": "integer",
                      "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                      "example": 315890000
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Timothy",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents patient last name",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Mark"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Represents the patient middle name",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "David",
                      "nullable": true
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "Tim",
                      "nullable": true
                    },
                    "previouslyKnownAs": {
                      "type": "string",
                      "description": "Represents the patient previously known name",
                      "maxLength": 40,
                      "example": "Jake",
                      "minLength": 0,
                      "nullable": true
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Represents the patient full name",
                      "nullable": true
                    },
                    "dob": {
                      "type": "string",
                      "title": "DateOfBirth",
                      "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                      "format": "date",
                      "x-examples": {
                        "Date of Birth": "1970-01-10"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "estimated": {
                      "type": "boolean",
                      "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                      "nullable": true
                    },
                    "oneNameOnly": {
                      "type": "boolean",
                      "example": false,
                      "description": "The flag is set to true, if the patient has one name only",
                      "nullable": true
                    },
                    "dateOfDeath": {
                      "type": "string",
                      "nullable": true,
                      "title": "DateOfDeath",
                      "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                      "default": "yyyy-MM-dd",
                      "example": "2018-12-01",
                      "x-examples": {
                        "Date Of Death Format": "2018-12-01"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "causeOfDeath": {
                      "type": "string",
                      "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                      "example": "Cancer",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "patientStatusCode": {
                      "type": "integer",
                      "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                      "example": 2,
                      "nullable": true
                    },
                    "ethnicityCode": {
                      "type": "integer",
                      "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                      "example": 55,
                      "nullable": true
                    },
                    "englishAsSecondLanguage": {
                      "type": "boolean",
                      "description": "If english is the patient second language the flag is set as true else it is set to false",
                      "nullable": true
                    },
                    "atsiStatus": {
                      "type": "integer",
                      "title": "Atsi",
                      "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                      "example": 4,
                      "nullable": true,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "ctgCoPaymentRelief": {
                      "type": "boolean",
                      "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "nullable": true
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": "Sydney",
                      "maxLength": 100,
                      "nullable": true
                    },
                    "skinCode": {
                      "type": "integer",
                      "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": 16,
                      "nullable": true
                    },
                    "languageSpokenAtHome": {
                      "title": "LanguageSpokenAtHome",
                      "type": "integer",
                      "nullable": true,
                      "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "HomePhone",
                      "x-examples": {
                        "HomePhone Number": "0298761234"
                      },
                      "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "maxLength": 10,
                      "example": "0298761234",
                      "x-internal": false,
                      "minLength": 8
                    },
                    "mobilePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "MobilePhone",
                      "x-examples": {
                        "MobileNumber": "0413324123"
                      },
                      "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0413324123",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "workPhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "OfficePhone",
                      "x-examples": {
                        "OfficePhoneNumber": "0298671234"
                      },
                      "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0298671234",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "title": "Email",
                      "description": "Represents the patient email id.",
                      "x-examples": {
                        "Email": "Timothy.Mark@nedirecords.com"
                      },
                      "x-tags": [
                        "Common Models"
                      ],
                      "format": "email",
                      "example": "Timothy.Mark@nedirecords.com",
                      "maxLength": 100,
                      "x-internal": false
                    },
                    "contactMethod": {
                      "title": "PatientContactMethod",
                      "type": "number",
                      "nullable": true,
                      "x-examples": {
                        "example-1": 1
                      },
                      "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "example": "Patient had a mild fever",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-10-12",
                      "estimated": true,
                      "oneNameOnly": false,
                      "dateOfDeath": "2014-05-08",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsiStatus": 3,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "createdDateTime": "2020-10-28T04:55:06.766Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-10-29T15:00:40.226Z"
                    }
                  },
                  "Response With Mandatory Fields - With FirstName": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": null,
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": null,
                      "preferredName": null,
                      "previouslyKnownAs": null,
                      "gender": 2,
                      "dob": "1970-01-10",
                      "estimated": null,
                      "oneNameOnly": null,
                      "dateOfDeath": null,
                      "causeOfDeath": null,
                      "patientStatusCode": 1,
                      "ethnicityCode": null,
                      "englishAsSecondLanguage": null,
                      "atsiStatus": null,
                      "ctgCoPaymentRelief": null,
                      "placeOfBirth": null,
                      "skinCode": null,
                      "languageSpokenAtHome": null,
                      "homePhone": null,
                      "mobilePhone": null,
                      "workPhone": null,
                      "email": null,
                      "contactMethod": null,
                      "notes": null,
                      "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "createdDateTime": "2020-10-28T04:55:06.766Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-10-29T15:00:40.226Z"
                    }
                  },
                  "Response With Mandatory Fields - Without FirstName": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": null,
                      "titleCode": 315890000,
                      "firstName": null,
                      "lastName": "Mark",
                      "middleName": null,
                      "preferredName": null,
                      "previouslyKnownAs": null,
                      "gender": 2,
                      "dob": "1970-01-10",
                      "estimated": null,
                      "oneNameOnly": true,
                      "dateOfDeath": null,
                      "causeOfDeath": null,
                      "patientStatusCode": 1,
                      "ethnicityCode": null,
                      "englishAsSecondLanguage": null,
                      "atsiStatus": null,
                      "ctgCoPaymentRelief": null,
                      "placeOfBirth": null,
                      "skinCode": null,
                      "languageSpokenAtHome": null,
                      "homePhone": null,
                      "mobilePhone": null,
                      "workPhone": null,
                      "email": null,
                      "contactMethod": null,
                      "notes": null,
                      "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "createdDateTime": "2020-10-28T04:55:06.766Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-10-29T15:00:40.226Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Errors",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Errors Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "firstName",
                          "value": "*****",
                          "message": "First Name is Mandatory."
                        },
                        {
                          "parameter": "causeOfDeath",
                          "value": "*****",
                          "message": "Cause of Death Mandatory if date of death is entered."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Demographics"
        ]
      },
      "parameters": [],
      "get": {
        "summary": "Get all patients",
        "operationId": "get-all-patients",
        "description": "Get list of Patients",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "PatientPage",
                    "type": "object",
                    "x-examples": {
                      "Full Response with pagination": {
                        "data": [
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleId": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "genderCode": 2,
                            "dob": "8/12/1970",
                            "estimated": true,
                            "oneNameOnly": "false",
                            "dateOfDeath": "12/01/2010",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "esl": true,
                            "atsiId": 4,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 0,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "note": "Patient had a mild fever",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          }
                        ],
                        "first": true,
                        "last": false,
                        "totalPages": 3,
                        "totalElements": 29,
                        "numberOfElements": 10,
                        "size": 10,
                        "page": 0
                      }
                    },
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "title": "PatientResponse",
                          "description": "The Patient Response properties that are included for a patient",
                          "type": "object",
                          "x-examples": {
                            "Full Patient Response": {
                              "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                              "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                              "titleCode": 315890000,
                              "firstName": "Timothy",
                              "lastName": "Mark",
                              "middleName": "David",
                              "preferredName": "Tim",
                              "previouslyKnownAs": "Jake",
                              "fullName": "Timothy Mark",
                              "gender": 2,
                              "dob": "1970-12-12",
                              "estimated": true,
                              "oneNameOnly": "false",
                              "dateOfDeath": "2018-03-04",
                              "causeOfDeath": "Cancer",
                              "patientStatusCode": 2,
                              "ethnicityCode": 55,
                              "englishAsSecondLanguage": true,
                              "atsi": 1,
                              "ctgCoPaymentRelief": true,
                              "placeOfBirth": "Sydney",
                              "skinCode": 16,
                              "languageSpokenAtHome": 1,
                              "homePhone": 298761234,
                              "mobilePhone": "0413324123",
                              "workPhone": 298671234,
                              "email": "Timothy.Mark@nedirecords.com",
                              "contactMethod": 1,
                              "notes": "Patient had a mild fever",
                              "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "createdDateTime": "2019-08-24T14:15:22Z",
                              "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                              "updatedDateTime": "2019-08-24T14:15:22Z"
                            }
                          },
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                              "format": "uuid",
                              "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                            },
                            "defaultPracticeId": {
                              "type": "string",
                              "description": "Default practice id where the patient details are created",
                              "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                              "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                              "format": "uuid",
                              "nullable": true
                            },
                            "usualDoctorId": {
                              "type": "string",
                              "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                              "description": "A user id that represents the usual doctor for the patient",
                              "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                              "format": "uuid",
                              "nullable": true
                            },
                            "titleCode": {
                              "type": "integer",
                              "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                              "example": 315890000
                            },
                            "firstName": {
                              "type": "string",
                              "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                              "minLength": 1,
                              "maxLength": 40,
                              "example": "Timothy",
                              "nullable": true
                            },
                            "lastName": {
                              "type": "string",
                              "description": "Represents patient last name",
                              "minLength": 1,
                              "maxLength": 40,
                              "example": "Mark"
                            },
                            "middleName": {
                              "type": "string",
                              "description": "Represents the patient middle name",
                              "minLength": 0,
                              "maxLength": 40,
                              "example": "David",
                              "nullable": true
                            },
                            "preferredName": {
                              "type": "string",
                              "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                              "minLength": 0,
                              "maxLength": 40,
                              "example": "Tim",
                              "nullable": true
                            },
                            "previouslyKnownAs": {
                              "type": "string",
                              "description": "Represents the patient previously known name",
                              "maxLength": 40,
                              "example": "Jake",
                              "minLength": 0,
                              "nullable": true
                            },
                            "fullName": {
                              "type": "string",
                              "description": "Represents the patient full name",
                              "nullable": true
                            },
                            "dob": {
                              "type": "string",
                              "title": "DateOfBirth",
                              "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                              "format": "date",
                              "x-examples": {
                                "Date of Birth": "1970-01-10"
                              },
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "estimated": {
                              "type": "boolean",
                              "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                              "nullable": true
                            },
                            "oneNameOnly": {
                              "type": "boolean",
                              "example": false,
                              "description": "The flag is set to true, if the patient has one name only",
                              "nullable": true
                            },
                            "dateOfDeath": {
                              "type": "string",
                              "nullable": true,
                              "title": "DateOfDeath",
                              "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                              "default": "yyyy-MM-dd",
                              "example": "2018-12-01",
                              "x-examples": {
                                "Date Of Death Format": "2018-12-01"
                              },
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "causeOfDeath": {
                              "type": "string",
                              "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                              "example": "Cancer",
                              "maxLength": 300,
                              "nullable": true
                            },
                            "patientStatusCode": {
                              "type": "integer",
                              "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                              "example": 2,
                              "nullable": true
                            },
                            "ethnicityCode": {
                              "type": "integer",
                              "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                              "example": 55,
                              "nullable": true
                            },
                            "englishAsSecondLanguage": {
                              "type": "boolean",
                              "description": "If english is the patient second language the flag is set as true else it is set to false",
                              "nullable": true
                            },
                            "atsiStatus": {
                              "type": "integer",
                              "title": "Atsi",
                              "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                              "example": 4,
                              "nullable": true,
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "ctgCoPaymentRelief": {
                              "type": "boolean",
                              "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "nullable": true
                            },
                            "placeOfBirth": {
                              "type": "string",
                              "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "example": "Sydney",
                              "maxLength": 100,
                              "nullable": true
                            },
                            "skinCode": {
                              "type": "integer",
                              "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "example": 16,
                              "nullable": true
                            },
                            "languageSpokenAtHome": {
                              "title": "LanguageSpokenAtHome",
                              "type": "integer",
                              "nullable": true,
                              "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "x-examples": {
                                "example-1": 1
                              },
                              "x-internal": false
                            },
                            "homePhone": {
                              "type": "string",
                              "nullable": true,
                              "title": "HomePhone",
                              "x-examples": {
                                "HomePhone Number": "0298761234"
                              },
                              "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                              "x-tags": [
                                "Common Models"
                              ],
                              "maxLength": 10,
                              "example": "0298761234",
                              "x-internal": false,
                              "minLength": 8
                            },
                            "mobilePhone": {
                              "type": "string",
                              "nullable": true,
                              "title": "MobilePhone",
                              "x-examples": {
                                "MobileNumber": "0413324123"
                              },
                              "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                              "x-tags": [
                                "Common Models"
                              ],
                              "example": "0413324123",
                              "maxLength": 10,
                              "x-internal": false,
                              "minLength": 8
                            },
                            "workPhone": {
                              "type": "string",
                              "nullable": true,
                              "title": "OfficePhone",
                              "x-examples": {
                                "OfficePhoneNumber": "0298671234"
                              },
                              "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                              "x-tags": [
                                "Common Models"
                              ],
                              "example": "0298671234",
                              "maxLength": 10,
                              "x-internal": false,
                              "minLength": 8
                            },
                            "email": {
                              "type": "string",
                              "nullable": true,
                              "title": "Email",
                              "description": "Represents the patient email id.",
                              "x-examples": {
                                "Email": "Timothy.Mark@nedirecords.com"
                              },
                              "x-tags": [
                                "Common Models"
                              ],
                              "format": "email",
                              "example": "Timothy.Mark@nedirecords.com",
                              "maxLength": 100,
                              "x-internal": false
                            },
                            "contactMethod": {
                              "title": "PatientContactMethod",
                              "type": "number",
                              "nullable": true,
                              "x-examples": {
                                "example-1": 1
                              },
                              "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "notes": {
                              "type": "string",
                              "description": "Any comments or notes can be recorded in this field",
                              "maxLength": 500,
                              "example": "Patient had a mild fever",
                              "nullable": true
                            },
                            "createdBy": {
                              "type": "string",
                              "title": "CreatedBy",
                              "description": "A GUID refers to User identifier who created the resource.",
                              "x-examples": {
                                "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                              },
                              "default": "UUID",
                              "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "x-internal": false
                            },
                            "createdDateTime": {
                              "type": "string",
                              "title": "CreatedDate",
                              "description": "Time when the resource was created.",
                              "x-internal": false
                            },
                            "updatedBy": {
                              "type": "string",
                              "title": "UpdatedBy",
                              "description": "A GUID refers to User identifier who updated the resource.",
                              "default": "UUID",
                              "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                              "x-internal": false
                            },
                            "updatedDateTime": {
                              "title": "UpdatedDate",
                              "type": "string",
                              "description": "Time when the resource was updated.",
                              "x-internal": false
                            }
                          },
                          "x-tags": [
                            "Other"
                          ]
                        }
                      },
                      "first": {
                        "type": "boolean",
                        "description": "Showing the first page."
                      },
                      "last": {
                        "type": "boolean",
                        "description": "Showing the last page."
                      },
                      "totalPages": {
                        "type": "integer",
                        "description": "Total Pages"
                      },
                      "totalElements": {
                        "description": "Total records",
                        "type": "integer"
                      },
                      "numberOfElements": {
                        "type": "integer",
                        "description": "Total records"
                      },
                      "size": {
                        "description": "Number of records in a page",
                        "type": "integer"
                      },
                      "page": {
                        "type": "integer",
                        "description": "current page number"
                      }
                    },
                    "description": "Get all patients with pagination",
                    "x-tags": [
                      "Other"
                    ]
                  }
                },
                "examples": {
                  "List Of Patients With Pagination": {
                    "value": [
                      {
                        "data": [
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "genderCode": 2,
                            "dob": "1970-09-08",
                            "estimated": true,
                            "oneNameOnly": false,
                            "dateOfDeath": "2018-07-09",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsiStatus": 1,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 1,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          },
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "genderCode": 2,
                            "dob": "1970-06-10",
                            "estimated": true,
                            "oneNameOnly": false,
                            "dateOfDeath": "2017-08-04",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsiStatus": 3,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 0,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          }
                        ],
                        "first": true,
                        "last": true,
                        "totalPages": 1,
                        "totalElements": 2,
                        "numberOfElements": 2,
                        "size": 10,
                        "page": 0
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "tags": [
          "Demographics"
        ]
      }
    },
    "/v1/patients/{patient_id}": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "get": {
        "summary": "Get patient",
        "tags": [
          "Demographics"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientResponse",
                  "description": "The Patient Response properties that are included for a patient",
                  "type": "object",
                  "x-examples": {
                    "Full Patient Response": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-12-12",
                      "estimated": true,
                      "oneNameOnly": "false",
                      "dateOfDeath": "2018-03-04",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsi": 1,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "defaultPracticeId": {
                      "type": "string",
                      "description": "Default practice id where the patient details are created",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "format": "uuid",
                      "nullable": true
                    },
                    "usualDoctorId": {
                      "type": "string",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "description": "A user id that represents the usual doctor for the patient",
                      "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "format": "uuid",
                      "nullable": true
                    },
                    "titleCode": {
                      "type": "integer",
                      "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                      "example": 315890000
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Timothy",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents patient last name",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Mark"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Represents the patient middle name",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "David",
                      "nullable": true
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "Tim",
                      "nullable": true
                    },
                    "previouslyKnownAs": {
                      "type": "string",
                      "description": "Represents the patient previously known name",
                      "maxLength": 40,
                      "example": "Jake",
                      "minLength": 0,
                      "nullable": true
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Represents the patient full name",
                      "nullable": true
                    },
                    "dob": {
                      "type": "string",
                      "title": "DateOfBirth",
                      "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                      "format": "date",
                      "x-examples": {
                        "Date of Birth": "1970-01-10"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "estimated": {
                      "type": "boolean",
                      "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                      "nullable": true
                    },
                    "oneNameOnly": {
                      "type": "boolean",
                      "example": false,
                      "description": "The flag is set to true, if the patient has one name only",
                      "nullable": true
                    },
                    "dateOfDeath": {
                      "type": "string",
                      "nullable": true,
                      "title": "DateOfDeath",
                      "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                      "default": "yyyy-MM-dd",
                      "example": "2018-12-01",
                      "x-examples": {
                        "Date Of Death Format": "2018-12-01"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "causeOfDeath": {
                      "type": "string",
                      "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                      "example": "Cancer",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "patientStatusCode": {
                      "type": "integer",
                      "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                      "example": 2,
                      "nullable": true
                    },
                    "ethnicityCode": {
                      "type": "integer",
                      "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                      "example": 55,
                      "nullable": true
                    },
                    "englishAsSecondLanguage": {
                      "type": "boolean",
                      "description": "If english is the patient second language the flag is set as true else it is set to false",
                      "nullable": true
                    },
                    "atsiStatus": {
                      "type": "integer",
                      "title": "Atsi",
                      "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                      "example": 4,
                      "nullable": true,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "ctgCoPaymentRelief": {
                      "type": "boolean",
                      "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "nullable": true
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": "Sydney",
                      "maxLength": 100,
                      "nullable": true
                    },
                    "skinCode": {
                      "type": "integer",
                      "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": 16,
                      "nullable": true
                    },
                    "languageSpokenAtHome": {
                      "title": "LanguageSpokenAtHome",
                      "type": "integer",
                      "nullable": true,
                      "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "HomePhone",
                      "x-examples": {
                        "HomePhone Number": "0298761234"
                      },
                      "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "maxLength": 10,
                      "example": "0298761234",
                      "x-internal": false,
                      "minLength": 8
                    },
                    "mobilePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "MobilePhone",
                      "x-examples": {
                        "MobileNumber": "0413324123"
                      },
                      "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0413324123",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "workPhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "OfficePhone",
                      "x-examples": {
                        "OfficePhoneNumber": "0298671234"
                      },
                      "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0298671234",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "title": "Email",
                      "description": "Represents the patient email id.",
                      "x-examples": {
                        "Email": "Timothy.Mark@nedirecords.com"
                      },
                      "x-tags": [
                        "Common Models"
                      ],
                      "format": "email",
                      "example": "Timothy.Mark@nedirecords.com",
                      "maxLength": 100,
                      "x-internal": false
                    },
                    "contactMethod": {
                      "title": "PatientContactMethod",
                      "type": "number",
                      "nullable": true,
                      "x-examples": {
                        "example-1": 1
                      },
                      "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "example": "Patient had a mild fever",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Patient Search Response": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "genderCode": 2,
                      "dob": "1970-08-05",
                      "estimated": true,
                      "oneNameOnly": false,
                      "dateOfDeath": "2015-09-01",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsiStatus": 3,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patients-id",
        "description": "Get a patient for a given patient id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update patient",
        "operationId": "put-patients-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientResponse",
                  "description": "The Patient Response properties that are included for a patient",
                  "type": "object",
                  "x-examples": {
                    "Full Patient Response": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-12-12",
                      "estimated": true,
                      "oneNameOnly": "false",
                      "dateOfDeath": "2018-03-04",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsi": 1,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "defaultPracticeId": {
                      "type": "string",
                      "description": "Default practice id where the patient details are created",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "format": "uuid",
                      "nullable": true
                    },
                    "usualDoctorId": {
                      "type": "string",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "description": "A user id that represents the usual doctor for the patient",
                      "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "format": "uuid",
                      "nullable": true
                    },
                    "titleCode": {
                      "type": "integer",
                      "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                      "example": 315890000
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Timothy",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents patient last name",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Mark"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Represents the patient middle name",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "David",
                      "nullable": true
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "Tim",
                      "nullable": true
                    },
                    "previouslyKnownAs": {
                      "type": "string",
                      "description": "Represents the patient previously known name",
                      "maxLength": 40,
                      "example": "Jake",
                      "minLength": 0,
                      "nullable": true
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Represents the patient full name",
                      "nullable": true
                    },
                    "dob": {
                      "type": "string",
                      "title": "DateOfBirth",
                      "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                      "format": "date",
                      "x-examples": {
                        "Date of Birth": "1970-01-10"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "estimated": {
                      "type": "boolean",
                      "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                      "nullable": true
                    },
                    "oneNameOnly": {
                      "type": "boolean",
                      "example": false,
                      "description": "The flag is set to true, if the patient has one name only",
                      "nullable": true
                    },
                    "dateOfDeath": {
                      "type": "string",
                      "nullable": true,
                      "title": "DateOfDeath",
                      "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                      "default": "yyyy-MM-dd",
                      "example": "2018-12-01",
                      "x-examples": {
                        "Date Of Death Format": "2018-12-01"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "causeOfDeath": {
                      "type": "string",
                      "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                      "example": "Cancer",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "patientStatusCode": {
                      "type": "integer",
                      "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                      "example": 2,
                      "nullable": true
                    },
                    "ethnicityCode": {
                      "type": "integer",
                      "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                      "example": 55,
                      "nullable": true
                    },
                    "englishAsSecondLanguage": {
                      "type": "boolean",
                      "description": "If english is the patient second language the flag is set as true else it is set to false",
                      "nullable": true
                    },
                    "atsiStatus": {
                      "type": "integer",
                      "title": "Atsi",
                      "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                      "example": 4,
                      "nullable": true,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "ctgCoPaymentRelief": {
                      "type": "boolean",
                      "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "nullable": true
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": "Sydney",
                      "maxLength": 100,
                      "nullable": true
                    },
                    "skinCode": {
                      "type": "integer",
                      "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": 16,
                      "nullable": true
                    },
                    "languageSpokenAtHome": {
                      "title": "LanguageSpokenAtHome",
                      "type": "integer",
                      "nullable": true,
                      "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "HomePhone",
                      "x-examples": {
                        "HomePhone Number": "0298761234"
                      },
                      "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "maxLength": 10,
                      "example": "0298761234",
                      "x-internal": false,
                      "minLength": 8
                    },
                    "mobilePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "MobilePhone",
                      "x-examples": {
                        "MobileNumber": "0413324123"
                      },
                      "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0413324123",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "workPhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "OfficePhone",
                      "x-examples": {
                        "OfficePhoneNumber": "0298671234"
                      },
                      "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0298671234",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "title": "Email",
                      "description": "Represents the patient email id.",
                      "x-examples": {
                        "Email": "Timothy.Mark@nedirecords.com"
                      },
                      "x-tags": [
                        "Common Models"
                      ],
                      "format": "email",
                      "example": "Timothy.Mark@nedirecords.com",
                      "maxLength": 100,
                      "x-internal": false
                    },
                    "contactMethod": {
                      "title": "PatientContactMethod",
                      "type": "number",
                      "nullable": true,
                      "x-examples": {
                        "example-1": 1
                      },
                      "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "example": "Patient had a mild fever",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-11-11",
                      "estimated": true,
                      "oneNameOnly": false,
                      "dateOfDeath": "2010-01-01",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsiStatus": 3,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Error Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "firstName",
                          "value": "*****",
                          "message": "First Name is Mandatory."
                        },
                        {
                          "parameter": "causeOfDeath",
                          "value": "*****",
                          "message": "Cause of Death Mandatory if date of death is entered."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update a patient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Patient",
                "type": "object",
                "description": "The common properties that are included for a patient",
                "x-examples": {
                  "Full Patient Details the can be change": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-01-03",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2016-09-07",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsi": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 2,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever"
                  }
                },
                "properties": {
                  "defaultPracticeId": {
                    "type": "string",
                    "description": "Default practice id where the patient details are created",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                    "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "format": "uuid"
                  },
                  "usualDoctorId": {
                    "type": "string",
                    "description": "A user id that represents the usual doctor for the patient",
                    "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "format": "uuid",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)"
                  },
                  "titleCode": {
                    "type": "integer",
                    "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title-code",
                    "example": 315890000
                  },
                  "firstName": {
                    "description": "Represents the patient first name. The firstName is null when oneNameOnly flag is set to true",
                    "type": "string",
                    "nullable": true
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Represents patient last name",
                    "minLength": 1,
                    "maxLength": 40,
                    "example": "Mark"
                  },
                  "middleName": {
                    "type": "string",
                    "description": "Represents the patient middle name",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "David",
                    "nullable": true
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "Tim",
                    "nullable": true
                  },
                  "previouslyKnownAs": {
                    "type": "string",
                    "description": "Represents the patient previously known name",
                    "maxLength": 40,
                    "example": "Jake",
                    "minLength": 0,
                    "nullable": true
                  },
                  "dob": {
                    "type": "string",
                    "title": "DateOfBirth",
                    "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                    "format": "date",
                    "x-examples": {
                      "Date of Birth": "1970-01-10"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "estimated": {
                    "type": "boolean",
                    "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                    "nullable": true
                  },
                  "oneNameOnly": {
                    "type": "boolean",
                    "example": false,
                    "description": "The flag is set to true, if the patient has one name only",
                    "nullable": true
                  },
                  "dateOfDeath": {
                    "type": "string",
                    "nullable": true,
                    "title": "DateOfDeath",
                    "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                    "default": "yyyy-MM-dd",
                    "example": "2018-12-01",
                    "x-examples": {
                      "Date Of Death Format": "2018-12-01"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "causeOfDeath": {
                    "type": "string",
                    "description": "Represents the patient cause of death. This field is mandatory if the date of death is entered.",
                    "example": "Cancer",
                    "maxLength": 300,
                    "nullable": true
                  },
                  "patientStatusCode": {
                    "type": "integer",
                    "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status-code",
                    "example": 2
                  },
                  "ethnicityCode": {
                    "type": "integer",
                    "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity-code",
                    "example": 55,
                    "nullable": true
                  },
                  "englishAsSecondLanguage": {
                    "type": "boolean",
                    "description": "If english is the patient second language the flag is set as true else it is set to false",
                    "nullable": true
                  },
                  "atsiStatus": {
                    "type": "integer",
                    "title": "Atsi",
                    "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                    "example": 4,
                    "nullable": true,
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "ctgCoPaymentRelief": {
                    "type": "boolean",
                    "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "placeOfBirth": {
                    "type": "string",
                    "description": "Represents the  place of birth for patient with atsi status. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": "Sydney",
                    "minLength": 0,
                    "maxLength": 100,
                    "nullable": true
                  },
                  "skinCode": {
                    "type": "integer",
                    "description": "Represents the skin code for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin-code. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": 16,
                    "nullable": true
                  },
                  "languageSpokenAtHome": {
                    "type": "integer",
                    "description": "Represents the language spoken at home for patient with atsi status\n1 - Aghu Tharrnggala\n2 - Alngith dialect.\nThis field is  only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "homePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "HomePhone",
                    "x-examples": {
                      "HomePhone Number": "0298761234"
                    },
                    "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "maxLength": 10,
                    "example": "0298761234",
                    "x-internal": false,
                    "minLength": 8
                  },
                  "mobilePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "MobilePhone",
                    "x-examples": {
                      "MobileNumber": "0413324123"
                    },
                    "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0413324123",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "workPhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "OfficePhone",
                    "x-examples": {
                      "OfficePhoneNumber": "0298671234"
                    },
                    "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0298671234",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "title": "Email",
                    "description": "Represents the patient email id.",
                    "x-examples": {
                      "Email": "Timothy.Mark@nedirecords.com"
                    },
                    "x-tags": [
                      "Common Models"
                    ],
                    "format": "email",
                    "example": "Timothy.Mark@nedirecords.com",
                    "maxLength": 100,
                    "x-internal": false
                  },
                  "contactMethod": {
                    "title": "PatientContactMethod",
                    "type": "number",
                    "nullable": true,
                    "x-examples": {
                      "example-1": 1
                    },
                    "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field",
                    "maxLength": 500,
                    "example": "Patient had a mild fever",
                    "nullable": true
                  }
                },
                "required": [
                  "defaultPracticeId",
                  "titleCode",
                  "lastName",
                  "gender",
                  "dob"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-11-11",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2010-01-01",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsiStatus": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 1,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever"
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "defaultPracticeId": "81625c94-4a23-4049-b431-91aabaa85d3d",
                    "usualDoctorId": "0d161e1c-142f-4788-972b-5bffff44e4ee",
                    "titleCode": 315890000,
                    "firstName": null,
                    "lastName": "Deal",
                    "middleName": "C",
                    "fullName": "James Kirk",
                    "previouslyKnownAs": null,
                    "preferredName": null,
                    "gender": 1,
                    "dob": "2000-10-10",
                    "estimated": true,
                    "dateOfDeath": "2020-10-12",
                    "causeOfDeath": null,
                    "patientStatusCode": 4,
                    "ethnicityCode": 10,
                    "esl": null,
                    "atsiStatus": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 24,
                    "languageSpokenAtHome": 1,
                    "homePhone": 298761234,
                    "mobilePhone": "0411111111",
                    "workPhone": 398671256,
                    "email": "test@gmail.com",
                    "contactMethodId": 1,
                    "notes": "Not feeling weel",
                    "oneNameOnly": false
                  }
                }
              }
            }
          },
          "description": "Request for Patient Update"
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Demographics"
        ]
      },
      "delete": {
        "summary": "Delete patient",
        "operationId": "delete-patients-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "5987afa6-2976-11eb-b53a-538b0f928ae9",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete a Patient by Id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Demographics"
        ]
      }
    },
    "/v1/patients/{patient_id}/referrals": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "post": {
        "summary": "Create referral",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Referrer",
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "id": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd707777",
                      "referrerProviderNo": "66f73f18",
                      "referralDate": "2020-11-14",
                      "referredById": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                      "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd708888",
                      "subject": "X-ray",
                      "referralTypeCode": 1,
                      "firstUsedDate": "2020-11-11",
                      "validMonth": 12,
                      "notes": "X-ray for knee",
                      "confidential": true,
                      "referredByName": "Dr Maggie Kane",
                      "referredToName": "Dr Bob Brown",
                      "referredByPractice": "11173f18-ad0a-11e9-92bf-cb45fd706045",
                      "standardOption": 12,
                      "expiryDate": "2020-11-15",
                      "referredByType": 1,
                      "referredToType": 2,
                      "createdDateTime": "2020-11-11T14:40:44.421+0000",
                      "createBy": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                      "updatedDateTime": "2020-11-11T14:40:44.421+0000",
                      "updatedById": "22f73f18-ad0a-11e9-92bf-cb45fd706045"
                    }
                  },
                  "description": "",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Referral id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "patientId": {
                      "type": "string",
                      "description": "A GUID that represents patient by id",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "format": "none",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                    },
                    "referrerProviderNo": {
                      "type": "string",
                      "description": "Represents the referred by provier no",
                      "example": "\"6f7f8\"",
                      "maxLength": 8,
                      "nullable": true
                    },
                    "referralDate": {
                      "type": "string",
                      "description": "Represents the referral created date. Referral created date should not be in the future and should not be after the firstUsedDate.",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD"
                    },
                    "referredById": {
                      "type": "string",
                      "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                    },
                    "referredToId": {
                      "type": "string",
                      "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "subject": {
                      "type": "string",
                      "description": "Represents the referral subject",
                      "minLength": 1,
                      "maxLength": 100,
                      "example": "\"X-ray\""
                    },
                    "referralTypeCode": {
                      "type": "integer",
                      "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
                    },
                    "firstUsedDate": {
                      "type": "string",
                      "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD",
                      "nullable": true
                    },
                    "validMonth": {
                      "type": "number",
                      "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.\n",
                      "example": 12
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field.",
                      "maxLength": 500,
                      "example": "\"X-ray for knee\"",
                      "nullable": true
                    },
                    "confidential": {
                      "description": "Flag indicates whether the referral records is condifentials or not.",
                      "type": "boolean"
                    },
                    "referredByName": {
                      "type": "string",
                      "description": "Represents the referred by name",
                      "example": "\"Tom\""
                    },
                    "referredToName": {
                      "type": "string",
                      "description": "Represents the reffered to name.",
                      "example": "\"Tim\""
                    },
                    "referredByPractice": {
                      "type": "string",
                      "description": "Represents the referred by practice id.  If the referredBy is a practice, then referredByPractice will always be null.",
                      "format": "none",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "nullable": true
                    },
                    "standardOption": {
                      "description": "Represents the valid month in case of standard referrals",
                      "example": 1,
                      "type": "number",
                      "nullable": true
                    },
                    "expiryDate": {
                      "type": "string",
                      "description": "Represents the referral expiry date. If the validMonth is null , then expiryDate is null",
                      "format": "none",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD"
                    },
                    "referredByType": {
                      "title": "ReferredByTypeEnum",
                      "type": "integer",
                      "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "referredToType": {
                      "title": "ReferredToTypeEnum",
                      "type": "integer",
                      "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "eab7aa24-56f0-11eb-9499-0b1199252fc0",
                      "patientId": "dba0ace2-d8b3-11e8-b675-eb2556623e37",
                      "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                      "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "referredToName": "Mick Le",
                      "referredByName": "Ella Jenner",
                      "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "referralTypeCode": 2,
                      "expiryDate": "2021-11-28",
                      "referrerProviderNo": null,
                      "subject": "X-Ray",
                      "notes": "Possible fracture",
                      "confidential": true,
                      "firstUsedDate": "2020-11-30",
                      "standardOption": null,
                      "validMonth": 3,
                      "referralDate": "2020-11-28",
                      "referredByType": 4,
                      "referredToType": 4,
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2021-01-15T16:17:09.436+0000",
                      "updatedDateTime": "2021-01-15T16:17:09.436+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625"
                    }
                  },
                  "Response With Mandatory Fields": {
                    "value": {
                      "id": "aa1477cc-56f5-11eb-97e4-9fa28823b045",
                      "patientId": "dba0ace2-d8b3-11e8-b675-eb2556623e37",
                      "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                      "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "referredToName": "Mick Le",
                      "referredByName": "Ella Jenner",
                      "referredByPractice": null,
                      "referralTypeCode": 1,
                      "expiryDate": "2021-11-12",
                      "referrerProviderNo": null,
                      "subject": "X-Ray",
                      "notes": null,
                      "confidential": false,
                      "firstUsedDate": null,
                      "standardOption": 12,
                      "validMonth": 12,
                      "referralDate": "2020-11-12",
                      "referredByType": 4,
                      "referredToType": 4,
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2021-01-15T16:51:08.508+0000",
                      "updatedDateTime": "2021-01-15T16:51:08.509+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request With Invalid Fields Errors Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referralTypeCode",
                          "value": "25",
                          "message": "Must be a valid value"
                        },
                        {
                          "parameter": "subject",
                          "value": "null",
                          "message": "must not be empty"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorized Error response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-patient-id-referrer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "ReferrerCreateUpdate",
                "type": "object",
                "x-examples": {
                  "example": {
                    "referralDate": "14/11/2020",
                    "referredById": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                    "referredToId": "22f73f18-ad0a-11e9-92bf-cb45fd701111",
                    "subject": "X-ray",
                    "referralTypeCode": 1,
                    "firstUsedDate": "2020-11-14",
                    "validMonth": 12,
                    "notes": "X-ray for knee",
                    "confidential": true,
                    "referredByType": 1,
                    "referredToType": 2
                  }
                },
                "properties": {
                  "referralDate": {
                    "type": "string",
                    "description": "Represents the referral created date .Referral created date should not be in the future and should not be after the firstUsedDate.",
                    "example": "2020-11-14",
                    "default": "YYYY-MM-DD"
                  },
                  "referredById": {
                    "type": "string",
                    "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User\n",
                    "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "referredToId": {
                    "type": "string",
                    "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                  },
                  "subject": {
                    "type": "string",
                    "description": "Represents the referral subject",
                    "minLength": 1,
                    "maxLength": 100,
                    "example": "\"X-ray\""
                  },
                  "referralTypeCode": {
                    "type": "integer",
                    "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
                  },
                  "firstUsedDate": {
                    "type": "string",
                    "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
                    "default": "YYYY-MM-DD",
                    "example": "2020-11-14",
                    "nullable": true
                  },
                  "validMonth": {
                    "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.",
                    "example": 12,
                    "type": "number"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field.",
                    "maxLength": 500,
                    "example": "\"X-ray for knee\"",
                    "nullable": true
                  },
                  "confidential": {
                    "description": "Flag indicates whether the referral records is condifentials or not.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "referredByType": {
                    "title": "ReferredByTypeEnum",
                    "type": "integer",
                    "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "referredToType": {
                    "title": "ReferredToTypeEnum",
                    "type": "integer",
                    "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "referredByPractice": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "referralDate",
                  "referredById",
                  "referredToId",
                  "subject",
                  "referralTypeCode",
                  "referredByType",
                  "referredToType"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "referralDate": "2020-11-28",
                    "subject": "X-Ray",
                    "referralTypeCode": 2,
                    "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                    "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                    "validMonth": 3,
                    "firstUsedDate": "2020-11-30",
                    "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                    "notes": "Possible fracture",
                    "confidential": true,
                    "referredToType": 4,
                    "referredByType": 4
                  }
                },
                "Request with Mandatory Fields": {
                  "value": {
                    "referralDate": "2020-11-12",
                    "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                    "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                    "referredByPractice": null,
                    "subject": "X-ray",
                    "referralTypeCode": 1,
                    "firstUsedDate": null,
                    "validMonth": 12,
                    "notes": null,
                    "confidential": null,
                    "referredByType": 4,
                    "referredToType": 4
                  }
                },
                "Bad Request with Invalid Fields": {
                  "value": {
                    "referralDate": "2020-11-12",
                    "referredById": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                    "referredToId": "22f73f18-ad0a-11e9-92bf-cb45fd701111",
                    "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                    "subject": null,
                    "referralTypeCode": 25,
                    "firstUsedDate": "2020-11-14",
                    "validMonth": 12,
                    "notes": "X-ray for knee",
                    "confidential": true,
                    "referredByType": 1,
                    "referredToType": 2
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "description": "Create referral for given patient id",
        "tags": [
          "Referrals"
        ]
      },
      "get": {
        "summary": "Get all referral",
        "tags": [
          "Referrals"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ReferrerPage",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "data": [
                        {
                          "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                          "referrerProviderNo": "66f73f18",
                          "referralDate": "14/11/2020",
                          "referredById": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                          "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                          "subject": "X-ray",
                          "referralTypeCode": 0,
                          "firstUsedDate": "14/11/2020",
                          "validMonth": 12,
                          "notes": "X-ray for knee",
                          "confidential": true,
                          "referredByName": "Tom",
                          "referredToName": "Tim",
                          "referredByPractice": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                          "standardOption": "1",
                          "expiryDate": "15/11/2020",
                          "referredByType": 0,
                          "referredToType": 0,
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "string",
                          "updatedDateTime": "string"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 0,
                      "numberOfElements": 0,
                      "size": 0,
                      "page": 0
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "Referrer",
                        "type": "object",
                        "x-examples": {
                          "example": {
                            "id": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                            "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd707777",
                            "referrerProviderNo": "66f73f18",
                            "referralDate": "2020-11-14",
                            "referredById": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                            "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd708888",
                            "subject": "X-ray",
                            "referralTypeCode": 1,
                            "firstUsedDate": "2020-11-11",
                            "validMonth": 12,
                            "notes": "X-ray for knee",
                            "confidential": true,
                            "referredByName": "Dr Maggie Kane",
                            "referredToName": "Dr Bob Brown",
                            "referredByPractice": "11173f18-ad0a-11e9-92bf-cb45fd706045",
                            "standardOption": 12,
                            "expiryDate": "2020-11-15",
                            "referredByType": 1,
                            "referredToType": 2,
                            "createdDateTime": "2020-11-11T14:40:44.421+0000",
                            "createBy": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                            "updatedDateTime": "2020-11-11T14:40:44.421+0000",
                            "updatedById": "22f73f18-ad0a-11e9-92bf-cb45fd706045"
                          }
                        },
                        "description": "",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Referral id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                            "format": "uuid",
                            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                          },
                          "patientId": {
                            "type": "string",
                            "description": "A GUID that represents patient by id",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "format": "none",
                            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                          },
                          "referrerProviderNo": {
                            "type": "string",
                            "description": "Represents the referred by provier no",
                            "example": "\"6f7f8\"",
                            "maxLength": 8,
                            "nullable": true
                          },
                          "referralDate": {
                            "type": "string",
                            "description": "Represents the referral created date. Referral created date should not be in the future and should not be after the firstUsedDate.",
                            "example": "2020-11-14",
                            "default": "YYYY-MM-DD"
                          },
                          "referredById": {
                            "type": "string",
                            "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                          },
                          "referredToId": {
                            "type": "string",
                            "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
                            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Represents the referral subject",
                            "minLength": 1,
                            "maxLength": 100,
                            "example": "\"X-ray\""
                          },
                          "referralTypeCode": {
                            "type": "integer",
                            "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
                          },
                          "firstUsedDate": {
                            "type": "string",
                            "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
                            "example": "2020-11-14",
                            "default": "YYYY-MM-DD",
                            "nullable": true
                          },
                          "validMonth": {
                            "type": "number",
                            "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.\n",
                            "example": 12
                          },
                          "notes": {
                            "type": "string",
                            "description": "Any comments or notes can be recorded in this field.",
                            "maxLength": 500,
                            "example": "\"X-ray for knee\"",
                            "nullable": true
                          },
                          "confidential": {
                            "description": "Flag indicates whether the referral records is condifentials or not.",
                            "type": "boolean"
                          },
                          "referredByName": {
                            "type": "string",
                            "description": "Represents the referred by name",
                            "example": "\"Tom\""
                          },
                          "referredToName": {
                            "type": "string",
                            "description": "Represents the reffered to name.",
                            "example": "\"Tim\""
                          },
                          "referredByPractice": {
                            "type": "string",
                            "description": "Represents the referred by practice id.  If the referredBy is a practice, then referredByPractice will always be null.",
                            "format": "none",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                            "nullable": true
                          },
                          "standardOption": {
                            "description": "Represents the valid month in case of standard referrals",
                            "example": 1,
                            "type": "number",
                            "nullable": true
                          },
                          "expiryDate": {
                            "type": "string",
                            "description": "Represents the referral expiry date. If the validMonth is null , then expiryDate is null",
                            "format": "none",
                            "example": "2020-11-14",
                            "default": "YYYY-MM-DD"
                          },
                          "referredByType": {
                            "title": "ReferredByTypeEnum",
                            "type": "integer",
                            "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "referredToType": {
                            "title": "ReferredToTypeEnum",
                            "type": "integer",
                            "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "List of Referrals with Pagination": {
                    "value": {
                      "data": [
                        {
                          "id": "eab7aa24-56f0-11eb-9499-0b1199252fc0",
                          "patientId": "dba0ace2-d8b3-11e8-b675-eb2556623e37",
                          "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                          "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "referredToName": "Mick Le",
                          "referredByName": "Ella Jenner",
                          "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "referralTypeCode": 2,
                          "expiryDate": "2021-11-28",
                          "referrerProviderNo": null,
                          "subject": "X-Ray",
                          "notes": "Possible fracture",
                          "confidential": true,
                          "firstUsedDate": "2020-11-30",
                          "standardOption": null,
                          "validMonth": 3,
                          "referralDate": "2020-11-28",
                          "referredByType": 4,
                          "referredToType": 4,
                          "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "createdDateTime": "2021-01-15T16:17:09.436+0000",
                          "updatedDateTime": "2021-01-15T16:17:09.436+0000",
                          "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "numberOfElements": 1,
                      "size": 1,
                      "page": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patient-id-referrer",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "header",
            "name": "X-Pagination-Limit",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of results. Default 10",
            "required": false
          },
          {
            "in": "header",
            "name": "X-Pagination-Page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number. Default 0",
            "required": false
          }
        ],
        "description": "Get all referrals for a given patient id"
      }
    },
    "/v1/patients/{patient_id}/referrals/{referral_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "referral_id",
          "in": "path",
          "required": true,
          "description": "Referral GUID"
        },
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "put": {
        "summary": "Update referral",
        "tags": [
          "Referrals"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Referrer",
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "id": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd707777",
                      "referrerProviderNo": "66f73f18",
                      "referralDate": "2020-11-14",
                      "referredById": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                      "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd708888",
                      "subject": "X-ray",
                      "referralTypeCode": 1,
                      "firstUsedDate": "2020-11-11",
                      "validMonth": 12,
                      "notes": "X-ray for knee",
                      "confidential": true,
                      "referredByName": "Dr Maggie Kane",
                      "referredToName": "Dr Bob Brown",
                      "referredByPractice": "11173f18-ad0a-11e9-92bf-cb45fd706045",
                      "standardOption": 12,
                      "expiryDate": "2020-11-15",
                      "referredByType": 1,
                      "referredToType": 2,
                      "createdDateTime": "2020-11-11T14:40:44.421+0000",
                      "createBy": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                      "updatedDateTime": "2020-11-11T14:40:44.421+0000",
                      "updatedById": "22f73f18-ad0a-11e9-92bf-cb45fd706045"
                    }
                  },
                  "description": "",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Referral id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "patientId": {
                      "type": "string",
                      "description": "A GUID that represents patient by id",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "format": "none",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                    },
                    "referrerProviderNo": {
                      "type": "string",
                      "description": "Represents the referred by provier no",
                      "example": "\"6f7f8\"",
                      "maxLength": 8,
                      "nullable": true
                    },
                    "referralDate": {
                      "type": "string",
                      "description": "Represents the referral created date. Referral created date should not be in the future and should not be after the firstUsedDate.",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD"
                    },
                    "referredById": {
                      "type": "string",
                      "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                    },
                    "referredToId": {
                      "type": "string",
                      "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "subject": {
                      "type": "string",
                      "description": "Represents the referral subject",
                      "minLength": 1,
                      "maxLength": 100,
                      "example": "\"X-ray\""
                    },
                    "referralTypeCode": {
                      "type": "integer",
                      "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
                    },
                    "firstUsedDate": {
                      "type": "string",
                      "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD",
                      "nullable": true
                    },
                    "validMonth": {
                      "type": "number",
                      "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.\n",
                      "example": 12
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field.",
                      "maxLength": 500,
                      "example": "\"X-ray for knee\"",
                      "nullable": true
                    },
                    "confidential": {
                      "description": "Flag indicates whether the referral records is condifentials or not.",
                      "type": "boolean"
                    },
                    "referredByName": {
                      "type": "string",
                      "description": "Represents the referred by name",
                      "example": "\"Tom\""
                    },
                    "referredToName": {
                      "type": "string",
                      "description": "Represents the reffered to name.",
                      "example": "\"Tim\""
                    },
                    "referredByPractice": {
                      "type": "string",
                      "description": "Represents the referred by practice id.  If the referredBy is a practice, then referredByPractice will always be null.",
                      "format": "none",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "nullable": true
                    },
                    "standardOption": {
                      "description": "Represents the valid month in case of standard referrals",
                      "example": 1,
                      "type": "number",
                      "nullable": true
                    },
                    "expiryDate": {
                      "type": "string",
                      "description": "Represents the referral expiry date. If the validMonth is null , then expiryDate is null",
                      "format": "none",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD"
                    },
                    "referredByType": {
                      "title": "ReferredByTypeEnum",
                      "type": "integer",
                      "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "referredToType": {
                      "title": "ReferredToTypeEnum",
                      "type": "integer",
                      "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "eab7aa24-56f0-11eb-9499-0b1199252fc0",
                      "patientId": "dba0ace2-d8b3-11e8-b675-eb2556623e37",
                      "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                      "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "referredToName": "Mick Le",
                      "referredByName": "Ella Jenner",
                      "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "referralTypeCode": 2,
                      "expiryDate": "2021-11-28",
                      "referrerProviderNo": null,
                      "subject": "X-Ray",
                      "notes": "Possible fracture",
                      "confidential": true,
                      "firstUsedDate": "2020-11-30",
                      "standardOption": null,
                      "validMonth": 3,
                      "referralDate": "2020-11-28",
                      "referredByType": 4,
                      "referredToType": 4,
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2021-01-15T16:17:09.436+0000",
                      "updatedDateTime": "2021-01-15T16:17:09.436+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625"
                    }
                  },
                  "Response with Mandatory Fields": {
                    "value": {
                      "id": "aa1477cc-56f5-11eb-97e4-9fa28823b045",
                      "patientId": "dba0ace2-d8b3-11e8-b675-eb2556623e37",
                      "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                      "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "referredToName": "Mick Le",
                      "referredByName": "Ella Jenner",
                      "referredByPractice": null,
                      "referralTypeCode": 1,
                      "expiryDate": "2021-11-12",
                      "referrerProviderNo": null,
                      "subject": "X-Ray",
                      "notes": null,
                      "confidential": false,
                      "firstUsedDate": null,
                      "standardOption": 12,
                      "validMonth": 12,
                      "referralDate": "2020-11-12",
                      "referredByType": 4,
                      "referredToType": 4,
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2021-01-15T16:51:08.508+0000",
                      "updatedDateTime": "2021-01-15T16:51:08.509+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request with Invalid Fields": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referralTypeCode",
                          "value": "25",
                          "message": "Must be a valid value"
                        },
                        {
                          "parameter": "subject",
                          "value": "null",
                          "message": "must not be empty"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "put-patients-patient_id-referrer-referrer_id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "ReferrerCreateUpdate",
                "type": "object",
                "x-examples": {
                  "example": {
                    "referralDate": "14/11/2020",
                    "referredById": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                    "referredToId": "22f73f18-ad0a-11e9-92bf-cb45fd701111",
                    "subject": "X-ray",
                    "referralTypeCode": 1,
                    "firstUsedDate": "2020-11-14",
                    "validMonth": 12,
                    "notes": "X-ray for knee",
                    "confidential": true,
                    "referredByType": 1,
                    "referredToType": 2
                  }
                },
                "properties": {
                  "referralDate": {
                    "type": "string",
                    "description": "Represents the referral created date .Referral created date should not be in the future and should not be after the firstUsedDate.",
                    "example": "2020-11-14",
                    "default": "YYYY-MM-DD"
                  },
                  "referredById": {
                    "type": "string",
                    "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User\n",
                    "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "referredToId": {
                    "type": "string",
                    "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                  },
                  "subject": {
                    "type": "string",
                    "description": "Represents the referral subject",
                    "minLength": 1,
                    "maxLength": 100,
                    "example": "\"X-ray\""
                  },
                  "referralTypeCode": {
                    "type": "integer",
                    "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
                  },
                  "firstUsedDate": {
                    "type": "string",
                    "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
                    "default": "YYYY-MM-DD",
                    "example": "2020-11-14",
                    "nullable": true
                  },
                  "validMonth": {
                    "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.",
                    "example": 12,
                    "type": "number"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field.",
                    "maxLength": 500,
                    "example": "\"X-ray for knee\"",
                    "nullable": true
                  },
                  "confidential": {
                    "description": "Flag indicates whether the referral records is condifentials or not.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "referredByType": {
                    "title": "ReferredByTypeEnum",
                    "type": "integer",
                    "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "referredToType": {
                    "title": "ReferredToTypeEnum",
                    "type": "integer",
                    "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "referredByPractice": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "referralDate",
                  "referredById",
                  "referredToId",
                  "subject",
                  "referralTypeCode",
                  "referredByType",
                  "referredToType"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "referralDate": "2020-11-28",
                    "subject": "X-Ray",
                    "referralTypeCode": 2,
                    "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                    "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                    "validMonth": 3,
                    "firstUsedDate": "2020-11-30",
                    "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                    "notes": "Possible fracture",
                    "confidential": true,
                    "referredToType": 4,
                    "referredByType": 4
                  }
                },
                "Request With Mandatory Fields": {
                  "value": {
                    "referralDate": "2020-11-12",
                    "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                    "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                    "referredByPractice": null,
                    "subject": "X-ray",
                    "referralTypeCode": 1,
                    "firstUsedDate": null,
                    "validMonth": 12,
                    "notes": null,
                    "confidential": null,
                    "referredByType": 4,
                    "referredToType": 4
                  }
                },
                "Request With Invalid Fields": {
                  "value": {
                    "referralDate": "2020-11-12",
                    "referredById": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                    "referredToId": "22f73f18-ad0a-11e9-92bf-cb45fd701111",
                    "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                    "subject": null,
                    "referralTypeCode": 25,
                    "firstUsedDate": "2020-11-14",
                    "validMonth": 12,
                    "notes": "X-ray for knee",
                    "confidential": true,
                    "referredByType": 1,
                    "referredToType": 2
                  }
                }
              }
            }
          },
          "description": "Update Referral Request"
        },
        "description": "Update referral for given patient id and referral id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get referral",
        "tags": [
          "Referrals"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Referrer",
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "id": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd707777",
                      "referrerProviderNo": "66f73f18",
                      "referralDate": "2020-11-14",
                      "referredById": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                      "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd708888",
                      "subject": "X-ray",
                      "referralTypeCode": 1,
                      "firstUsedDate": "2020-11-11",
                      "validMonth": 12,
                      "notes": "X-ray for knee",
                      "confidential": true,
                      "referredByName": "Dr Maggie Kane",
                      "referredToName": "Dr Bob Brown",
                      "referredByPractice": "11173f18-ad0a-11e9-92bf-cb45fd706045",
                      "standardOption": 12,
                      "expiryDate": "2020-11-15",
                      "referredByType": 1,
                      "referredToType": 2,
                      "createdDateTime": "2020-11-11T14:40:44.421+0000",
                      "createBy": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                      "updatedDateTime": "2020-11-11T14:40:44.421+0000",
                      "updatedById": "22f73f18-ad0a-11e9-92bf-cb45fd706045"
                    }
                  },
                  "description": "",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Referral id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "patientId": {
                      "type": "string",
                      "description": "A GUID that represents patient by id",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "format": "none",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                    },
                    "referrerProviderNo": {
                      "type": "string",
                      "description": "Represents the referred by provier no",
                      "example": "\"6f7f8\"",
                      "maxLength": 8,
                      "nullable": true
                    },
                    "referralDate": {
                      "type": "string",
                      "description": "Represents the referral created date. Referral created date should not be in the future and should not be after the firstUsedDate.",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD"
                    },
                    "referredById": {
                      "type": "string",
                      "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                    },
                    "referredToId": {
                      "type": "string",
                      "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "subject": {
                      "type": "string",
                      "description": "Represents the referral subject",
                      "minLength": 1,
                      "maxLength": 100,
                      "example": "\"X-ray\""
                    },
                    "referralTypeCode": {
                      "type": "integer",
                      "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
                    },
                    "firstUsedDate": {
                      "type": "string",
                      "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD",
                      "nullable": true
                    },
                    "validMonth": {
                      "type": "number",
                      "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.\n",
                      "example": 12
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field.",
                      "maxLength": 500,
                      "example": "\"X-ray for knee\"",
                      "nullable": true
                    },
                    "confidential": {
                      "description": "Flag indicates whether the referral records is condifentials or not.",
                      "type": "boolean"
                    },
                    "referredByName": {
                      "type": "string",
                      "description": "Represents the referred by name",
                      "example": "\"Tom\""
                    },
                    "referredToName": {
                      "type": "string",
                      "description": "Represents the reffered to name.",
                      "example": "\"Tim\""
                    },
                    "referredByPractice": {
                      "type": "string",
                      "description": "Represents the referred by practice id.  If the referredBy is a practice, then referredByPractice will always be null.",
                      "format": "none",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                      "nullable": true
                    },
                    "standardOption": {
                      "description": "Represents the valid month in case of standard referrals",
                      "example": 1,
                      "type": "number",
                      "nullable": true
                    },
                    "expiryDate": {
                      "type": "string",
                      "description": "Represents the referral expiry date. If the validMonth is null , then expiryDate is null",
                      "format": "none",
                      "example": "2020-11-14",
                      "default": "YYYY-MM-DD"
                    },
                    "referredByType": {
                      "title": "ReferredByTypeEnum",
                      "type": "integer",
                      "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "referredToType": {
                      "title": "ReferredToTypeEnum",
                      "type": "integer",
                      "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Referral Get Response ": {
                    "value": {
                      "id": "eab7aa24-56f0-11eb-9499-0b1199252fc0",
                      "patientId": "dba0ace2-d8b3-11e8-b675-eb2556623e37",
                      "referredToId": "437fa1a4-a1cf-11e8-9f36-f75fdc7198d4",
                      "referredById": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "referredToName": "Mick Le",
                      "referredByName": "Ella Jenner",
                      "referredByPractice": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "referralTypeCode": 2,
                      "expiryDate": "2021-11-28",
                      "referrerProviderNo": null,
                      "subject": "X-Ray",
                      "notes": "Possible fracture",
                      "confidential": true,
                      "firstUsedDate": "2020-11-30",
                      "standardOption": null,
                      "validMonth": 3,
                      "referralDate": "2020-11-28",
                      "referredByType": 4,
                      "referredToType": 4,
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2021-01-15T16:17:09.436+0000",
                      "updatedDateTime": "2021-01-15T16:17:09.436+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patients-patient_id-referrer-referrer_id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "description": "Get referral for a given referral id."
      },
      "delete": {
        "summary": "Delete referral",
        "tags": [
          "Referrals"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful delete": {
                    "value": {
                      "id": "5987afa6-2976-11eb-b53a-538b0f928ae9",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "update.addressId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "update.addressId",
                          "value": "0343bb8-251d-11e9-b4a7-eb35277b6abb",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unaurthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "delete-patients-patient_id-referrer-referrer_id",
        "description": "Delete referral for given patient id and referral id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/patients/{patient_id}/interested-parties/{interested_party_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "interested_party_id",
          "in": "path",
          "required": true,
          "description": "Interested parties GUID"
        },
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "get": {
        "summary": "Get interested party",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InterestedPartyObject",
                  "type": "object",
                  "x-examples": {
                    "Full Interested Party Response": {
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                      "patientId": "6cf14d94-8640-11e8-be2c-3b8d4cf2c071",
                      "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                      "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "usualGP": true,
                      "notes": "the notes",
                      "contactType": 1,
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                      "updatedDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                    }
                  },
                  "description": "",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "interestedParties id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "format": "uuid",
                      "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                    },
                    "patientId": {
                      "type": "string",
                      "description": "A GUID that represents the patient id.",
                      "format": "uuid",
                      "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                    },
                    "contactId": {
                      "type": "string",
                      "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional (Contact) |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User |",
                      "format": "uuid",
                      "example": "0325aac0-bae5-11e8-85ff-c7da5962ba60"
                    },
                    "contactPracticeId": {
                      "type": "string",
                      "description": "Represents the interested  contact practice id in the system\n",
                      "example": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                      "nullable": true
                    },
                    "usualGP": {
                      "type": "boolean",
                      "description": "Flag indicates whether the contact is the usual gp for the patient.There can be only one usual gp for the patiemt. Only a contact (health professional) can be a usual gp\n"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "minLength": 0,
                      "example": "Clinical Notes",
                      "nullable": true
                    },
                    "contactType": {
                      "type": "number",
                      "description": "Represents the contactType\n\n* `1` - Health Professional (Contact)\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                      "example": 1,
                      "minimum": 1,
                      "maximum": 4,
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "patientId",
                    "contactId",
                    "contactType"
                  ]
                },
                "examples": {
                  "Interested Party Get Response": {
                    "value": {
                      "id": "62853f6c-3e50-11eb-b325-bbe9d6d9e266",
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2020-12-15T08:07:33.601+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "updatedDateTime": "2020-12-15T08:07:33.601+0000",
                      "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                      "contactId": "f792e55a-ca47-11e5-be6d-0f232d992597",
                      "contactPracticeId": "",
                      "contactType": 4,
                      "usualGP": true,
                      "notes": "the Latest Notes: Health Prof"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request No Interested Party Error Response": {
                    "value": {
                      "message": "No IntrestedParty for id: b97d12fe-7cd9-4849-9bee-59c806974b95",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patient-id-interestedParty",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "description": "Get an interested party by patient id and interested party id",
        "tags": [
          "Interested Parties"
        ]
      },
      "delete": {
        "summary": "Delete interested party",
        "operationId": "delete-patient-id-interestedParty-interestedParty_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "description": "Delete an interested party by patient id and interested party id",
        "tags": [
          "Interested Parties"
        ]
      },
      "put": {
        "summary": "Update interested party",
        "operationId": "put-patient-id-interestedParty",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InterestedPartyObject",
                  "type": "object",
                  "x-examples": {
                    "Full Interested Party Response": {
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                      "patientId": "6cf14d94-8640-11e8-be2c-3b8d4cf2c071",
                      "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                      "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "usualGP": true,
                      "notes": "the notes",
                      "contactType": 1,
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                      "updatedDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                    }
                  },
                  "description": "",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "interestedParties id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "format": "uuid",
                      "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                    },
                    "patientId": {
                      "type": "string",
                      "description": "A GUID that represents the patient id.",
                      "format": "uuid",
                      "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                    },
                    "contactId": {
                      "type": "string",
                      "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional (Contact) |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User |",
                      "format": "uuid",
                      "example": "0325aac0-bae5-11e8-85ff-c7da5962ba60"
                    },
                    "contactPracticeId": {
                      "type": "string",
                      "description": "Represents the interested  contact practice id in the system\n",
                      "example": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                      "nullable": true
                    },
                    "usualGP": {
                      "type": "boolean",
                      "description": "Flag indicates whether the contact is the usual gp for the patient.There can be only one usual gp for the patiemt. Only a contact (health professional) can be a usual gp\n"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "minLength": 0,
                      "example": "Clinical Notes",
                      "nullable": true
                    },
                    "contactType": {
                      "type": "number",
                      "description": "Represents the contactType\n\n* `1` - Health Professional (Contact)\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                      "example": 1,
                      "minimum": 1,
                      "maximum": 4,
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "patientId",
                    "contactId",
                    "contactType"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2020-12-15T07:43:52.529+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "updatedDateTime": "2020-12-15T07:44:08.864+0000",
                      "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                      "contactId": "0325aac0-bae5-11e8-85ff-c7da5962ba60",
                      "contactPracticeId": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                      "contactType": 1,
                      "usualGP": false,
                      "notes": "the Latest Notes"
                    }
                  },
                  "Response With Mandatory Fields": {
                    "value": {
                      "id": "957919c0-56d3-11eb-b971-77a47377e9d2",
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2021-01-15T12:47:11.068+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "updatedDateTime": "2021-01-15T12:52:05.741+0000",
                      "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                      "contactId": "15a8d798-2bff-11e6-b9f7-db8bae7429e0",
                      "contactPracticeId": null,
                      "contactType": 1,
                      "usualGP": false,
                      "notes": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Field Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "contactType",
                          "value": "7",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "InterestedPartyCreate",
                "type": "object",
                "x-examples": {
                  "Interested Party Response": {
                    "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                    "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                    "usualGP": true,
                    "notes": "Contact notes",
                    "contactType": 1
                  }
                },
                "description": "Interested party Create or Update model",
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "contactId": {
                    "type": "string",
                    "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User|",
                    "format": "uuid",
                    "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                  },
                  "contactPracticeId": {
                    "type": "string",
                    "description": "Represents the interested  contact practice id in the system\n",
                    "format": "uuid",
                    "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                    "nullable": true
                  },
                  "usualGP": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact is the usual gp for the patient",
                    "nullable": true
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field",
                    "minLength": 0,
                    "maxLength": 500,
                    "example": "Clinical notes",
                    "nullable": true
                  },
                  "contactType": {
                    "type": "number",
                    "description": "Represents the contactType\n\n* `1` - Health Professional\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                    "example": 1
                  }
                },
                "required": [
                  "contactId",
                  "contactType"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "contactId": "0325aac0-bae5-11e8-85ff-c7da5962ba60",
                    "contactPracticeId": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                    "usualGP": false,
                    "notes": "the Latest Notes",
                    "contactType": 1
                  }
                },
                "Request With Mandatory Fields": {
                  "value": {
                    "contactId": "15a8d798-2bff-11e6-b9f7-db8bae7429e0",
                    "contactPracticeId": null,
                    "usualGP": null,
                    "notes": null,
                    "contactType": 1
                  }
                },
                "Bad Request With Invalid Field": {
                  "value": {
                    "contactId": "15a8d798-2bff-11e6-b9f7-db8bae7429e0",
                    "contactPracticeId": "e631a806-7f91-11ea-bb79-f7a237e16625",
                    "usualGP": false,
                    "notes": "Some Notes",
                    "contactType": 7
                  }
                }
              }
            }
          },
          "description": "Request to Update Interested Party"
        },
        "description": "Update interested party for a given patient id",
        "tags": [
          "Interested Parties"
        ]
      }
    },
    "/v1/patients/{patient_id}/interested-parties": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "post": {
        "summary": "Create interested party",
        "operationId": "post-patient-id-interestedParty",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InterestedPartyObject",
                  "type": "object",
                  "x-examples": {
                    "Full Interested Party Response": {
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                      "patientId": "6cf14d94-8640-11e8-be2c-3b8d4cf2c071",
                      "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                      "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "usualGP": true,
                      "notes": "the notes",
                      "contactType": 1,
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                      "updatedDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                    }
                  },
                  "description": "",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "interestedParties id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "format": "uuid",
                      "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                    },
                    "patientId": {
                      "type": "string",
                      "description": "A GUID that represents the patient id.",
                      "format": "uuid",
                      "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                    },
                    "contactId": {
                      "type": "string",
                      "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional (Contact) |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User |",
                      "format": "uuid",
                      "example": "0325aac0-bae5-11e8-85ff-c7da5962ba60"
                    },
                    "contactPracticeId": {
                      "type": "string",
                      "description": "Represents the interested  contact practice id in the system\n",
                      "example": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                      "nullable": true
                    },
                    "usualGP": {
                      "type": "boolean",
                      "description": "Flag indicates whether the contact is the usual gp for the patient.There can be only one usual gp for the patiemt. Only a contact (health professional) can be a usual gp\n"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "minLength": 0,
                      "example": "Clinical Notes",
                      "nullable": true
                    },
                    "contactType": {
                      "type": "number",
                      "description": "Represents the contactType\n\n* `1` - Health Professional (Contact)\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                      "example": 1,
                      "minimum": 1,
                      "maximum": 4,
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "patientId",
                    "contactId",
                    "contactType"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2020-12-15T07:43:52.529+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "updatedDateTime": "2020-12-15T07:44:08.864+0000",
                      "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                      "contactId": "0325aac0-bae5-11e8-85ff-c7da5962ba60",
                      "contactPracticeId": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                      "contactType": 1,
                      "usualGP": false,
                      "notes": "Clinical notes"
                    }
                  },
                  "Response with Mandatory Fields": {
                    "value": {
                      "id": "814e76ce-56cf-11eb-85f5-17f6b8885132",
                      "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "createdDateTime": "2021-01-15T12:17:59.137+0000",
                      "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                      "updatedDateTime": "2021-01-15T12:17:59.137+0000",
                      "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                      "contactId": "15a8d798-2bff-11e6-b9f7-db8bae7429e0",
                      "contactPracticeId": null,
                      "contactType": 1,
                      "usualGP": false,
                      "notes": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Validation Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "contactType",
                          "value": "7",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "InterestedPartyCreate",
                "type": "object",
                "x-examples": {
                  "Interested Party Response": {
                    "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                    "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                    "usualGP": true,
                    "notes": "Contact notes",
                    "contactType": 1
                  }
                },
                "description": "Interested party Create or Update model",
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "contactId": {
                    "type": "string",
                    "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User|",
                    "format": "uuid",
                    "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                  },
                  "contactPracticeId": {
                    "type": "string",
                    "description": "Represents the interested  contact practice id in the system\n",
                    "format": "uuid",
                    "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                    "nullable": true
                  },
                  "usualGP": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact is the usual gp for the patient",
                    "nullable": true
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field",
                    "minLength": 0,
                    "maxLength": 500,
                    "example": "Clinical notes",
                    "nullable": true
                  },
                  "contactType": {
                    "type": "number",
                    "description": "Represents the contactType\n\n* `1` - Health Professional\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                    "example": 1
                  }
                },
                "required": [
                  "contactId",
                  "contactType"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "contactId": "0325aac0-bae5-11e8-85ff-c7da5962ba60",
                    "contactPracticeId": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                    "usualGP": false,
                    "notes": "Clinical notes",
                    "contactType": 1
                  }
                },
                "Request with Mandatory Fields": {
                  "value": {
                    "contactId": "15a8d798-2bff-11e6-b9f7-db8bae7429e0",
                    "contactPracticeId": null,
                    "usualGP": false,
                    "notes": null,
                    "contactType": 1
                  }
                },
                "Bad Request": {
                  "value": {
                    "contactId": "15a8d798-2bff-11e6-b9f7-db8bae7429e0",
                    "contactPracticeId": null,
                    "usualGP": false,
                    "notes": null,
                    "contactType": 7
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/html": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/plain": {
              "schema": {
                "title": "InterestedPartyCreate",
                "type": "object",
                "x-examples": {
                  "Interested Party Response": {
                    "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                    "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                    "usualGP": true,
                    "notes": "Contact notes",
                    "contactType": 1
                  }
                },
                "description": "Interested party Create or Update model",
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "contactId": {
                    "type": "string",
                    "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User|",
                    "format": "uuid",
                    "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                  },
                  "contactPracticeId": {
                    "type": "string",
                    "description": "Represents the interested  contact practice id in the system\n",
                    "format": "uuid",
                    "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                    "nullable": true
                  },
                  "usualGP": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact is the usual gp for the patient",
                    "nullable": true
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field",
                    "minLength": 0,
                    "maxLength": 500,
                    "example": "Clinical notes",
                    "nullable": true
                  },
                  "contactType": {
                    "type": "number",
                    "description": "Represents the contactType\n\n* `1` - Health Professional\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                    "example": 1
                  }
                },
                "required": [
                  "contactId",
                  "contactType"
                ]
              }
            }
          },
          "description": ""
        },
        "description": "Create an interested party for a patient id",
        "tags": [
          "Interested Parties"
        ]
      },
      "get": {
        "summary": "Get all interested parties",
        "operationId": "get-patient-id-interestedParty-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InterestedPartyPage",
                  "type": "object",
                  "x-examples": {
                    "Full Interested Party Paged response": {
                      "data": [
                        {
                          "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                          "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "createdDateTime": "2020-12-15T07:43:52.529+0000",
                          "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "updatedDateTime": "2020-12-15T07:44:08.864+0000",
                          "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                          "contactId": "0325aac0-bae5-11e8-85ff-c7da5962ba60",
                          "contactPracticeId": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                          "contactType": 1,
                          "usualGP": false,
                          "notes": "the Latest Notes r2"
                        },
                        {
                          "id": "62853f6c-3e50-11eb-b325-bbe9d6d9e266",
                          "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "createdDateTime": "2020-12-15T08:07:33.601+0000",
                          "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "updatedDateTime": "2020-12-15T08:07:33.601+0000",
                          "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                          "contactId": "f792e55a-ca47-11e5-be6d-0f232d992597",
                          "contactPracticeId": null,
                          "contactType": 4,
                          "usualGP": true,
                          "notes": "the Latest Notes: Health Prof"
                        }
                      ],
                      "first": true,
                      "last": false,
                      "totalPages": 4,
                      "totalElements": 7,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "InterestedPartyObject",
                        "type": "object",
                        "x-examples": {
                          "Full Interested Party Response": {
                            "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                            "patientId": "6cf14d94-8640-11e8-be2c-3b8d4cf2c071",
                            "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                            "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                            "usualGP": true,
                            "notes": "the notes",
                            "contactType": 1,
                            "createdDateTime": "2019-02-13 05:10:09.088",
                            "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                            "updatedDateTime": "2019-02-13 05:10:09.088",
                            "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                          }
                        },
                        "description": "",
                        "x-tags": [
                          "Other"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "interestedParties id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                            "format": "uuid",
                            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                          },
                          "patientId": {
                            "type": "string",
                            "description": "A GUID that represents the patient id.",
                            "format": "uuid",
                            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                          },
                          "contactId": {
                            "type": "string",
                            "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional (Contact) |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User |",
                            "format": "uuid",
                            "example": "0325aac0-bae5-11e8-85ff-c7da5962ba60"
                          },
                          "contactPracticeId": {
                            "type": "string",
                            "description": "Represents the interested  contact practice id in the system\n",
                            "example": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                            "nullable": true
                          },
                          "usualGP": {
                            "type": "boolean",
                            "description": "Flag indicates whether the contact is the usual gp for the patient.There can be only one usual gp for the patiemt. Only a contact (health professional) can be a usual gp\n"
                          },
                          "notes": {
                            "type": "string",
                            "description": "Any comments or notes can be recorded in this field",
                            "maxLength": 500,
                            "minLength": 0,
                            "example": "Clinical Notes",
                            "nullable": true
                          },
                          "contactType": {
                            "type": "number",
                            "description": "Represents the contactType\n\n* `1` - Health Professional (Contact)\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                            "example": 1,
                            "minimum": 1,
                            "maximum": 4,
                            "exclusiveMinimum": false,
                            "exclusiveMaximum": false
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "required": [
                          "id",
                          "patientId",
                          "contactId",
                          "contactType"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "totalElements": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "List of Interested Parties With Pagination": {
                    "value": {
                      "data": [
                        {
                          "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                          "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "createdDateTime": "2020-12-15T07:43:52.529+0000",
                          "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "updatedDateTime": "2020-12-15T07:44:08.864+0000",
                          "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                          "contactId": "0325aac0-bae5-11e8-85ff-c7da5962ba60",
                          "contactPracticeId": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                          "contactType": 1,
                          "usualGP": false,
                          "notes": "the Latest Notes r2"
                        },
                        {
                          "id": "62853f6c-3e50-11eb-b325-bbe9d6d9e266",
                          "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "createdDateTime": "2020-12-15T08:07:33.601+0000",
                          "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                          "updatedDateTime": "2020-12-15T08:07:33.601+0000",
                          "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                          "contactId": "f792e55a-ca47-11e5-be6d-0f232d992597",
                          "contactPracticeId": "\"\"",
                          "contactType": 4,
                          "usualGP": true,
                          "notes": "the Latest Notes: Health Prof"
                        }
                      ],
                      "first": true,
                      "last": false,
                      "totalPages": 4,
                      "totalElements": 7,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Invalid patient id Error Response": {
                    "value": {
                      "message": "findAllByPatientId.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPatientId.id",
                          "value": "xxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "description": "Get all interested parties for a given patient id",
        "tags": [
          "Interested Parties"
        ]
      }
    },
    "/v1/patients/{patient_id}/addresses": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "patient_id",
          "in": "path",
          "required": true,
          "description": "A GUID that represents the patient_id"
        }
      ],
      "post": {
        "summary": "Create address",
        "tags": [
          "Address"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Sample Address Response",
                  "type": "object",
                  "title": "Address",
                  "x-examples": {
                    "Address Response": {
                      "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                      "addressType": 1,
                      "addressLine1": "Suite 402",
                      "addressLine2": "200 George St",
                      "addressLine3": "CBD",
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "createdDateTime": "2020-09-29T00:59:16Z",
                      "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "updatedDateTime": "2020-09-30T00:59:16Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Address id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "0033bcc4-251d-11e9-b4a5-577333eac455"
                    },
                    "patientId": {
                      "type": "string",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "A GUID that represents the patient id.",
                      "format": "none",
                      "example": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9"
                    },
                    "addressType": {
                      "title": "AddressType",
                      "type": "integer",
                      "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "addressLine1": {
                      "type": "string",
                      "description": "Represents the address line 1",
                      "minLength": 1,
                      "maxLength": 50,
                      "example": "\"Unit 30, 200 George St\""
                    },
                    "addressLine2": {
                      "type": "string",
                      "description": "Represents the address line 2",
                      "minLength": 0,
                      "maxLength": 50,
                      "example": "\"George St\"",
                      "nullable": true
                    },
                    "addressLine3": {
                      "type": "string",
                      "description": "Represents the address line 3",
                      "example": "\"CBD\"",
                      "maxLength": 50,
                      "minLength": 0,
                      "nullable": true
                    },
                    "cityCode": {
                      "type": "string",
                      "description": "Represents the address city or suburb.",
                      "minLength": 1,
                      "maxLength": 60,
                      "example": "\"Sydney\""
                    },
                    "postcode": {
                      "type": "string",
                      "description": "Represents the address postcode",
                      "minLength": 1,
                      "maxLength": 10,
                      "example": "\"2000\""
                    },
                    "stateCode": {
                      "type": "string",
                      "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
                      "minLength": 1,
                      "maxLength": 20,
                      "example": "\"NSW\""
                    },
                    "countryCode": {
                      "type": "string",
                      "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
                      "minLength": 1,
                      "maxLength": 2,
                      "example": "AU"
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "patientId",
                    "addressType",
                    "addressLine1",
                    "cityCode",
                    "postcode",
                    "stateCode",
                    "countryCode",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                      "addressType": 1,
                      "addressLine1": "Suite 402",
                      "addressLine2": "200 George St",
                      "addressLine3": "CBD",
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "createdDateTime": "2020-09-29T00:59:16Z",
                      "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "updatedDateTime": "2020-09-30T00:59:16Z"
                    }
                  },
                  "Response With Mandatory Fields": {
                    "value": {
                      "id": "63cefcba-565a-11eb-af69-3f0c7bd71efb",
                      "patientId": "a145ba98-5614-11eb-9911-bf63a805bd53",
                      "addressType": 1,
                      "addressLine1": "200 George St",
                      "addressLine2": null,
                      "addressLine3": null,
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "createdDateTime": "2021-01-14T22:19:38.634+0000",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2021-01-14T22:19:38.634+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request With Invalid Fields Error Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "cityCode",
                          "value": "Sydney",
                          "message": "City Code does not exist for this Postcode."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-patients-id-addresses",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Address Request",
                "type": "object",
                "title": "AddressRequestBody",
                "x-examples": {
                  "Address Request": {
                    "addressType": 1,
                    "addressLine1": "Suite 402",
                    "addressLine2": "200 George St",
                    "addressLine3": "CBD",
                    "cityCode": "Sydney",
                    "postcode": "2000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                },
                "properties": {
                  "addressType": {
                    "title": "AddressType",
                    "type": "integer",
                    "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "addressLine1": {
                    "type": "string",
                    "description": "Represents the address line 1",
                    "example": "\"Unit 30, 200 George St\"",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "addressLine2": {
                    "type": "string",
                    "description": "Represents the address line 2",
                    "maxLength": 50,
                    "example": "\"200 George St\"",
                    "minLength": 0,
                    "nullable": true
                  },
                  "addressLine3": {
                    "type": "string",
                    "description": "Represents the address line 3",
                    "example": "\"CBD\"",
                    "maxLength": 50,
                    "minLength": 0,
                    "nullable": true
                  },
                  "cityCode": {
                    "type": "string",
                    "description": "Represents the address city or suburb.",
                    "maxLength": 60,
                    "minLength": 1,
                    "example": "\"Sydney\""
                  },
                  "postcode": {
                    "type": "string",
                    "description": "Represents the address postcode",
                    "minLength": 1,
                    "maxLength": 10,
                    "example": "\"2000\""
                  },
                  "stateCode": {
                    "type": "string",
                    "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
                    "minLength": 1,
                    "maxLength": 20,
                    "example": "\"NSW\""
                  },
                  "countryCode": {
                    "type": "string",
                    "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
                    "minLength": 1,
                    "maxLength": 2,
                    "example": "AU"
                  }
                },
                "required": [
                  "addressType",
                  "addressLine1",
                  "cityCode",
                  "postcode",
                  "stateCode",
                  "countryCode"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "addressType": 1,
                    "addressLine1": "Suite 402",
                    "addressLine2": "200 George St",
                    "addressLine3": "CBD",
                    "cityCode": "Sydney",
                    "postcode": "2000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                },
                "Request With Mandatory Fields": {
                  "value": {
                    "addressType": 1,
                    "addressLine1": "200 George St",
                    "addressLine2": null,
                    "addressLine3": null,
                    "cityCode": "Sydney",
                    "postcode": "2000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "addressType": 1,
                    "addressLine1": "Suite 402",
                    "addressLine2": "200 George St",
                    "addressLine3": null,
                    "cityCode": "Sydney",
                    "postcode": "3000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                }
              }
            }
          },
          "description": "Patient address Request"
        },
        "description": "Create a patient address for a given patient id"
      },
      "get": {
        "summary": "Get all addresses",
        "operationId": "get-patients-id-addresses",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "description": "Sample Address Response",
                    "type": "object",
                    "title": "Address",
                    "x-examples": {
                      "Address Response": {
                        "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                        "addressType": 1,
                        "addressLine1": "Suite 402",
                        "addressLine2": "200 George St",
                        "addressLine3": "CBD",
                        "cityCode": "Sydney",
                        "postcode": "2000",
                        "stateCode": "NSW",
                        "countryCode": "AU",
                        "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "createdDateTime": "2020-09-29T00:59:16Z",
                        "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "updatedDateTime": "2020-09-30T00:59:16Z"
                      }
                    },
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Address id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                        "format": "uuid",
                        "example": "0033bcc4-251d-11e9-b4a5-577333eac455"
                      },
                      "patientId": {
                        "type": "string",
                        "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                        "description": "A GUID that represents the patient id.",
                        "format": "none",
                        "example": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9"
                      },
                      "addressType": {
                        "title": "AddressType",
                        "type": "integer",
                        "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "addressLine1": {
                        "type": "string",
                        "description": "Represents the address line 1",
                        "minLength": 1,
                        "maxLength": 50,
                        "example": "\"Unit 30, 200 George St\""
                      },
                      "addressLine2": {
                        "type": "string",
                        "description": "Represents the address line 2",
                        "minLength": 0,
                        "maxLength": 50,
                        "example": "\"George St\"",
                        "nullable": true
                      },
                      "addressLine3": {
                        "type": "string",
                        "description": "Represents the address line 3",
                        "example": "\"CBD\"",
                        "maxLength": 50,
                        "minLength": 0,
                        "nullable": true
                      },
                      "cityCode": {
                        "type": "string",
                        "description": "Represents the address city or suburb.",
                        "minLength": 1,
                        "maxLength": 60,
                        "example": "\"Sydney\""
                      },
                      "postcode": {
                        "type": "string",
                        "description": "Represents the address postcode",
                        "minLength": 1,
                        "maxLength": 10,
                        "example": "\"2000\""
                      },
                      "stateCode": {
                        "type": "string",
                        "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
                        "minLength": 1,
                        "maxLength": 20,
                        "example": "\"NSW\""
                      },
                      "countryCode": {
                        "type": "string",
                        "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
                        "minLength": 1,
                        "maxLength": 2,
                        "example": "AU"
                      },
                      "createdBy": {
                        "type": "string",
                        "title": "CreatedBy",
                        "description": "A GUID refers to User identifier who created the resource.",
                        "x-examples": {
                          "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                        },
                        "default": "UUID",
                        "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "x-internal": false
                      },
                      "createdDateTime": {
                        "type": "string",
                        "title": "CreatedDate",
                        "description": "Time when the resource was created.",
                        "x-internal": false
                      },
                      "updatedBy": {
                        "type": "string",
                        "title": "UpdatedBy",
                        "description": "A GUID refers to User identifier who updated the resource.",
                        "default": "UUID",
                        "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "x-internal": false
                      },
                      "updatedDateTime": {
                        "title": "UpdatedDate",
                        "type": "string",
                        "description": "Time when the resource was updated.",
                        "x-internal": false
                      }
                    },
                    "required": [
                      "id",
                      "patientId",
                      "addressType",
                      "addressLine1",
                      "cityCode",
                      "postcode",
                      "stateCode",
                      "countryCode",
                      "createdBy",
                      "createdDateTime",
                      "updatedBy",
                      "updatedDateTime"
                    ],
                    "x-tags": [
                      "Other"
                    ]
                  }
                },
                "examples": {
                  "List Of Addresses for a Patient": {
                    "value": [
                      {
                        "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                        "addressType": 1,
                        "addressLine1": "Suite 402",
                        "addressLine2": "200 George St",
                        "addressLine3": "CBD",
                        "cityCode": "Sydney",
                        "postcode": "2000",
                        "stateCode": "NSW",
                        "countryCode": "AU",
                        "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "createdDateTime": "2020-09-29T00:59:16Z",
                        "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "updatedDateTime": "2020-09-30T00:59:16Z"
                      },
                      {
                        "id": "1133bcc4-251d-11e9-b4a5-577333eac415",
                        "patientId": "8i2763ca-24a0-11eb-9efa-b78fd4aeb6u9",
                        "addressType": 2,
                        "addressLine1": "Suite 602",
                        "addressLine2": "800 Bay St",
                        "addressLine3": "CBD",
                        "cityCode": "Ultimo",
                        "postcode": "2007",
                        "stateCode": "NSW",
                        "countryCode": "AU",
                        "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "createdDateTime": "2020-08-29T00:59:16Z",
                        "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                        "updatedDateTime": "2020-08-30T00:59:16Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request": {
                    "value": {
                      "message": "findAll.patientId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAll.patientId",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Address"
        ],
        "description": "Get all addresses for a given patient id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/patients/{patient_id}/addresses/{address_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "address_id",
          "in": "path",
          "required": true,
          "description": "Address GUID"
        },
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "delete": {
        "summary": "Delete address",
        "tags": [
          "Address"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "2a817758-38c4-11ea-ac24-97713f85bbeb",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "delete.addressId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "delete.addressId",
                          "value": "0343bb8-251d-11e9-b4a7-eb35277b6abb",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "delete-patients-id-addresses-id",
        "description": "Delete patient's address by a given address ID and patient ID",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update address",
        "operationId": "put-patients-id-addresses-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Sample Address Response",
                  "type": "object",
                  "title": "Address",
                  "x-examples": {
                    "Address Response": {
                      "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                      "addressType": 1,
                      "addressLine1": "Suite 402",
                      "addressLine2": "200 George St",
                      "addressLine3": "CBD",
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "createdDateTime": "2020-09-29T00:59:16Z",
                      "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "updatedDateTime": "2020-09-30T00:59:16Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Address id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "0033bcc4-251d-11e9-b4a5-577333eac455"
                    },
                    "patientId": {
                      "type": "string",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "A GUID that represents the patient id.",
                      "format": "none",
                      "example": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9"
                    },
                    "addressType": {
                      "title": "AddressType",
                      "type": "integer",
                      "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "addressLine1": {
                      "type": "string",
                      "description": "Represents the address line 1",
                      "minLength": 1,
                      "maxLength": 50,
                      "example": "\"Unit 30, 200 George St\""
                    },
                    "addressLine2": {
                      "type": "string",
                      "description": "Represents the address line 2",
                      "minLength": 0,
                      "maxLength": 50,
                      "example": "\"George St\"",
                      "nullable": true
                    },
                    "addressLine3": {
                      "type": "string",
                      "description": "Represents the address line 3",
                      "example": "\"CBD\"",
                      "maxLength": 50,
                      "minLength": 0,
                      "nullable": true
                    },
                    "cityCode": {
                      "type": "string",
                      "description": "Represents the address city or suburb.",
                      "minLength": 1,
                      "maxLength": 60,
                      "example": "\"Sydney\""
                    },
                    "postcode": {
                      "type": "string",
                      "description": "Represents the address postcode",
                      "minLength": 1,
                      "maxLength": 10,
                      "example": "\"2000\""
                    },
                    "stateCode": {
                      "type": "string",
                      "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
                      "minLength": 1,
                      "maxLength": 20,
                      "example": "\"NSW\""
                    },
                    "countryCode": {
                      "type": "string",
                      "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
                      "minLength": 1,
                      "maxLength": 2,
                      "example": "AU"
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "patientId",
                    "addressType",
                    "addressLine1",
                    "cityCode",
                    "postcode",
                    "stateCode",
                    "countryCode",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                      "addressType": 1,
                      "addressLine1": "Suite 402",
                      "addressLine2": "200 George St",
                      "addressLine3": "CBD",
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "createdDateTime": "2020-09-29T00:59:16Z",
                      "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "updatedDateTime": "2020-09-30T00:59:16Z"
                    }
                  },
                  "Request With Mandatory Fields Error Response": {
                    "value": {
                      "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                      "addressType": 1,
                      "addressLine1": "200 George St",
                      "addressLine2": null,
                      "addressLine3": null,
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "createdDateTime": "2020-09-29T00:59:16Z",
                      "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "updatedDateTime": "2020-09-30T00:59:16Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request With Invalid Postcode Errors Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "cityCode",
                          "value": "Sydney",
                          "message": "City Code does not exist for this Postcode."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Address Request",
                "type": "object",
                "title": "AddressRequestBody",
                "x-examples": {
                  "Address Request": {
                    "addressType": 1,
                    "addressLine1": "Suite 402",
                    "addressLine2": "200 George St",
                    "addressLine3": "CBD",
                    "cityCode": "Sydney",
                    "postcode": "2000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                },
                "properties": {
                  "addressType": {
                    "title": "AddressType",
                    "type": "integer",
                    "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "addressLine1": {
                    "type": "string",
                    "description": "Represents the address line 1",
                    "example": "\"Unit 30, 200 George St\"",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "addressLine2": {
                    "type": "string",
                    "description": "Represents the address line 2",
                    "maxLength": 50,
                    "example": "\"200 George St\"",
                    "minLength": 0,
                    "nullable": true
                  },
                  "addressLine3": {
                    "type": "string",
                    "description": "Represents the address line 3",
                    "example": "\"CBD\"",
                    "maxLength": 50,
                    "minLength": 0,
                    "nullable": true
                  },
                  "cityCode": {
                    "type": "string",
                    "description": "Represents the address city or suburb.",
                    "maxLength": 60,
                    "minLength": 1,
                    "example": "\"Sydney\""
                  },
                  "postcode": {
                    "type": "string",
                    "description": "Represents the address postcode",
                    "minLength": 1,
                    "maxLength": 10,
                    "example": "\"2000\""
                  },
                  "stateCode": {
                    "type": "string",
                    "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
                    "minLength": 1,
                    "maxLength": 20,
                    "example": "\"NSW\""
                  },
                  "countryCode": {
                    "type": "string",
                    "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
                    "minLength": 1,
                    "maxLength": 2,
                    "example": "AU"
                  }
                },
                "required": [
                  "addressType",
                  "addressLine1",
                  "cityCode",
                  "postcode",
                  "stateCode",
                  "countryCode"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "addressType": 1,
                    "addressLine1": "Suite 402",
                    "addressLine2": "200 George St",
                    "addressLine3": "CBD",
                    "cityCode": "Sydney",
                    "postcode": "2000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                },
                "Request With Mandatory Fields": {
                  "value": {
                    "addressType": 1,
                    "addressLine1": "200 George St",
                    "addressLine2": null,
                    "addressLine3": null,
                    "cityCode": "Sydney",
                    "postcode": "2000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                },
                "Bad Request With Invalid Postcode": {
                  "value": {
                    "addressType": 1,
                    "addressLine1": "Suite 402",
                    "addressLine2": "200 George St",
                    "addressLine3": "CBD",
                    "cityCode": "Sydney",
                    "postcode": "3000",
                    "stateCode": "NSW",
                    "countryCode": "AU"
                  }
                }
              }
            }
          },
          "description": "Patient Address Update Request"
        },
        "description": "Update patient's address by a given address ID and patient ID",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Address"
        ]
      },
      "get": {
        "summary": "Get address",
        "operationId": "get-patients-id-addresses-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Sample Address Response",
                  "type": "object",
                  "title": "Address",
                  "x-examples": {
                    "Address Response": {
                      "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                      "addressType": 1,
                      "addressLine1": "Suite 402",
                      "addressLine2": "200 George St",
                      "addressLine3": "CBD",
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "createdDateTime": "2020-09-29T00:59:16Z",
                      "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "updatedDateTime": "2020-09-30T00:59:16Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Address id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "0033bcc4-251d-11e9-b4a5-577333eac455"
                    },
                    "patientId": {
                      "type": "string",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "A GUID that represents the patient id.",
                      "format": "none",
                      "example": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9"
                    },
                    "addressType": {
                      "title": "AddressType",
                      "type": "integer",
                      "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "addressLine1": {
                      "type": "string",
                      "description": "Represents the address line 1",
                      "minLength": 1,
                      "maxLength": 50,
                      "example": "\"Unit 30, 200 George St\""
                    },
                    "addressLine2": {
                      "type": "string",
                      "description": "Represents the address line 2",
                      "minLength": 0,
                      "maxLength": 50,
                      "example": "\"George St\"",
                      "nullable": true
                    },
                    "addressLine3": {
                      "type": "string",
                      "description": "Represents the address line 3",
                      "example": "\"CBD\"",
                      "maxLength": 50,
                      "minLength": 0,
                      "nullable": true
                    },
                    "cityCode": {
                      "type": "string",
                      "description": "Represents the address city or suburb.",
                      "minLength": 1,
                      "maxLength": 60,
                      "example": "\"Sydney\""
                    },
                    "postcode": {
                      "type": "string",
                      "description": "Represents the address postcode",
                      "minLength": 1,
                      "maxLength": 10,
                      "example": "\"2000\""
                    },
                    "stateCode": {
                      "type": "string",
                      "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
                      "minLength": 1,
                      "maxLength": 20,
                      "example": "\"NSW\""
                    },
                    "countryCode": {
                      "type": "string",
                      "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
                      "minLength": 1,
                      "maxLength": 2,
                      "example": "AU"
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "patientId",
                    "addressType",
                    "addressLine1",
                    "cityCode",
                    "postcode",
                    "stateCode",
                    "countryCode",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Patient Address Search Response": {
                    "value": {
                      "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
                      "addressType": 1,
                      "addressLine1": "Suite 402",
                      "addressLine2": "200 George St",
                      "addressLine3": "CBD",
                      "cityCode": "Sydney",
                      "postcode": "2000",
                      "stateCode": "NSW",
                      "countryCode": "AU",
                      "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "createdDateTime": "2020-09-29T00:59:16Z",
                      "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
                      "updatedDateTime": "2020-09-30T00:59:16Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.addressId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.addressId",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Address"
        ],
        "description": "Get patient's address by a given address ID and patient ID",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/patients/{patient_id}/relationships": {
      "get": {
        "summary": "Get patient relationships",
        "tags": [
          "Relationships"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PatientRelationship",
                        "x-examples": {
                          "example": {
                            "id": "d24b0a03-bb9b-434b-9fa1-b676529f0a65",
                            "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65",
                            "contactName": "Jim Sterling",
                            "relationshipCode": 1,
                            "contactMethod": 1,
                            "mobilePhone": "1234567890",
                            "homePhone": "2234567890",
                            "workPhone": "323456790",
                            "email": "user@example.com",
                            "isEmergency": true,
                            "isNOK": true,
                            "isFamily": true,
                            "isHeadOfFamily": true,
                            "createdDateTime": "2019-02-13 05:10:09.088",
                            "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                            "updatedDateTime": "2019-02-13 05:10:09.088",
                            "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                          }
                        },
                        "allOf": [
                          {
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Patient Relationship id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                                "format": "uuid",
                                "example": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320"
                              }
                            }
                          },
                          {
                            "title": "PatientRelationshipCreate",
                            "type": "object",
                            "x-examples": {
                              "Adding a family": {
                                "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                                "relationshipCode": 1,
                                "isEmergency": false,
                                "isNOK": false,
                                "isFamily": true,
                                "isHeadOfFamily": true,
                                "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
                              },
                              "Adding a emergency contact who is not in the system": {
                                "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                                "contactName": "Jim Sterling",
                                "relationshipCode": 1,
                                "contactMethod": 1,
                                "mobilePhone": "1234567890",
                                "homePhone": "2234567890",
                                "workPhone": "323456790",
                                "email": "user@example.com",
                                "isEmergency": true,
                                "isNOK": true,
                                "isFamily": false,
                                "isHeadOfFamily": false
                              }
                            },
                            "properties": {
                              "relatedPersonId": {
                                "type": "string",
                                "nullable": true,
                                "format": "uuid",
                                "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                                "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                              },
                              "contactName": {
                                "type": "string",
                                "maxLength": 100,
                                "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                              },
                              "relationshipCode": {
                                "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
                                "type": "integer"
                              },
                              "contactMethod": {
                                "type": "integer",
                                "nullable": true,
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6
                                ],
                                "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
                                "title": "ContactMethod"
                              },
                              "mobilePhone": {
                                "type": "string",
                                "nullable": true,
                                "minLength": 10,
                                "maxLength": 10,
                                "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                                "example": "2234567890"
                              },
                              "homePhone": {
                                "type": "string",
                                "nullable": true,
                                "pattern": "^\\d+$",
                                "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                                "minLength": 10,
                                "maxLength": 10,
                                "example": 434782347
                              },
                              "workPhone": {
                                "type": "string",
                                "nullable": true,
                                "pattern": "^\\d+$",
                                "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                                "minLength": 10,
                                "maxLength": 10,
                                "example": 297876436
                              },
                              "email": {
                                "type": "string",
                                "nullable": true,
                                "format": "email",
                                "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
                                "example": "xyz@abc.com"
                              },
                              "isEmergency": {
                                "type": "boolean",
                                "description": "Flag indicates whether the contact added is an emergency contact or not"
                              },
                              "isNok": {
                                "type": "boolean",
                                "description": "Flag indicates whether the contact added is a next of kin"
                              },
                              "isFamily": {
                                "type": "boolean",
                                "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
                              },
                              "isHeadOfFamily": {
                                "type": "boolean",
                                "description": "Flag indicates whether the family added is a head of family or not"
                              }
                            },
                            "required": [
                              "relationshipCode"
                            ],
                            "x-tags": [
                              "Other"
                            ]
                          },
                          {
                            "properties": {
                              "createdBy": {
                                "type": "string",
                                "title": "CreatedBy",
                                "description": "A GUID refers to User identifier who created the resource.",
                                "x-examples": {
                                  "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                                },
                                "default": "UUID",
                                "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                                "x-internal": false
                              },
                              "createdDateTime": {
                                "type": "string",
                                "title": "CreatedDate",
                                "description": "Time when the resource was created.",
                                "x-internal": false
                              },
                              "updatedBy": {
                                "type": "string",
                                "title": "UpdatedBy",
                                "description": "A GUID refers to User identifier who updated the resource.",
                                "default": "UUID",
                                "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                                "x-internal": false
                              },
                              "updatedDateTime": {
                                "title": "UpdatedDate",
                                "type": "string",
                                "description": "Time when the resource was updated.",
                                "x-internal": false
                              }
                            }
                          }
                        ],
                        "type": "object",
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean",
                      "description": "The representation of the flag for first page."
                    },
                    "last": {
                      "type": "boolean",
                      "description": "The representation of the flag for last page."
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "The representation of the total page."
                    },
                    "totalElements": {
                      "type": "number",
                      "description": "The representation of the total element."
                    },
                    "numberOfElements": {
                      "type": "number",
                      "description": "The representation of the total element displayed in current data."
                    },
                    "size": {
                      "type": "number",
                      "description": "The representation of the current page size."
                    },
                    "page": {
                      "type": "number",
                      "description": "he representation of the current page."
                    }
                  }
                },
                "examples": {
                  "List of Patient Relationships with Pagination": {
                    "value": {
                      "data": [
                        {
                          "id": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320",
                          "relatedPersonId": null,
                          "relationshipCode": 1,
                          "contactName": "Jim Sterling",
                          "contactMethod": 1,
                          "mobilePhone": "1234567890",
                          "homePhone": "2234567890",
                          "workPhone": 323456790,
                          "email": "user@example.com",
                          "isEmergency": true,
                          "isNOK": true,
                          "isFamily": false,
                          "isHeadOfFamily": false,
                          "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                          "createdDateTime": "2021-01-15T14:05:07.487Z",
                          "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                          "updatedDateTime": "2021-01-15T14:05:07.487Z"
                        },
                        {
                          "id": "6ddfee6a-56f2-11eb-a755-93c447e37ec2",
                          "relatedPersonId": "a6a7e33e-9ad3-11e8-b48c-4fd4578cfc0f",
                          "contactName": "Smith, Jane",
                          "relationshipCode": 1,
                          "contactMethod": 1,
                          "mobilePhone": "1234567890",
                          "homePhone": "1234567890",
                          "workPhone": null,
                          "email": "smith.jane@gmail.com",
                          "isEmergency": false,
                          "isNOK": false,
                          "isFamily": true,
                          "isHeadOfFamily": false,
                          "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                          "createdDateTime": "2021-01-15T12:27:59.036Z",
                          "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                          "updatedDateTime": "2021-01-15T12:27:59.036Z"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 1,
                      "page": 0
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "nullable": true,
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findAll.patientId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAll.patientId",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please refresh the page and try again."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-patients-id-relationships",
        "description": "Get patient relationships",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "patient_id",
          "in": "path",
          "required": true,
          "description": "A GUID that represents the patient_id"
        }
      ],
      "post": {
        "summary": "Create patient relationship",
        "operationId": "post-api-patients-id-relationships",
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientRelationship",
                  "x-examples": {
                    "example": {
                      "id": "d24b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "contactName": "Jim Sterling",
                      "relationshipCode": 1,
                      "contactMethod": 1,
                      "mobilePhone": "1234567890",
                      "homePhone": "2234567890",
                      "workPhone": "323456790",
                      "email": "user@example.com",
                      "isEmergency": true,
                      "isNOK": true,
                      "isFamily": true,
                      "isHeadOfFamily": true,
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                      "updatedDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                    }
                  },
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Patient Relationship id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                          "format": "uuid",
                          "example": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320"
                        }
                      }
                    },
                    {
                      "title": "PatientRelationshipCreate",
                      "type": "object",
                      "x-examples": {
                        "Adding a family": {
                          "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                          "relationshipCode": 1,
                          "isEmergency": false,
                          "isNOK": false,
                          "isFamily": true,
                          "isHeadOfFamily": true,
                          "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
                        },
                        "Adding a emergency contact who is not in the system": {
                          "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                          "contactName": "Jim Sterling",
                          "relationshipCode": 1,
                          "contactMethod": 1,
                          "mobilePhone": "1234567890",
                          "homePhone": "2234567890",
                          "workPhone": "323456790",
                          "email": "user@example.com",
                          "isEmergency": true,
                          "isNOK": true,
                          "isFamily": false,
                          "isHeadOfFamily": false
                        }
                      },
                      "properties": {
                        "relatedPersonId": {
                          "type": "string",
                          "nullable": true,
                          "format": "uuid",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                        },
                        "contactName": {
                          "type": "string",
                          "maxLength": 100,
                          "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                        },
                        "relationshipCode": {
                          "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
                          "type": "integer"
                        },
                        "contactMethod": {
                          "type": "integer",
                          "nullable": true,
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                          ],
                          "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
                          "title": "ContactMethod"
                        },
                        "mobilePhone": {
                          "type": "string",
                          "nullable": true,
                          "minLength": 10,
                          "maxLength": 10,
                          "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "example": "2234567890"
                        },
                        "homePhone": {
                          "type": "string",
                          "nullable": true,
                          "pattern": "^\\d+$",
                          "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "minLength": 10,
                          "maxLength": 10,
                          "example": 434782347
                        },
                        "workPhone": {
                          "type": "string",
                          "nullable": true,
                          "pattern": "^\\d+$",
                          "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "minLength": 10,
                          "maxLength": 10,
                          "example": 297876436
                        },
                        "email": {
                          "type": "string",
                          "nullable": true,
                          "format": "email",
                          "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
                          "example": "xyz@abc.com"
                        },
                        "isEmergency": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is an emergency contact or not"
                        },
                        "isNok": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is a next of kin"
                        },
                        "isFamily": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
                        },
                        "isHeadOfFamily": {
                          "type": "boolean",
                          "description": "Flag indicates whether the family added is a head of family or not"
                        }
                      },
                      "required": [
                        "relationshipCode"
                      ],
                      "x-tags": [
                        "Other"
                      ]
                    },
                    {
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      }
                    }
                  ],
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response With Mandatory Fields - Emergency Contact Not In System": {
                    "value": {
                      "id": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320",
                      "relatedPersonId": null,
                      "relationshipCode": 1,
                      "contactName": "Jim Sterling",
                      "contactMethod": 1,
                      "mobilePhone": "1234567890",
                      "homePhone": "2234567890",
                      "workPhone": 323456790,
                      "email": "user@example.com",
                      "isEmergency": true,
                      "isNOK": true,
                      "isFamily": false,
                      "isHeadOfFamily": false,
                      "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "createdDateTime": "2021-01-15T14:05:07.487Z",
                      "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "updatedDateTime": "2021-01-15T14:05:07.487Z"
                    }
                  },
                  "Response With Mandatory Fields - Emergency Contact In System": {
                    "value": {
                      "id": "6ddfee6a-56f2-11eb-a755-93c447e37ec2",
                      "relatedPersonId": "a6a7e33e-9ad3-11e8-b48c-4fd4578cfc0f",
                      "contactName": "Smith, Jane",
                      "relationshipCode": 1,
                      "contactMethod": 1,
                      "mobilePhone": "1234567890",
                      "homePhone": "1234567890",
                      "workPhone": null,
                      "email": "smith.jane@gmail.com",
                      "isEmergency": false,
                      "isNOK": false,
                      "isFamily": true,
                      "isHeadOfFamily": false,
                      "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "createdDateTime": "2021-01-15T12:27:59.036Z",
                      "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "updatedDateTime": "2021-01-15T12:27:59.036Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "nullable": true,
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request With Invalid Fields Errors Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "contactName",
                          "value": null,
                          "message": "contactName must not be null when relatedPersonId is null"
                        },
                        {
                          "parameter": "contactMethod",
                          "value": null,
                          "message": "contactMethod must not be null when relatedPersonId is present"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please refresh the page and try again."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PatientRelationshipCreate",
                "type": "object",
                "x-examples": {
                  "Adding a family": {
                    "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                    "relationshipCode": 1,
                    "isEmergency": false,
                    "isNOK": false,
                    "isFamily": true,
                    "isHeadOfFamily": true,
                    "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
                  },
                  "Adding a emergency contact who is not in the system": {
                    "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                    "contactName": "Jim Sterling",
                    "relationshipCode": 1,
                    "contactMethod": 1,
                    "mobilePhone": "1234567890",
                    "homePhone": "2234567890",
                    "workPhone": "323456790",
                    "email": "user@example.com",
                    "isEmergency": true,
                    "isNOK": true,
                    "isFamily": false,
                    "isHeadOfFamily": false
                  }
                },
                "properties": {
                  "relatedPersonId": {
                    "type": "string",
                    "nullable": true,
                    "format": "uuid",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                  },
                  "contactName": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                  },
                  "relationshipCode": {
                    "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
                    "type": "integer"
                  },
                  "contactMethod": {
                    "type": "integer",
                    "nullable": true,
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6
                    ],
                    "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
                    "title": "ContactMethod"
                  },
                  "mobilePhone": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 10,
                    "maxLength": 10,
                    "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                    "example": "2234567890"
                  },
                  "homePhone": {
                    "type": "string",
                    "nullable": true,
                    "pattern": "^\\d+$",
                    "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                    "minLength": 10,
                    "maxLength": 10,
                    "example": 434782347
                  },
                  "workPhone": {
                    "type": "string",
                    "nullable": true,
                    "pattern": "^\\d+$",
                    "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                    "minLength": 10,
                    "maxLength": 10,
                    "example": 297876436
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "format": "email",
                    "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
                    "example": "xyz@abc.com"
                  },
                  "isEmergency": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact added is an emergency contact or not"
                  },
                  "isNok": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact added is a next of kin"
                  },
                  "isFamily": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
                  },
                  "isHeadOfFamily": {
                    "type": "boolean",
                    "description": "Flag indicates whether the family added is a head of family or not"
                  }
                },
                "required": [
                  "relationshipCode"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Request With Mandatory Fields - Emergency Contact Not In System": {
                  "value": {
                    "relationshipCode": 1,
                    "relatedPersonId": null,
                    "contactName": "Jim Sterling",
                    "contactMethod": 1,
                    "mobilePhone": "1234567890",
                    "homePhone": "2234567890",
                    "workPhone": 323456790,
                    "email": "user@example.com",
                    "isEmergency": true,
                    "isNOK": true,
                    "isFamily": false,
                    "isHeadOfFamily": false
                  }
                },
                "Request With Mandatory Fields - Emergency Contact In System": {
                  "value": {
                    "relationshipCode": 1,
                    "relatedPersonId": "a6a7e33e-9ad3-11e8-b48c-4fd4578cfc0f",
                    "contactName": null,
                    "contactMethod": null,
                    "mobilePhone": null,
                    "homePhone": null,
                    "workPhone": null,
                    "email": null,
                    "isEmergency": false,
                    "isNOK": false,
                    "isFamily": true,
                    "isHeadOfFamily": false
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "relationshipCode": 1,
                    "email": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "description": "Create patient relationship",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/patients/{patient_id}/relationships/{relationship_id}": {
      "put": {
        "summary": "Update patient relationship",
        "operationId": "put-patients-patient_id-relationships-relationship_id",
        "responses": {
          "200": {
            "description": "Resource updated",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientRelationship",
                  "x-examples": {
                    "example": {
                      "id": "d24b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "contactName": "Jim Sterling",
                      "relationshipCode": 1,
                      "contactMethod": 1,
                      "mobilePhone": "1234567890",
                      "homePhone": "2234567890",
                      "workPhone": "323456790",
                      "email": "user@example.com",
                      "isEmergency": true,
                      "isNOK": true,
                      "isFamily": true,
                      "isHeadOfFamily": true,
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                      "updatedDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                    }
                  },
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Patient Relationship id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                          "format": "uuid",
                          "example": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320"
                        }
                      }
                    },
                    {
                      "title": "PatientRelationshipCreate",
                      "type": "object",
                      "x-examples": {
                        "Adding a family": {
                          "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                          "relationshipCode": 1,
                          "isEmergency": false,
                          "isNOK": false,
                          "isFamily": true,
                          "isHeadOfFamily": true,
                          "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
                        },
                        "Adding a emergency contact who is not in the system": {
                          "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                          "contactName": "Jim Sterling",
                          "relationshipCode": 1,
                          "contactMethod": 1,
                          "mobilePhone": "1234567890",
                          "homePhone": "2234567890",
                          "workPhone": "323456790",
                          "email": "user@example.com",
                          "isEmergency": true,
                          "isNOK": true,
                          "isFamily": false,
                          "isHeadOfFamily": false
                        }
                      },
                      "properties": {
                        "relatedPersonId": {
                          "type": "string",
                          "nullable": true,
                          "format": "uuid",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                        },
                        "contactName": {
                          "type": "string",
                          "maxLength": 100,
                          "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                        },
                        "relationshipCode": {
                          "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
                          "type": "integer"
                        },
                        "contactMethod": {
                          "type": "integer",
                          "nullable": true,
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                          ],
                          "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
                          "title": "ContactMethod"
                        },
                        "mobilePhone": {
                          "type": "string",
                          "nullable": true,
                          "minLength": 10,
                          "maxLength": 10,
                          "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "example": "2234567890"
                        },
                        "homePhone": {
                          "type": "string",
                          "nullable": true,
                          "pattern": "^\\d+$",
                          "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "minLength": 10,
                          "maxLength": 10,
                          "example": 434782347
                        },
                        "workPhone": {
                          "type": "string",
                          "nullable": true,
                          "pattern": "^\\d+$",
                          "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "minLength": 10,
                          "maxLength": 10,
                          "example": 297876436
                        },
                        "email": {
                          "type": "string",
                          "nullable": true,
                          "format": "email",
                          "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
                          "example": "xyz@abc.com"
                        },
                        "isEmergency": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is an emergency contact or not"
                        },
                        "isNok": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is a next of kin"
                        },
                        "isFamily": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
                        },
                        "isHeadOfFamily": {
                          "type": "boolean",
                          "description": "Flag indicates whether the family added is a head of family or not"
                        }
                      },
                      "required": [
                        "relationshipCode"
                      ],
                      "x-tags": [
                        "Other"
                      ]
                    },
                    {
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      }
                    }
                  ],
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320",
                      "relatedPersonId": null,
                      "contactName": "Jim Baker",
                      "relationshipCode": 1,
                      "contactMethod": 1,
                      "mobilePhone": "1234567890",
                      "homePhone": "2234567890",
                      "workPhone": 323456790,
                      "email": "user@example.com",
                      "isEmergency": true,
                      "isNOK": true,
                      "isFamily": false,
                      "isHeadOfFamily": false,
                      "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "createdDateTime": "2021-01-15T14:05:07.487Z",
                      "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "updatedDateTime": "2021-01-15T14:05:07.487Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "nullable": true,
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request With Invalid Fields Errors Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "contactName",
                          "value": null,
                          "message": "contactName must not be null when relatedPersonId is null"
                        },
                        {
                          "parameter": "contactMethod",
                          "value": null,
                          "message": "contactMethod must not be null when relatedPersonId is null"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please refresh the page and try again."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Relationships"
        ],
        "description": "Update patient relationship",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PatientRelationshipCreate",
                "type": "object",
                "x-examples": {
                  "Adding a family": {
                    "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                    "relationshipCode": 1,
                    "isEmergency": false,
                    "isNOK": false,
                    "isFamily": true,
                    "isHeadOfFamily": true,
                    "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
                  },
                  "Adding a emergency contact who is not in the system": {
                    "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                    "contactName": "Jim Sterling",
                    "relationshipCode": 1,
                    "contactMethod": 1,
                    "mobilePhone": "1234567890",
                    "homePhone": "2234567890",
                    "workPhone": "323456790",
                    "email": "user@example.com",
                    "isEmergency": true,
                    "isNOK": true,
                    "isFamily": false,
                    "isHeadOfFamily": false
                  }
                },
                "properties": {
                  "relatedPersonId": {
                    "type": "string",
                    "nullable": true,
                    "format": "uuid",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                  },
                  "contactName": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                  },
                  "relationshipCode": {
                    "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
                    "type": "integer"
                  },
                  "contactMethod": {
                    "type": "integer",
                    "nullable": true,
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6
                    ],
                    "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
                    "title": "ContactMethod"
                  },
                  "mobilePhone": {
                    "type": "string",
                    "nullable": true,
                    "minLength": 10,
                    "maxLength": 10,
                    "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                    "example": "2234567890"
                  },
                  "homePhone": {
                    "type": "string",
                    "nullable": true,
                    "pattern": "^\\d+$",
                    "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                    "minLength": 10,
                    "maxLength": 10,
                    "example": 434782347
                  },
                  "workPhone": {
                    "type": "string",
                    "nullable": true,
                    "pattern": "^\\d+$",
                    "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                    "minLength": 10,
                    "maxLength": 10,
                    "example": 297876436
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "format": "email",
                    "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
                    "example": "xyz@abc.com"
                  },
                  "isEmergency": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact added is an emergency contact or not"
                  },
                  "isNok": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact added is a next of kin"
                  },
                  "isFamily": {
                    "type": "boolean",
                    "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
                  },
                  "isHeadOfFamily": {
                    "type": "boolean",
                    "description": "Flag indicates whether the family added is a head of family or not"
                  }
                },
                "required": [
                  "relationshipCode"
                ],
                "x-tags": [
                  "Other"
                ]
              },
              "examples": {
                "Update an emergency contact who is not in the system": {
                  "value": {
                    "relatedPersonId": null,
                    "relationshipCode": 1,
                    "contactName": "Jim Baker",
                    "contactMethod": 1,
                    "mobilePhone": "1234567890",
                    "homePhone": "2234567890",
                    "workPhone": 323456790,
                    "email": "user@example.com",
                    "isEmergency": true,
                    "isNOK": true,
                    "isFamily": false,
                    "isHeadOfFamily": false
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "relationshipCode": 1,
                    "email": "user@example.com"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete patient relationship",
        "operationId": "delete-patients-patient_id-relationships-relationship_id",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "id": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "id"
                  ]
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "message": "Successfully Deleted",
                      "id": "f8a1c1b2-172a-11ea-9f52-13e7eca3eabf"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "nullable": true,
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "update.addressId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "update.addressId",
                          "value": "0343bb8-251d-11e9-b4a7-eb35277b6abb",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please refresh the page and try again."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "description": "Delete patient relationship",
        "tags": [
          "Relationships"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "relationship_id",
          "in": "path",
          "required": true,
          "description": "Relationship GUID"
        },
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "get": {
        "summary": "Get patient relationship",
        "operationId": "get-patients-patient_id-relationships-relationship_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientRelationship",
                  "x-examples": {
                    "example": {
                      "id": "d24b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "contactName": "Jim Sterling",
                      "relationshipCode": 1,
                      "contactMethod": 1,
                      "mobilePhone": "1234567890",
                      "homePhone": "2234567890",
                      "workPhone": "323456790",
                      "email": "user@example.com",
                      "isEmergency": true,
                      "isNOK": true,
                      "isFamily": true,
                      "isHeadOfFamily": true,
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                      "updatedDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                    }
                  },
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Patient Relationship id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                          "format": "uuid",
                          "example": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320"
                        }
                      }
                    },
                    {
                      "title": "PatientRelationshipCreate",
                      "type": "object",
                      "x-examples": {
                        "Adding a family": {
                          "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                          "relationshipCode": 1,
                          "isEmergency": false,
                          "isNOK": false,
                          "isFamily": true,
                          "isHeadOfFamily": true,
                          "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
                        },
                        "Adding a emergency contact who is not in the system": {
                          "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                          "contactName": "Jim Sterling",
                          "relationshipCode": 1,
                          "contactMethod": 1,
                          "mobilePhone": "1234567890",
                          "homePhone": "2234567890",
                          "workPhone": "323456790",
                          "email": "user@example.com",
                          "isEmergency": true,
                          "isNOK": true,
                          "isFamily": false,
                          "isHeadOfFamily": false
                        }
                      },
                      "properties": {
                        "relatedPersonId": {
                          "type": "string",
                          "nullable": true,
                          "format": "uuid",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                        },
                        "contactName": {
                          "type": "string",
                          "maxLength": 100,
                          "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
                        },
                        "relationshipCode": {
                          "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
                          "type": "integer"
                        },
                        "contactMethod": {
                          "type": "integer",
                          "nullable": true,
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                          ],
                          "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
                          "title": "ContactMethod"
                        },
                        "mobilePhone": {
                          "type": "string",
                          "nullable": true,
                          "minLength": 10,
                          "maxLength": 10,
                          "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "example": "2234567890"
                        },
                        "homePhone": {
                          "type": "string",
                          "nullable": true,
                          "pattern": "^\\d+$",
                          "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "minLength": 10,
                          "maxLength": 10,
                          "example": 434782347
                        },
                        "workPhone": {
                          "type": "string",
                          "nullable": true,
                          "pattern": "^\\d+$",
                          "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                          "minLength": 10,
                          "maxLength": 10,
                          "example": 297876436
                        },
                        "email": {
                          "type": "string",
                          "nullable": true,
                          "format": "email",
                          "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
                          "example": "xyz@abc.com"
                        },
                        "isEmergency": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is an emergency contact or not"
                        },
                        "isNok": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is a next of kin"
                        },
                        "isFamily": {
                          "type": "boolean",
                          "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
                        },
                        "isHeadOfFamily": {
                          "type": "boolean",
                          "description": "Flag indicates whether the family added is a head of family or not"
                        }
                      },
                      "required": [
                        "relationshipCode"
                      ],
                      "x-tags": [
                        "Other"
                      ]
                    },
                    {
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      }
                    }
                  ],
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Patient Relationship Search Response": {
                    "value": {
                      "id": "d24b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65",
                      "contactName": "Jim Sterling",
                      "relationshipCode": 1,
                      "contactMethod": 1,
                      "mobilePhone": "1234567890",
                      "homePhone": "2234567890",
                      "workPhone": 323456790,
                      "email": "user@example.com",
                      "isEmergency": true,
                      "isNOK": true,
                      "isFamily": true,
                      "isHeadOfFamily": true,
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                      "updatedDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "nullable": true,
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code",
                    "errors"
                  ]
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "update.addressId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "update.addressId",
                          "value": "0343bb8-251d-11e9-b4a7-eb35277b6abb",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please refresh the page and try again."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "description": "Get patient relationship by a given relationship ID and patient ID",
        "tags": [
          "Relationships"
        ]
      }
    },
    "/v1/patients/{patient_id}/settings": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "patient_id",
          "in": "path",
          "required": true,
          "description": "A GUID that represents the patient_id"
        }
      ],
      "get": {
        "summary": "Get patient setting",
        "operationId": "get-patients-patient_id-setting",
        "description": "Get patient setting",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientSettings",
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Patient Setting id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                          "format": "uuid",
                          "example": "c4476046-3508-11eb-adbc-a75fbd464ca9"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "title": "PatientSettingsCreate",
                      "type": "object",
                      "description": "PatientSettings Model",
                      "x-examples": {
                        "PatientSettings Request": {
                          "chartNo": "string",
                          "accountPayerCode": 1,
                          "accountTypeId": "string",
                          "medicareAlias": true,
                          "medicareFirstNameAlias": "string",
                          "medicareSurNameAlias": "string",
                          "medicareAddress": 1,
                          "medicareNo": "stringstri",
                          "medicareIRN": "s",
                          "medicareExpiry": "2021-04",
                          "pensionCardtype": 1,
                          "pensionCardno": "string",
                          "pensionCardExpiry": "2021-04",
                          "dvaNo": "string",
                          "dvaConditions": "string",
                          "dvaCardType": 1,
                          "safetyNetNo": "string",
                          "ihiNo": "string",
                          "ihiNoStatusCode": 0,
                          "ihiRecordStatusCode": 0,
                          "eprescribing": true,
                          "research": 1,
                          "racfId": "string",
                          "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                          "healthFundNo": "string",
                          "healthFundUPI": "st",
                          "healthFundExpiryDate": "2023-04",
                          "appointmentIntervalCode": 0,
                          "appointmentNotes": "string"
                        }
                      },
                      "x-tags": [
                        "Other"
                      ],
                      "properties": {
                        "patientId": {
                          "type": "string",
                          "description": "A GUID that represents the patient id.",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "nullable": false
                        },
                        "chartNo": {
                          "type": "string",
                          "maxLength": 20,
                          "description": "Represents the chart no.",
                          "nullable": true
                        },
                        "accountTypeId": {
                          "type": "string",
                          "description": "A GUID that represents the schedule id.",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "nullable": true
                        },
                        "accountPayerCode": {
                          "title": "AccountPayer",
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "description": "Represents the account payer information. Call the below endpoint to get the patient title lookup\n/code-system/accountPayerCode\n",
                          "nullable": true
                        },
                        "medicareAlias": {
                          "type": "boolean",
                          "description": "Flag indicates whether to use alias for medicare purpose",
                          "nullable": true
                        },
                        "medicareFirstNameAlias": {
                          "type": "string",
                          "maxLength": 40,
                          "description": "Represents the first name alias for medicare purpose.",
                          "nullable": true
                        },
                        "medicareSurNameAlias": {
                          "type": "string",
                          "maxLength": 40,
                          "description": "Represents the sur name alias for medicare purpose.",
                          "nullable": true
                        },
                        "medicareAddress": {
                          "type": "integer",
                          "enum": [
                            1,
                            2
                          ],
                          "description": "Represents the address to be used for medicare purpose.\n\n* `1` - Primary\n* `2` - Secondary",
                          "nullable": true
                        },
                        "medicareNo": {
                          "type": "string",
                          "description": "Represents the patient medicare no.",
                          "minLength": 10,
                          "maxLength": 10,
                          "nullable": true
                        },
                        "medicareIRN": {
                          "type": "string",
                          "description": "Represents the patient medicare no IRN.Medicare no should be 10 digits in length",
                          "minLength": 1,
                          "maxLength": 1,
                          "nullable": true
                        },
                        "medicareExpiry": {
                          "type": "string",
                          "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                          "description": "Represents the patient medicare card expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "example": "2021-04",
                          "nullable": true
                        },
                        "pensionCardtype": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "description": "Represents the patient pension card type\n\n* `1` - Pensioner Concession Card\n* `2` - Health Care Card\n* `3` - Commonwealth Seniors Card\n* `4` - Other",
                          "nullable": true
                        },
                        "pensionCardno": {
                          "type": "string",
                          "maxLength": 15,
                          "description": "Represents the patient pension card no.",
                          "nullable": true
                        },
                        "pensionCardExpiry": {
                          "type": "string",
                          "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                          "description": "Repesents the patient pension card expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "example": "2021-04",
                          "nullable": true
                        },
                        "dvaNo": {
                          "type": "string",
                          "maxLength": 9,
                          "description": "Repesents the patient DVA no.",
                          "nullable": true
                        },
                        "dvaConditions": {
                          "type": "string",
                          "description": "Repesents the patient DVA conditions.",
                          "maxLength": 300,
                          "nullable": true
                        },
                        "dvaCardType": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "description": "Repesents the patient DVA card type.\n\n* `1` - Gold\n* `2` - White\n* `3` - Lilac\n* `4` - Orange\n* `5` - Blue",
                          "nullable": true
                        },
                        "safetyNetNo": {
                          "type": "string",
                          "maxLength": 14,
                          "description": "Repesents the patient safety net no.",
                          "nullable": true
                        },
                        "ihiNo": {
                          "type": "string",
                          "description": "Repesents the patient ihi no.",
                          "maxLength": 16,
                          "nullable": true
                        },
                        "ihiNoStatusCode": {
                          "type": "integer",
                          "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                          "nullable": true
                        },
                        "ihiRecordStatusCode": {
                          "type": "integer",
                          "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                          "nullable": true
                        },
                        "eprescribing": {
                          "type": "boolean",
                          "description": "Flag indicates whether to set eprescribing.",
                          "nullable": true
                        },
                        "research": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3
                          ],
                          "description": "* `1` - No\n* `2` - Conditional\n* `3` - Yes",
                          "nullable": true
                        },
                        "racfId": {
                          "type": "string",
                          "maxLength": 10,
                          "description": "Represents Aged care id.",
                          "nullable": true
                        },
                        "providerId": {
                          "type": "string",
                          "description": "A GUID that represents the health insurance provider id",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "format": "uuid",
                          "nullable": true
                        },
                        "healthFundNo": {
                          "type": "string",
                          "maxLength": 15,
                          "description": "Represents the health fund no.",
                          "nullable": true
                        },
                        "healthFundUPI": {
                          "type": "string",
                          "maxLength": 2,
                          "description": "Represents the health fund no upi.",
                          "nullable": true
                        },
                        "healthFundExpiryDate": {
                          "type": "string",
                          "description": "Represents the health fund expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "nullable": true
                        },
                        "appointmentIntervalCode": {
                          "type": "integer",
                          "description": "Represents the appointment interval duration .Call the below endpoint to get the patient title lookup\n/code-system/appointmentIntervalCode"
                        },
                        "appointmentNotes": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Appointment note or description."
                        }
                      }
                    },
                    {
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      },
                      "required": [
                        "createdBy",
                        "createdDateTime",
                        "updatedBy",
                        "updatedDateTime"
                      ]
                    }
                  ],
                  "x-examples": {
                    "example-1": {
                      "id": "string",
                      "patientId": "7ce1bf10-1084-4820-9112-0bff5b89ca64",
                      "chartNo": "string",
                      "accountTypeId": "string",
                      "accountPayerCode": 1,
                      "medicareAlias": true,
                      "medicareFirstNameAlias": "string",
                      "medicareSurNameAlias": "string",
                      "medicareAddress": 1,
                      "medicareNo": "stringstri",
                      "medicareIRN": "s",
                      "medicareExpiry": "04/2021",
                      "pensionCardtype": 1,
                      "pensionCardno": "string",
                      "pensionCardExpiry": "04/2021",
                      "dvaNo": "string",
                      "dvaConditions": "string",
                      "dvaCardtype": 1,
                      "safetyNetNo": "string",
                      "ihiNo": "string",
                      "ihiNoStatusCode": 0,
                      "ihiRecordStatusCode": 0,
                      "eprescribing": true,
                      "research": 1,
                      "racfid": "string",
                      "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                      "healthFundNo": "string",
                      "healthFundUPI": "st",
                      "healthFundExpiryDate": "MM/YYYY",
                      "appointmentIntervalCode": 0,
                      "appointmentNotes": "string",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "string"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "type": "object"
                },
                "examples": {
                  "Patient Setting Search Response": {
                    "value": {
                      "id": "2c7ac3fe-1fc7-11ea-b415-7378c3ea6f13",
                      "chartNo": "12345",
                      "accountTypeId": "74ccca27-19a5-e511-810a-0699dab61555",
                      "accountPayerCode": 4,
                      "medicareAlias": true,
                      "medicareFirstNameAlias": "Advance",
                      "medicareSurNameAlias": "Centre",
                      "medicareAddress": 1,
                      "medicareNo": "2123456702",
                      "medicareIRN": "3",
                      "medicareExpiry": "2024-12",
                      "pensionCardtype": 2,
                      "pensionCardno": "test",
                      "pensionCardExpiry": "2023-12",
                      "dvaNo": "12245",
                      "dvaConditions": "test",
                      "dvaCardType": 1,
                      "safetyNetNo": "33",
                      "ihiNo": "8003607302353018",
                      "eprescribing": true,
                      "research": 1,
                      "racfId": "312341",
                      "providerId": "2dc5698a-c27d-11e6-bdbe-13afcbe69085",
                      "healthFundNo": "9283947281",
                      "healthFundUPI": "3",
                      "healthFundExpiryDate": "2088-10",
                      "appointmentIntervalCode": 4,
                      "appointmentNotes": "test",
                      "createdBy": "96bc680e-1fc6-11ea-a81d-1f8e668d87d2",
                      "createdDateTime": "2020-12-03T08:42:13.392Z",
                      "updatedBy": "96bc680e-1fc6-11ea-a81d-1f8e668d87d2",
                      "updatedDateTime": "2020-12-03T08:42:13.392Z"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "update.patientId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "update.patientId",
                          "value": "xxxxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Settings"
        ]
      },
      "post": {
        "summary": "Create patient setting",
        "operationId": "post-patients-patient_id-setting",
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientSettings",
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Patient Setting id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                          "format": "uuid",
                          "example": "c4476046-3508-11eb-adbc-a75fbd464ca9"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "title": "PatientSettingsCreate",
                      "type": "object",
                      "description": "PatientSettings Model",
                      "x-examples": {
                        "PatientSettings Request": {
                          "chartNo": "string",
                          "accountPayerCode": 1,
                          "accountTypeId": "string",
                          "medicareAlias": true,
                          "medicareFirstNameAlias": "string",
                          "medicareSurNameAlias": "string",
                          "medicareAddress": 1,
                          "medicareNo": "stringstri",
                          "medicareIRN": "s",
                          "medicareExpiry": "2021-04",
                          "pensionCardtype": 1,
                          "pensionCardno": "string",
                          "pensionCardExpiry": "2021-04",
                          "dvaNo": "string",
                          "dvaConditions": "string",
                          "dvaCardType": 1,
                          "safetyNetNo": "string",
                          "ihiNo": "string",
                          "ihiNoStatusCode": 0,
                          "ihiRecordStatusCode": 0,
                          "eprescribing": true,
                          "research": 1,
                          "racfId": "string",
                          "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                          "healthFundNo": "string",
                          "healthFundUPI": "st",
                          "healthFundExpiryDate": "2023-04",
                          "appointmentIntervalCode": 0,
                          "appointmentNotes": "string"
                        }
                      },
                      "x-tags": [
                        "Other"
                      ],
                      "properties": {
                        "patientId": {
                          "type": "string",
                          "description": "A GUID that represents the patient id.",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "nullable": false
                        },
                        "chartNo": {
                          "type": "string",
                          "maxLength": 20,
                          "description": "Represents the chart no.",
                          "nullable": true
                        },
                        "accountTypeId": {
                          "type": "string",
                          "description": "A GUID that represents the schedule id.",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "nullable": true
                        },
                        "accountPayerCode": {
                          "title": "AccountPayer",
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "description": "Represents the account payer information. Call the below endpoint to get the patient title lookup\n/code-system/accountPayerCode\n",
                          "nullable": true
                        },
                        "medicareAlias": {
                          "type": "boolean",
                          "description": "Flag indicates whether to use alias for medicare purpose",
                          "nullable": true
                        },
                        "medicareFirstNameAlias": {
                          "type": "string",
                          "maxLength": 40,
                          "description": "Represents the first name alias for medicare purpose.",
                          "nullable": true
                        },
                        "medicareSurNameAlias": {
                          "type": "string",
                          "maxLength": 40,
                          "description": "Represents the sur name alias for medicare purpose.",
                          "nullable": true
                        },
                        "medicareAddress": {
                          "type": "integer",
                          "enum": [
                            1,
                            2
                          ],
                          "description": "Represents the address to be used for medicare purpose.\n\n* `1` - Primary\n* `2` - Secondary",
                          "nullable": true
                        },
                        "medicareNo": {
                          "type": "string",
                          "description": "Represents the patient medicare no.",
                          "minLength": 10,
                          "maxLength": 10,
                          "nullable": true
                        },
                        "medicareIRN": {
                          "type": "string",
                          "description": "Represents the patient medicare no IRN.Medicare no should be 10 digits in length",
                          "minLength": 1,
                          "maxLength": 1,
                          "nullable": true
                        },
                        "medicareExpiry": {
                          "type": "string",
                          "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                          "description": "Represents the patient medicare card expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "example": "2021-04",
                          "nullable": true
                        },
                        "pensionCardtype": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "description": "Represents the patient pension card type\n\n* `1` - Pensioner Concession Card\n* `2` - Health Care Card\n* `3` - Commonwealth Seniors Card\n* `4` - Other",
                          "nullable": true
                        },
                        "pensionCardno": {
                          "type": "string",
                          "maxLength": 15,
                          "description": "Represents the patient pension card no.",
                          "nullable": true
                        },
                        "pensionCardExpiry": {
                          "type": "string",
                          "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                          "description": "Repesents the patient pension card expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "example": "2021-04",
                          "nullable": true
                        },
                        "dvaNo": {
                          "type": "string",
                          "maxLength": 9,
                          "description": "Repesents the patient DVA no.",
                          "nullable": true
                        },
                        "dvaConditions": {
                          "type": "string",
                          "description": "Repesents the patient DVA conditions.",
                          "maxLength": 300,
                          "nullable": true
                        },
                        "dvaCardType": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "description": "Repesents the patient DVA card type.\n\n* `1` - Gold\n* `2` - White\n* `3` - Lilac\n* `4` - Orange\n* `5` - Blue",
                          "nullable": true
                        },
                        "safetyNetNo": {
                          "type": "string",
                          "maxLength": 14,
                          "description": "Repesents the patient safety net no.",
                          "nullable": true
                        },
                        "ihiNo": {
                          "type": "string",
                          "description": "Repesents the patient ihi no.",
                          "maxLength": 16,
                          "nullable": true
                        },
                        "ihiNoStatusCode": {
                          "type": "integer",
                          "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                          "nullable": true
                        },
                        "ihiRecordStatusCode": {
                          "type": "integer",
                          "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                          "nullable": true
                        },
                        "eprescribing": {
                          "type": "boolean",
                          "description": "Flag indicates whether to set eprescribing.",
                          "nullable": true
                        },
                        "research": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3
                          ],
                          "description": "* `1` - No\n* `2` - Conditional\n* `3` - Yes",
                          "nullable": true
                        },
                        "racfId": {
                          "type": "string",
                          "maxLength": 10,
                          "description": "Represents Aged care id.",
                          "nullable": true
                        },
                        "providerId": {
                          "type": "string",
                          "description": "A GUID that represents the health insurance provider id",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "format": "uuid",
                          "nullable": true
                        },
                        "healthFundNo": {
                          "type": "string",
                          "maxLength": 15,
                          "description": "Represents the health fund no.",
                          "nullable": true
                        },
                        "healthFundUPI": {
                          "type": "string",
                          "maxLength": 2,
                          "description": "Represents the health fund no upi.",
                          "nullable": true
                        },
                        "healthFundExpiryDate": {
                          "type": "string",
                          "description": "Represents the health fund expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "nullable": true
                        },
                        "appointmentIntervalCode": {
                          "type": "integer",
                          "description": "Represents the appointment interval duration .Call the below endpoint to get the patient title lookup\n/code-system/appointmentIntervalCode"
                        },
                        "appointmentNotes": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Appointment note or description."
                        }
                      }
                    },
                    {
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      },
                      "required": [
                        "createdBy",
                        "createdDateTime",
                        "updatedBy",
                        "updatedDateTime"
                      ]
                    }
                  ],
                  "x-examples": {
                    "example-1": {
                      "id": "string",
                      "patientId": "7ce1bf10-1084-4820-9112-0bff5b89ca64",
                      "chartNo": "string",
                      "accountTypeId": "string",
                      "accountPayerCode": 1,
                      "medicareAlias": true,
                      "medicareFirstNameAlias": "string",
                      "medicareSurNameAlias": "string",
                      "medicareAddress": 1,
                      "medicareNo": "stringstri",
                      "medicareIRN": "s",
                      "medicareExpiry": "04/2021",
                      "pensionCardtype": 1,
                      "pensionCardno": "string",
                      "pensionCardExpiry": "04/2021",
                      "dvaNo": "string",
                      "dvaConditions": "string",
                      "dvaCardtype": 1,
                      "safetyNetNo": "string",
                      "ihiNo": "string",
                      "ihiNoStatusCode": 0,
                      "ihiRecordStatusCode": 0,
                      "eprescribing": true,
                      "research": 1,
                      "racfid": "string",
                      "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                      "healthFundNo": "string",
                      "healthFundUPI": "st",
                      "healthFundExpiryDate": "MM/YYYY",
                      "appointmentIntervalCode": 0,
                      "appointmentNotes": "string",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "string"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "type": "object"
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "5d12c7b4-570c-11eb-bae2-bfdd1fdd5bda",
                      "chartNo": "12345",
                      "accountPayerCode": 4,
                      "accountTypeId": "74ccca27-19a5-e511-810a-0699dab61555",
                      "medicareAlias": true,
                      "medicareFirstNameAlias": "Advance",
                      "medicareSurNameAlias": "Centre",
                      "medicareAddress": 1,
                      "medicareNo": "2123456702",
                      "medicareIRN": null,
                      "medicareExpiry": "2024-12",
                      "pensionCardtype": null,
                      "pensionCardno": null,
                      "pensionCardExpiry": "2023-12",
                      "dvaNo": "12245",
                      "dvaConditions": "test",
                      "dvaCardtype": null,
                      "safetyNetNo": "33",
                      "ihiNo": "8003607302353018",
                      "ihiNoStatusCode": null,
                      "ihiRecordStatusCode": null,
                      "eprescribing": true,
                      "research": 1,
                      "racfId": "312341",
                      "providerId": null,
                      "healthFundNo": "9283947281",
                      "healthFundUPI": null,
                      "healthFundExpiryDate": "2088-10",
                      "appointmentIntervalCode": 4,
                      "appointmentNotes": null,
                      "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "createdDateTime": "2021-01-15T15:33:37.760Z",
                      "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "updatedDateTime": "2021-01-15T15:33:37.760Z"
                    }
                  },
                  "Response With Mandatory Fields": {
                    "value": {
                      "id": "de01e9b8-59ff-11eb-bf19-7b47772bfb6f",
                      "chartNo": null,
                      "accountPayerCode": null,
                      "accountTypeId": null,
                      "medicareAlias": false,
                      "medicareFirstNameAlias": null,
                      "medicareSurNameAlias": null,
                      "medicareAddress": null,
                      "medicareNo": null,
                      "medicareIRN": null,
                      "medicareExpiry": null,
                      "pensionCardtype": null,
                      "pensionCardno": null,
                      "pensionCardExpiry": null,
                      "dvaNo": null,
                      "dvaConditions": null,
                      "dvaCardtype": null,
                      "safetyNetNo": null,
                      "ihiNo": null,
                      "ihiNoStatusCode": null,
                      "ihiRecordStatusCode": null,
                      "eprescribing": false,
                      "research": null,
                      "racfId": null,
                      "providerId": null,
                      "healthFundNo": null,
                      "healthFundUPI": null,
                      "healthFundExpiryDate": null,
                      "appointmentIntervalCode": null,
                      "appointmentNotes": null,
                      "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "createdDateTime": "2021-01-19T09:41:44.109Z",
                      "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "updatedDateTime": "2021-01-19T09:41:44.109Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Errors Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "ihiNoStatusCode",
                          "value": "11",
                          "message": "IHI no status does not exist."
                        },
                        {
                          "parameter": "ihiRecordStatusCode",
                          "value": "12",
                          "message": "IHI record status does not exist."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PatientSettingsCreate",
                "type": "object",
                "description": "PatientSettings Model",
                "x-examples": {
                  "PatientSettings Request": {
                    "chartNo": "string",
                    "accountPayerCode": 1,
                    "accountTypeId": "string",
                    "medicareAlias": true,
                    "medicareFirstNameAlias": "string",
                    "medicareSurNameAlias": "string",
                    "medicareAddress": 1,
                    "medicareNo": "stringstri",
                    "medicareIRN": "s",
                    "medicareExpiry": "2021-04",
                    "pensionCardtype": 1,
                    "pensionCardno": "string",
                    "pensionCardExpiry": "2021-04",
                    "dvaNo": "string",
                    "dvaConditions": "string",
                    "dvaCardType": 1,
                    "safetyNetNo": "string",
                    "ihiNo": "string",
                    "ihiNoStatusCode": 0,
                    "ihiRecordStatusCode": 0,
                    "eprescribing": true,
                    "research": 1,
                    "racfId": "string",
                    "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                    "healthFundNo": "string",
                    "healthFundUPI": "st",
                    "healthFundExpiryDate": "2023-04",
                    "appointmentIntervalCode": 0,
                    "appointmentNotes": "string"
                  }
                },
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "patientId": {
                    "type": "string",
                    "description": "A GUID that represents the patient id.",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "nullable": false
                  },
                  "chartNo": {
                    "type": "string",
                    "maxLength": 20,
                    "description": "Represents the chart no.",
                    "nullable": true
                  },
                  "accountTypeId": {
                    "type": "string",
                    "description": "A GUID that represents the schedule id.",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "nullable": true
                  },
                  "accountPayerCode": {
                    "title": "AccountPayer",
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "description": "Represents the account payer information. Call the below endpoint to get the patient title lookup\n/code-system/accountPayerCode\n",
                    "nullable": true
                  },
                  "medicareAlias": {
                    "type": "boolean",
                    "description": "Flag indicates whether to use alias for medicare purpose",
                    "nullable": true
                  },
                  "medicareFirstNameAlias": {
                    "type": "string",
                    "maxLength": 40,
                    "description": "Represents the first name alias for medicare purpose.",
                    "nullable": true
                  },
                  "medicareSurNameAlias": {
                    "type": "string",
                    "maxLength": 40,
                    "description": "Represents the sur name alias for medicare purpose.",
                    "nullable": true
                  },
                  "medicareAddress": {
                    "type": "integer",
                    "enum": [
                      1,
                      2
                    ],
                    "description": "Represents the address to be used for medicare purpose.\n\n* `1` - Primary\n* `2` - Secondary",
                    "nullable": true
                  },
                  "medicareNo": {
                    "type": "string",
                    "description": "Represents the patient medicare no.",
                    "minLength": 10,
                    "maxLength": 10,
                    "nullable": true
                  },
                  "medicareIRN": {
                    "type": "string",
                    "description": "Represents the patient medicare no IRN.Medicare no should be 10 digits in length",
                    "minLength": 1,
                    "maxLength": 1,
                    "nullable": true
                  },
                  "medicareExpiry": {
                    "type": "string",
                    "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                    "description": "Represents the patient medicare card expiry date.Expiry date should not be in the past",
                    "default": "YYYY-MM",
                    "example": "2021-04",
                    "nullable": true
                  },
                  "pensionCardtype": {
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "description": "Represents the patient pension card type\n\n* `1` - Pensioner Concession Card\n* `2` - Health Care Card\n* `3` - Commonwealth Seniors Card\n* `4` - Other",
                    "nullable": true
                  },
                  "pensionCardno": {
                    "type": "string",
                    "maxLength": 15,
                    "description": "Represents the patient pension card no.",
                    "nullable": true
                  },
                  "pensionCardExpiry": {
                    "type": "string",
                    "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                    "description": "Repesents the patient pension card expiry date.Expiry date should not be in the past",
                    "default": "YYYY-MM",
                    "example": "2021-04",
                    "nullable": true
                  },
                  "dvaNo": {
                    "type": "string",
                    "maxLength": 9,
                    "description": "Repesents the patient DVA no.",
                    "nullable": true
                  },
                  "dvaConditions": {
                    "type": "string",
                    "description": "Repesents the patient DVA conditions.",
                    "maxLength": 300,
                    "nullable": true
                  },
                  "dvaCardType": {
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "description": "Repesents the patient DVA card type.\n\n* `1` - Gold\n* `2` - White\n* `3` - Lilac\n* `4` - Orange\n* `5` - Blue",
                    "nullable": true
                  },
                  "safetyNetNo": {
                    "type": "string",
                    "maxLength": 14,
                    "description": "Repesents the patient safety net no.",
                    "nullable": true
                  },
                  "ihiNo": {
                    "type": "string",
                    "description": "Repesents the patient ihi no.",
                    "maxLength": 16,
                    "nullable": true
                  },
                  "ihiNoStatusCode": {
                    "type": "integer",
                    "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                    "nullable": true
                  },
                  "ihiRecordStatusCode": {
                    "type": "integer",
                    "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                    "nullable": true
                  },
                  "eprescribing": {
                    "type": "boolean",
                    "description": "Flag indicates whether to set eprescribing.",
                    "nullable": true
                  },
                  "research": {
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3
                    ],
                    "description": "* `1` - No\n* `2` - Conditional\n* `3` - Yes",
                    "nullable": true
                  },
                  "racfId": {
                    "type": "string",
                    "maxLength": 10,
                    "description": "Represents Aged care id.",
                    "nullable": true
                  },
                  "providerId": {
                    "type": "string",
                    "description": "A GUID that represents the health insurance provider id",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "format": "uuid",
                    "nullable": true
                  },
                  "healthFundNo": {
                    "type": "string",
                    "maxLength": 15,
                    "description": "Represents the health fund no.",
                    "nullable": true
                  },
                  "healthFundUPI": {
                    "type": "string",
                    "maxLength": 2,
                    "description": "Represents the health fund no upi.",
                    "nullable": true
                  },
                  "healthFundExpiryDate": {
                    "type": "string",
                    "description": "Represents the health fund expiry date.Expiry date should not be in the past",
                    "default": "YYYY-MM",
                    "nullable": true
                  },
                  "appointmentIntervalCode": {
                    "type": "integer",
                    "description": "Represents the appointment interval duration .Call the below endpoint to get the patient title lookup\n/code-system/appointmentIntervalCode"
                  },
                  "appointmentNotes": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Appointment note or description."
                  }
                }
              },
              "examples": {
                "Request": {
                  "value": {
                    "chartNo": "12345",
                    "accountTypeId": "74ccca27-19a5-e511-810a-0699dab61555",
                    "accountPayerCode": 4,
                    "medicareAlias": true,
                    "medicareFirstNameAlias": "Advance",
                    "medicareSurNameAlias": "Centre",
                    "medicareAddress": 1,
                    "medicareNo": "2123456702",
                    "medicareIRN": "3",
                    "medicareExpiry": "2024-12",
                    "pensionCardtype": 2,
                    "pensionCardno": "test",
                    "pensionCardExpiry": "2023-12",
                    "dvaNo": "12245",
                    "dvaConditions": "test",
                    "dvaCardType": 1,
                    "safetyNetNo": "33",
                    "ihiNo": "8003607302353018",
                    "ihiNoStatusCode": null,
                    "ihiRecordStatusCode": null,
                    "eprescribing": true,
                    "research": 1,
                    "racfId": "312341",
                    "healthFundNo": "9283947281",
                    "providerId": null,
                    "healthFundUPI": "3",
                    "healthFundExpiryDate": "2088-10",
                    "appointmentIntervalCode": 4,
                    "appointmentNotes": "test"
                  }
                },
                "Request With Mandatory Fields": {
                  "value": {
                    "chartNo": null,
                    "accountPayerCode": null,
                    "accountTypeId": null,
                    "medicareAlias": null,
                    "medicareFirstNameAlias": null,
                    "medicareSurNameAlias": null,
                    "medicareAddress": null,
                    "medicareNo": null,
                    "medicareIRN": null,
                    "medicareExpiry": null,
                    "pensionCardtype": null,
                    "pensionCardno": null,
                    "pensionCardExpiry": null,
                    "dvaNo": null,
                    "dvaConditions": null,
                    "dvaCardtype": null,
                    "safetyNetNo": null,
                    "ihiNo": null,
                    "ihiNoStatusCode": null,
                    "ihiRecordStatusCode": null,
                    "eprescribing": null,
                    "research": null,
                    "racfId": null,
                    "providerId": null,
                    "healthFundNo": null,
                    "healthFundUPI": null,
                    "healthFundExpiryDate": null,
                    "appointmentIntervalCode": null,
                    "appointmentNotes": null
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "chartNo": "12345",
                    "accountTypeId": "74ccca27-19a5-e511-810a-0699dab61555",
                    "accountPayerCode": 5,
                    "medicareAlias": true,
                    "medicareFirstNameAlias": "Advance",
                    "medicareSurNameAlias": "Centre",
                    "medicareAddress": 1,
                    "medicareNo": "2123456702",
                    "medicareIRN": "3",
                    "medicareExpiry": "2024-12",
                    "pensionCardtype": 2,
                    "pensionCardno": "test",
                    "pensionCardExpiry": "2023-12",
                    "dvaNo": "12245",
                    "dvaConditions": "test",
                    "dvaCardType": 1,
                    "safetyNetNo": "33",
                    "ihiNo": "8003607302353018",
                    "ihiNoStatusCode": 11,
                    "ihiRecordStatusCode": 12,
                    "eprescribing": true,
                    "research": 1,
                    "racfId": "312341",
                    "healthFundNo": "9283947281",
                    "healthFundUPI": "3",
                    "healthFundExpiryDate": "2088-10",
                    "appointmentIntervalCode": 4,
                    "appointmentNotes": "test"
                  }
                }
              }
            }
          }
        },
        "description": "Create patient setting",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Settings"
        ]
      },
      "delete": {
        "summary": "Delete patient setting",
        "tags": [
          "Settings"
        ],
        "operationId": "delete-patients-patient_id-setting",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "id": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "id"
                  ]
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "message": "Successfully Deleted",
                      "id": "f8a1c1b2-172a-11ea-9f52-13e7eca3eabf"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "update.patientId: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "update.patientId",
                          "value": "xxxxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "description": "Delete patient setting"
      },
      "put": {
        "summary": "Update patient setting",
        "operationId": "put-patients-patient_id-setting",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientSettings",
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Patient Setting id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                          "format": "uuid",
                          "example": "c4476046-3508-11eb-adbc-a75fbd464ca9"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "title": "PatientSettingsCreate",
                      "type": "object",
                      "description": "PatientSettings Model",
                      "x-examples": {
                        "PatientSettings Request": {
                          "chartNo": "string",
                          "accountPayerCode": 1,
                          "accountTypeId": "string",
                          "medicareAlias": true,
                          "medicareFirstNameAlias": "string",
                          "medicareSurNameAlias": "string",
                          "medicareAddress": 1,
                          "medicareNo": "stringstri",
                          "medicareIRN": "s",
                          "medicareExpiry": "2021-04",
                          "pensionCardtype": 1,
                          "pensionCardno": "string",
                          "pensionCardExpiry": "2021-04",
                          "dvaNo": "string",
                          "dvaConditions": "string",
                          "dvaCardType": 1,
                          "safetyNetNo": "string",
                          "ihiNo": "string",
                          "ihiNoStatusCode": 0,
                          "ihiRecordStatusCode": 0,
                          "eprescribing": true,
                          "research": 1,
                          "racfId": "string",
                          "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                          "healthFundNo": "string",
                          "healthFundUPI": "st",
                          "healthFundExpiryDate": "2023-04",
                          "appointmentIntervalCode": 0,
                          "appointmentNotes": "string"
                        }
                      },
                      "x-tags": [
                        "Other"
                      ],
                      "properties": {
                        "patientId": {
                          "type": "string",
                          "description": "A GUID that represents the patient id.",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "nullable": false
                        },
                        "chartNo": {
                          "type": "string",
                          "maxLength": 20,
                          "description": "Represents the chart no.",
                          "nullable": true
                        },
                        "accountTypeId": {
                          "type": "string",
                          "description": "A GUID that represents the schedule id.",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "nullable": true
                        },
                        "accountPayerCode": {
                          "title": "AccountPayer",
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "description": "Represents the account payer information. Call the below endpoint to get the patient title lookup\n/code-system/accountPayerCode\n",
                          "nullable": true
                        },
                        "medicareAlias": {
                          "type": "boolean",
                          "description": "Flag indicates whether to use alias for medicare purpose",
                          "nullable": true
                        },
                        "medicareFirstNameAlias": {
                          "type": "string",
                          "maxLength": 40,
                          "description": "Represents the first name alias for medicare purpose.",
                          "nullable": true
                        },
                        "medicareSurNameAlias": {
                          "type": "string",
                          "maxLength": 40,
                          "description": "Represents the sur name alias for medicare purpose.",
                          "nullable": true
                        },
                        "medicareAddress": {
                          "type": "integer",
                          "enum": [
                            1,
                            2
                          ],
                          "description": "Represents the address to be used for medicare purpose.\n\n* `1` - Primary\n* `2` - Secondary",
                          "nullable": true
                        },
                        "medicareNo": {
                          "type": "string",
                          "description": "Represents the patient medicare no.",
                          "minLength": 10,
                          "maxLength": 10,
                          "nullable": true
                        },
                        "medicareIRN": {
                          "type": "string",
                          "description": "Represents the patient medicare no IRN.Medicare no should be 10 digits in length",
                          "minLength": 1,
                          "maxLength": 1,
                          "nullable": true
                        },
                        "medicareExpiry": {
                          "type": "string",
                          "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                          "description": "Represents the patient medicare card expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "example": "2021-04",
                          "nullable": true
                        },
                        "pensionCardtype": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "description": "Represents the patient pension card type\n\n* `1` - Pensioner Concession Card\n* `2` - Health Care Card\n* `3` - Commonwealth Seniors Card\n* `4` - Other",
                          "nullable": true
                        },
                        "pensionCardno": {
                          "type": "string",
                          "maxLength": 15,
                          "description": "Represents the patient pension card no.",
                          "nullable": true
                        },
                        "pensionCardExpiry": {
                          "type": "string",
                          "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                          "description": "Repesents the patient pension card expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "example": "2021-04",
                          "nullable": true
                        },
                        "dvaNo": {
                          "type": "string",
                          "maxLength": 9,
                          "description": "Repesents the patient DVA no.",
                          "nullable": true
                        },
                        "dvaConditions": {
                          "type": "string",
                          "description": "Repesents the patient DVA conditions.",
                          "maxLength": 300,
                          "nullable": true
                        },
                        "dvaCardType": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "description": "Repesents the patient DVA card type.\n\n* `1` - Gold\n* `2` - White\n* `3` - Lilac\n* `4` - Orange\n* `5` - Blue",
                          "nullable": true
                        },
                        "safetyNetNo": {
                          "type": "string",
                          "maxLength": 14,
                          "description": "Repesents the patient safety net no.",
                          "nullable": true
                        },
                        "ihiNo": {
                          "type": "string",
                          "description": "Repesents the patient ihi no.",
                          "maxLength": 16,
                          "nullable": true
                        },
                        "ihiNoStatusCode": {
                          "type": "integer",
                          "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                          "nullable": true
                        },
                        "ihiRecordStatusCode": {
                          "type": "integer",
                          "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                          "nullable": true
                        },
                        "eprescribing": {
                          "type": "boolean",
                          "description": "Flag indicates whether to set eprescribing.",
                          "nullable": true
                        },
                        "research": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3
                          ],
                          "description": "* `1` - No\n* `2` - Conditional\n* `3` - Yes",
                          "nullable": true
                        },
                        "racfId": {
                          "type": "string",
                          "maxLength": 10,
                          "description": "Represents Aged care id.",
                          "nullable": true
                        },
                        "providerId": {
                          "type": "string",
                          "description": "A GUID that represents the health insurance provider id",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "format": "uuid",
                          "nullable": true
                        },
                        "healthFundNo": {
                          "type": "string",
                          "maxLength": 15,
                          "description": "Represents the health fund no.",
                          "nullable": true
                        },
                        "healthFundUPI": {
                          "type": "string",
                          "maxLength": 2,
                          "description": "Represents the health fund no upi.",
                          "nullable": true
                        },
                        "healthFundExpiryDate": {
                          "type": "string",
                          "description": "Represents the health fund expiry date.Expiry date should not be in the past",
                          "default": "YYYY-MM",
                          "nullable": true
                        },
                        "appointmentIntervalCode": {
                          "type": "integer",
                          "description": "Represents the appointment interval duration .Call the below endpoint to get the patient title lookup\n/code-system/appointmentIntervalCode"
                        },
                        "appointmentNotes": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Appointment note or description."
                        }
                      }
                    },
                    {
                      "properties": {
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      },
                      "required": [
                        "createdBy",
                        "createdDateTime",
                        "updatedBy",
                        "updatedDateTime"
                      ]
                    }
                  ],
                  "x-examples": {
                    "example-1": {
                      "id": "string",
                      "patientId": "7ce1bf10-1084-4820-9112-0bff5b89ca64",
                      "chartNo": "string",
                      "accountTypeId": "string",
                      "accountPayerCode": 1,
                      "medicareAlias": true,
                      "medicareFirstNameAlias": "string",
                      "medicareSurNameAlias": "string",
                      "medicareAddress": 1,
                      "medicareNo": "stringstri",
                      "medicareIRN": "s",
                      "medicareExpiry": "04/2021",
                      "pensionCardtype": 1,
                      "pensionCardno": "string",
                      "pensionCardExpiry": "04/2021",
                      "dvaNo": "string",
                      "dvaConditions": "string",
                      "dvaCardtype": 1,
                      "safetyNetNo": "string",
                      "ihiNo": "string",
                      "ihiNoStatusCode": 0,
                      "ihiRecordStatusCode": 0,
                      "eprescribing": true,
                      "research": 1,
                      "racfid": "string",
                      "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                      "healthFundNo": "string",
                      "healthFundUPI": "st",
                      "healthFundExpiryDate": "MM/YYYY",
                      "appointmentIntervalCode": 0,
                      "appointmentNotes": "string",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "string"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "type": "object"
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "c4476046-3508-11eb-adbc-a75fbd464ca9",
                      "chartNo": "98765",
                      "accountPayerCode": 4,
                      "accountTypeId": "74ccca27-19a5-e511-810a-0699dab61555",
                      "medicareAlias": true,
                      "medicareFirstNameAlias": "Advance",
                      "medicareSurNameAlias": "Centre",
                      "medicareAddress": 1,
                      "medicareNo": "2123456702",
                      "medicareIRN": null,
                      "medicareExpiry": "2024-12",
                      "pensionCardtype": null,
                      "pensionCardno": null,
                      "pensionCardExpiry": "2023-12",
                      "dvaNo": "12245",
                      "dvaConditions": "test",
                      "dvaCardtype": null,
                      "safetyNetNo": "33",
                      "ihiNo": "8003607302353018",
                      "ihiNoStatusCode": null,
                      "ihiRecordStatusCode": null,
                      "eprescribing": true,
                      "research": 1,
                      "racfId": "312341",
                      "providerId": null,
                      "healthFundNo": "9283947281",
                      "healthFundUPI": null,
                      "healthFundExpiryDate": "2088-10",
                      "appointmentIntervalCode": 4,
                      "appointmentNotes": null,
                      "createdBy": "90f98acc-54fc-11e9-ac81-f34ea28e7986",
                      "createdDateTime": "2020-12-03T08:42:13.392Z",
                      "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "updatedDateTime": "2020-12-18T16:24:42.770Z"
                    }
                  },
                  "Response With Mandatory Fields": {
                    "value": {
                      "id": "7a9c130a-59fd-11eb-b862-b395cae8fc5d",
                      "chartNo": null,
                      "accountPayerCode": null,
                      "accountTypeId": null,
                      "medicareAlias": false,
                      "medicareFirstNameAlias": null,
                      "medicareSurNameAlias": null,
                      "medicareAddress": null,
                      "medicareNo": null,
                      "medicareIRN": null,
                      "medicareExpiry": null,
                      "pensionCardtype": null,
                      "pensionCardno": null,
                      "pensionCardExpiry": null,
                      "dvaNo": null,
                      "dvaConditions": null,
                      "dvaCardtype": null,
                      "safetyNetNo": null,
                      "ihiNo": null,
                      "ihiNoStatusCode": null,
                      "ihiRecordStatusCode": null,
                      "eprescribing": false,
                      "research": null,
                      "racfId": null,
                      "providerId": null,
                      "healthFundNo": null,
                      "healthFundUPI": null,
                      "healthFundExpiryDate": null,
                      "appointmentIntervalCode": null,
                      "appointmentNotes": null,
                      "createdBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "createdDateTime": "2021-01-19T09:24:38.356Z",
                      "updatedBy": "7dbf8c48-9ad2-11e8-b340-f7d6cf1f5854",
                      "updatedDateTime": "2021-01-19T09:24:38.356Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Errors Response": {
                    "value": {
                      "message": "Rule validation error",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "ihiNoStatusCode",
                          "value": "11",
                          "message": "IHI no status does not exist."
                        },
                        {
                          "parameter": "ihiRecordStatusCode",
                          "value": "12",
                          "message": "IHI record status does not exist."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied Response": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "Unexpected Error",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update patient setting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PatientSettingsCreate",
                "type": "object",
                "description": "PatientSettings Model",
                "x-examples": {
                  "PatientSettings Request": {
                    "chartNo": "string",
                    "accountPayerCode": 1,
                    "accountTypeId": "string",
                    "medicareAlias": true,
                    "medicareFirstNameAlias": "string",
                    "medicareSurNameAlias": "string",
                    "medicareAddress": 1,
                    "medicareNo": "stringstri",
                    "medicareIRN": "s",
                    "medicareExpiry": "2021-04",
                    "pensionCardtype": 1,
                    "pensionCardno": "string",
                    "pensionCardExpiry": "2021-04",
                    "dvaNo": "string",
                    "dvaConditions": "string",
                    "dvaCardType": 1,
                    "safetyNetNo": "string",
                    "ihiNo": "string",
                    "ihiNoStatusCode": 0,
                    "ihiRecordStatusCode": 0,
                    "eprescribing": true,
                    "research": 1,
                    "racfId": "string",
                    "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                    "healthFundNo": "string",
                    "healthFundUPI": "st",
                    "healthFundExpiryDate": "2023-04",
                    "appointmentIntervalCode": 0,
                    "appointmentNotes": "string"
                  }
                },
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "patientId": {
                    "type": "string",
                    "description": "A GUID that represents the patient id.",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "nullable": false
                  },
                  "chartNo": {
                    "type": "string",
                    "maxLength": 20,
                    "description": "Represents the chart no.",
                    "nullable": true
                  },
                  "accountTypeId": {
                    "type": "string",
                    "description": "A GUID that represents the schedule id.",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "nullable": true
                  },
                  "accountPayerCode": {
                    "title": "AccountPayer",
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "description": "Represents the account payer information. Call the below endpoint to get the patient title lookup\n/code-system/accountPayerCode\n",
                    "nullable": true
                  },
                  "medicareAlias": {
                    "type": "boolean",
                    "description": "Flag indicates whether to use alias for medicare purpose",
                    "nullable": true
                  },
                  "medicareFirstNameAlias": {
                    "type": "string",
                    "maxLength": 40,
                    "description": "Represents the first name alias for medicare purpose.",
                    "nullable": true
                  },
                  "medicareSurNameAlias": {
                    "type": "string",
                    "maxLength": 40,
                    "description": "Represents the sur name alias for medicare purpose.",
                    "nullable": true
                  },
                  "medicareAddress": {
                    "type": "integer",
                    "enum": [
                      1,
                      2
                    ],
                    "description": "Represents the address to be used for medicare purpose.\n\n* `1` - Primary\n* `2` - Secondary",
                    "nullable": true
                  },
                  "medicareNo": {
                    "type": "string",
                    "description": "Represents the patient medicare no.",
                    "minLength": 10,
                    "maxLength": 10,
                    "nullable": true
                  },
                  "medicareIRN": {
                    "type": "string",
                    "description": "Represents the patient medicare no IRN.Medicare no should be 10 digits in length",
                    "minLength": 1,
                    "maxLength": 1,
                    "nullable": true
                  },
                  "medicareExpiry": {
                    "type": "string",
                    "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                    "description": "Represents the patient medicare card expiry date.Expiry date should not be in the past",
                    "default": "YYYY-MM",
                    "example": "2021-04",
                    "nullable": true
                  },
                  "pensionCardtype": {
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "description": "Represents the patient pension card type\n\n* `1` - Pensioner Concession Card\n* `2` - Health Care Card\n* `3` - Commonwealth Seniors Card\n* `4` - Other",
                    "nullable": true
                  },
                  "pensionCardno": {
                    "type": "string",
                    "maxLength": 15,
                    "description": "Represents the patient pension card no.",
                    "nullable": true
                  },
                  "pensionCardExpiry": {
                    "type": "string",
                    "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                    "description": "Repesents the patient pension card expiry date.Expiry date should not be in the past",
                    "default": "YYYY-MM",
                    "example": "2021-04",
                    "nullable": true
                  },
                  "dvaNo": {
                    "type": "string",
                    "maxLength": 9,
                    "description": "Repesents the patient DVA no.",
                    "nullable": true
                  },
                  "dvaConditions": {
                    "type": "string",
                    "description": "Repesents the patient DVA conditions.",
                    "maxLength": 300,
                    "nullable": true
                  },
                  "dvaCardType": {
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "description": "Repesents the patient DVA card type.\n\n* `1` - Gold\n* `2` - White\n* `3` - Lilac\n* `4` - Orange\n* `5` - Blue",
                    "nullable": true
                  },
                  "safetyNetNo": {
                    "type": "string",
                    "maxLength": 14,
                    "description": "Repesents the patient safety net no.",
                    "nullable": true
                  },
                  "ihiNo": {
                    "type": "string",
                    "description": "Repesents the patient ihi no.",
                    "maxLength": 16,
                    "nullable": true
                  },
                  "ihiNoStatusCode": {
                    "type": "integer",
                    "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                    "nullable": true
                  },
                  "ihiRecordStatusCode": {
                    "type": "integer",
                    "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                    "nullable": true
                  },
                  "eprescribing": {
                    "type": "boolean",
                    "description": "Flag indicates whether to set eprescribing.",
                    "nullable": true
                  },
                  "research": {
                    "type": "integer",
                    "enum": [
                      1,
                      2,
                      3
                    ],
                    "description": "* `1` - No\n* `2` - Conditional\n* `3` - Yes",
                    "nullable": true
                  },
                  "racfId": {
                    "type": "string",
                    "maxLength": 10,
                    "description": "Represents Aged care id.",
                    "nullable": true
                  },
                  "providerId": {
                    "type": "string",
                    "description": "A GUID that represents the health insurance provider id",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "format": "uuid",
                    "nullable": true
                  },
                  "healthFundNo": {
                    "type": "string",
                    "maxLength": 15,
                    "description": "Represents the health fund no.",
                    "nullable": true
                  },
                  "healthFundUPI": {
                    "type": "string",
                    "maxLength": 2,
                    "description": "Represents the health fund no upi.",
                    "nullable": true
                  },
                  "healthFundExpiryDate": {
                    "type": "string",
                    "description": "Represents the health fund expiry date.Expiry date should not be in the past",
                    "default": "YYYY-MM",
                    "nullable": true
                  },
                  "appointmentIntervalCode": {
                    "type": "integer",
                    "description": "Represents the appointment interval duration .Call the below endpoint to get the patient title lookup\n/code-system/appointmentIntervalCode"
                  },
                  "appointmentNotes": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Appointment note or description."
                  }
                }
              },
              "examples": {
                "Request": {
                  "value": {
                    "chartNo": "98765",
                    "accountPayerCode": 4,
                    "accountTypeId": "74ccca27-19a5-e511-810a-0699dab61555",
                    "medicareAlias": true,
                    "medicareFirstNameAlias": "Advance",
                    "medicareSurNameAlias": "Centre",
                    "medicareAddress": 1,
                    "medicareNo": "2123456702",
                    "medicareIRN": null,
                    "medicareExpiry": "2024-12",
                    "pensionCardtype": null,
                    "pensionCardno": null,
                    "pensionCardExpiry": "2023-12",
                    "dvaNo": "12245",
                    "dvaConditions": "test",
                    "dvaCardtype": null,
                    "safetyNetNo": "33",
                    "ihiNo": "8003607302353018",
                    "ihiNoStatusCode": null,
                    "ihiRecordStatusCode": null,
                    "eprescribing": true,
                    "research": 1,
                    "racfId": "312341",
                    "providerId": null,
                    "healthFundNo": "9283947281",
                    "healthFundUPI": null,
                    "healthFundExpiryDate": "2088-10",
                    "appointmentIntervalCode": 4,
                    "appointmentNotes": null
                  }
                },
                "Request With Mandatory Fields": {
                  "value": {
                    "chartNo": null,
                    "accountPayerCode": null,
                    "accountTypeId": null,
                    "medicareAlias": null,
                    "medicareFirstNameAlias": null,
                    "medicareSurNameAlias": null,
                    "medicareAddress": null,
                    "medicareNo": null,
                    "medicareIRN": null,
                    "medicareExpiry": null,
                    "pensionCardtype": null,
                    "pensionCardno": null,
                    "pensionCardExpiry": null,
                    "dvaNo": null,
                    "dvaConditions": null,
                    "dvaCardtype": null,
                    "safetyNetNo": null,
                    "ihiNo": null,
                    "ihiNoStatusCode": null,
                    "ihiRecordStatusCode": null,
                    "eprescribing": null,
                    "research": null,
                    "racfId": null,
                    "providerId": null,
                    "healthFundNo": null,
                    "healthFundUPI": null,
                    "healthFundExpiryDate": null,
                    "appointmentIntervalCode": null,
                    "appointmentNotes": null
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "chartNo": "12345",
                    "accountTypeId": "74ccca27-19a5-e511-810a-0699dab61555",
                    "accountPayerCode": 5,
                    "medicareAlias": true,
                    "medicareFirstNameAlias": "Advance",
                    "medicareSurNameAlias": "Centre",
                    "medicareAddress": 1,
                    "medicareNo": "2123456702",
                    "medicareIRN": "3",
                    "medicareExpiry": "2024-12",
                    "pensionCardtype": 2,
                    "pensionCardno": "test",
                    "pensionCardExpiry": "2023-12",
                    "dvaNo": "12245",
                    "dvaConditions": "test",
                    "dvaCardType": 1,
                    "safetyNetNo": "33",
                    "ihiNo": "8003607302353018",
                    "ihiNoStatusCode": 11,
                    "ihiRecordStatusCode": 12,
                    "eprescribing": true,
                    "research": 1,
                    "racfId": "312341",
                    "healthFundNo": "9283947281",
                    "healthFundUPI": "3",
                    "healthFundExpiryDate": "2088-10",
                    "appointmentIntervalCode": 4,
                    "appointmentNotes": "test"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Settings"
        ]
      }
    },
    "/v1/patients/exist": {
      "get": {
        "summary": "Check patient exists",
        "tags": [
          "Demographics"
        ],
        "responses": {
          "200": {
            "description": "A successfully checked patient.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "format": "uuid",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The patient identifier."
                      }
                    }
                  }
                },
                "examples": {
                  "Single Patient Matched": {
                    "value": [
                      {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                      }
                    ]
                  },
                  "Multiple Patients Matched": {
                    "value": [
                      {
                        "id": "197f6eca-6276-4993-bfeb-53cbbbba6f08"
                      },
                      {
                        "id": "297f6eca-6276-4993-bfeb-53cbbbba6f07"
                      },
                      {
                        "id": "397f6eca-6276-4993-bfeb-53cbbbba6f06"
                      }
                    ]
                  },
                  "No Patient Matched": {
                    "value": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "The error code.",
                      "example": "400"
                    },
                    "errorMessage": {
                      "type": "string",
                      "description": "The error message.",
                      "example": "Invalid date format"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "The success flag."
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "400",
                      "errorMessage": "Invalid date format",
                      "success": false
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "The error code.",
                      "example": "exception.general"
                    },
                    "errorMessage": {
                      "type": "string",
                      "description": "The error message.",
                      "example": "Oops! Appears that an error has occured. Please refresh the page and try again"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "The success flag."
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "exception.general",
                      "errorMessage": "Oops! Appears that an error has occured. Please refresh the page and try again.",
                      "success": false
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patients-exist",
        "description": "To check if patient exists.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "example": "Jane"
            },
            "in": "query",
            "name": "firstName",
            "description": "The patient firstname."
          },
          {
            "schema": {
              "type": "string",
              "example": "Smith"
            },
            "in": "query",
            "name": "lastName",
            "description": "The patient lastname."
          },
          {
            "schema": {
              "type": "string",
              "example": "16/01/1990"
            },
            "in": "query",
            "name": "dob",
            "description": "The patient date of birth. Accepted date format is dd/MM/yyyy."
          },
          {
            "schema": {
              "type": "string",
              "format": "email",
              "example": "jane@example.com"
            },
            "in": "query",
            "name": "email",
            "description": "The patient email."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "workNumber",
            "description": "The patient work contact number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "homeNumber",
            "description": "The patient home contact number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "mobileNumber",
            "description": "The patient mobile contact number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "medicareNumber",
            "description": "The patient medicare number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "medicareNumberIRN",
            "description": "The patient medicare number IRN. Mandatory if medicareNumber parameter is not empty."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "chartNumber",
            "description": "The patient chart number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ihiNumber",
            "description": "The patient IHI number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "address",
            "description": "The patient address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "postcode",
            "description": "The patient post code address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "suburb",
            "description": "The patient city/suburb address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "state",
            "description": "The patient state address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "country",
            "description": "The patient country address."
          }
        ]
      },
      "parameters": []
    },
    "/v1/patients/search": {
      "get": {
        "summary": "Patient search",
        "tags": [
          "Demographics"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientPage",
                  "type": "object",
                  "x-examples": {
                    "Full Response with pagination": {
                      "data": [
                        {
                          "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                          "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                          "titleId": 315890000,
                          "firstName": "Timothy",
                          "lastName": "Mark",
                          "middleName": "David",
                          "preferredName": "Tim",
                          "previouslyKnownAs": "Jake",
                          "fullName": "Timothy Mark",
                          "genderCode": 2,
                          "dob": "8/12/1970",
                          "estimated": true,
                          "oneNameOnly": "false",
                          "dateOfDeath": "12/01/2010",
                          "causeOfDeath": "Cancer",
                          "patientStatusCode": 2,
                          "ethnicityCode": 55,
                          "esl": true,
                          "atsiId": 4,
                          "ctgCoPaymentRelief": true,
                          "placeOfBirth": "Sydney",
                          "skinCode": 16,
                          "languageSpokenAtHome": 0,
                          "homePhone": 298761234,
                          "mobilePhone": "0413324123",
                          "workPhone": 298671234,
                          "email": "Timothy.Mark@nedirecords.com",
                          "contactMethod": 1,
                          "note": "Patient had a mild fever",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "first": true,
                      "last": false,
                      "totalPages": 3,
                      "totalElements": 29,
                      "numberOfElements": 10,
                      "size": 10,
                      "page": 0
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PatientResponse",
                        "description": "The Patient Response properties that are included for a patient",
                        "type": "object",
                        "x-examples": {
                          "Full Patient Response": {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "gender": 2,
                            "dob": "1970-12-12",
                            "estimated": true,
                            "oneNameOnly": "false",
                            "dateOfDeath": "2018-03-04",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsi": 1,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 1,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          }
                        },
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                            "format": "uuid",
                            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                          },
                          "defaultPracticeId": {
                            "type": "string",
                            "description": "Default practice id where the patient details are created",
                            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "format": "uuid",
                            "nullable": true
                          },
                          "usualDoctorId": {
                            "type": "string",
                            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                            "description": "A user id that represents the usual doctor for the patient",
                            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "format": "uuid",
                            "nullable": true
                          },
                          "titleCode": {
                            "type": "integer",
                            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                            "example": 315890000
                          },
                          "firstName": {
                            "type": "string",
                            "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                            "minLength": 1,
                            "maxLength": 40,
                            "example": "Timothy",
                            "nullable": true
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Represents patient last name",
                            "minLength": 1,
                            "maxLength": 40,
                            "example": "Mark"
                          },
                          "middleName": {
                            "type": "string",
                            "description": "Represents the patient middle name",
                            "minLength": 0,
                            "maxLength": 40,
                            "example": "David",
                            "nullable": true
                          },
                          "preferredName": {
                            "type": "string",
                            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                            "minLength": 0,
                            "maxLength": 40,
                            "example": "Tim",
                            "nullable": true
                          },
                          "previouslyKnownAs": {
                            "type": "string",
                            "description": "Represents the patient previously known name",
                            "maxLength": 40,
                            "example": "Jake",
                            "minLength": 0,
                            "nullable": true
                          },
                          "fullName": {
                            "type": "string",
                            "description": "Represents the patient full name",
                            "nullable": true
                          },
                          "dob": {
                            "type": "string",
                            "title": "DateOfBirth",
                            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                            "format": "date",
                            "x-examples": {
                              "Date of Birth": "1970-01-10"
                            },
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "estimated": {
                            "type": "boolean",
                            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                            "nullable": true
                          },
                          "oneNameOnly": {
                            "type": "boolean",
                            "example": false,
                            "description": "The flag is set to true, if the patient has one name only",
                            "nullable": true
                          },
                          "dateOfDeath": {
                            "type": "string",
                            "nullable": true,
                            "title": "DateOfDeath",
                            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                            "default": "yyyy-MM-dd",
                            "example": "2018-12-01",
                            "x-examples": {
                              "Date Of Death Format": "2018-12-01"
                            },
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "causeOfDeath": {
                            "type": "string",
                            "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                            "example": "Cancer",
                            "maxLength": 300,
                            "nullable": true
                          },
                          "patientStatusCode": {
                            "type": "integer",
                            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                            "example": 2,
                            "nullable": true
                          },
                          "ethnicityCode": {
                            "type": "integer",
                            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                            "example": 55,
                            "nullable": true
                          },
                          "englishAsSecondLanguage": {
                            "type": "boolean",
                            "description": "If english is the patient second language the flag is set as true else it is set to false",
                            "nullable": true
                          },
                          "atsiStatus": {
                            "type": "integer",
                            "title": "Atsi",
                            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                            "example": 4,
                            "nullable": true,
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "ctgCoPaymentRelief": {
                            "type": "boolean",
                            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "nullable": true
                          },
                          "placeOfBirth": {
                            "type": "string",
                            "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "example": "Sydney",
                            "maxLength": 100,
                            "nullable": true
                          },
                          "skinCode": {
                            "type": "integer",
                            "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "example": 16,
                            "nullable": true
                          },
                          "languageSpokenAtHome": {
                            "title": "LanguageSpokenAtHome",
                            "type": "integer",
                            "nullable": true,
                            "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "x-examples": {
                              "example-1": 1
                            },
                            "x-internal": false
                          },
                          "homePhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "HomePhone",
                            "x-examples": {
                              "HomePhone Number": "0298761234"
                            },
                            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "maxLength": 10,
                            "example": "0298761234",
                            "x-internal": false,
                            "minLength": 8
                          },
                          "mobilePhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "MobilePhone",
                            "x-examples": {
                              "MobileNumber": "0413324123"
                            },
                            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "example": "0413324123",
                            "maxLength": 10,
                            "x-internal": false,
                            "minLength": 8
                          },
                          "workPhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "OfficePhone",
                            "x-examples": {
                              "OfficePhoneNumber": "0298671234"
                            },
                            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "example": "0298671234",
                            "maxLength": 10,
                            "x-internal": false,
                            "minLength": 8
                          },
                          "email": {
                            "type": "string",
                            "nullable": true,
                            "title": "Email",
                            "description": "Represents the patient email id.",
                            "x-examples": {
                              "Email": "Timothy.Mark@nedirecords.com"
                            },
                            "x-tags": [
                              "Common Models"
                            ],
                            "format": "email",
                            "example": "Timothy.Mark@nedirecords.com",
                            "maxLength": 100,
                            "x-internal": false
                          },
                          "contactMethod": {
                            "title": "PatientContactMethod",
                            "type": "number",
                            "nullable": true,
                            "x-examples": {
                              "example-1": 1
                            },
                            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "notes": {
                            "type": "string",
                            "description": "Any comments or notes can be recorded in this field",
                            "maxLength": 500,
                            "example": "Patient had a mild fever",
                            "nullable": true
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean",
                      "description": "Showing the first page."
                    },
                    "last": {
                      "type": "boolean",
                      "description": "Showing the last page."
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total Pages"
                    },
                    "totalElements": {
                      "description": "Total records",
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer",
                      "description": "Total records"
                    },
                    "size": {
                      "description": "Number of records in a page",
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer",
                      "description": "current page number"
                    }
                  },
                  "description": "Get all patients with pagination",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Patient with firstName \"Timothy\" and lastName \"Mark\"": {
                    "value": {
                      "data": [
                        {
                          "id": "c4476046-3508-11eb-adbc-a75fbd464ca9",
                          "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                          "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                          "titleCode": 315890000,
                          "firstName": "Timothy",
                          "lastName": "Mark",
                          "middleName": "David",
                          "preferredName": "Tim",
                          "previouslyKnownAs": "Jake",
                          "fullName": null,
                          "gender": 2,
                          "dob": "1970-01-10",
                          "estimated": null,
                          "oneNameOnly": false,
                          "dateOfDeath": "2018-12-01",
                          "causeOfDeath": "Cancer",
                          "patientStatusCode": 2,
                          "ethnicityCode": 55,
                          "englishAsSecondLanguage": null,
                          "atsiStatus": 4,
                          "ctgCoPaymentRelief": null,
                          "placeOfBirth": "Sydney",
                          "skinCode": 16,
                          "languageSpokenAtHome": null,
                          "homePhone": 298761234,
                          "mobilePhone": "0413324123",
                          "workPhone": 298671234,
                          "email": "Timothy.Mark@nedirecords.com",
                          "contactMethod": null,
                          "notes": "Patient had a mild fever",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "string",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "string"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 1,
                      "page": 1
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Example": {
                    "value": {
                      "message": "search.search: rsql query contain non searchable fields",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "search.search",
                          "value": "patientName==Bob",
                          "message": "rsql query contain non searchable fields"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patients-search",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "The RSQL syntax for patient advanced search.\n\nOnly following fields are enabled for advanced search:\n- firstName\n- lastName\n- city\n- postcode\n- stateCode\n- countryCode\n- gender\n- dob\n- homePhone\n- workPhone\n- mobilePhone\n- medicareNo\n- medicareIRN - must also provide medicareNo\n- medicareExpiry\n- activeStatus - default 1\n- defaultPracticeId\n- usualDoctorId\n- patientStatusCode"
          },
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "description": "To perform advanced search on patient resource"
      },
      "parameters": []
    },
    "/v1/upload/patients/{patient_id}/correspondences/inbounds": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "get": {
        "summary": "Get correspondence inbounds",
        "operationId": "get-api-patients-patient_id-correspondences-inbounds",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          },
          {
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2
              ]
            },
            "in": "query",
            "name": "letterStatus",
            "description": "Represents the correspondence status."
          },
          {
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ]
            },
            "in": "query",
            "name": "category",
            "description": "Represents the category of the inbound correspondence."
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
            },
            "in": "query",
            "name": "senderId",
            "description": "Represents the sender Id."
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
            },
            "in": "query",
            "name": "recipientId",
            "description": "Represents the user Id."
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "importDate",
            "description": "Represents the correspondence import date"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceInboundPage",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "CorrespondenceInbound",
                        "type": "object",
                        "x-tags": [
                          "Other"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1,
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "description": "Inbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                          },
                          "practiceId": {
                            "type": "string",
                            "minLength": 1,
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "description": "Represents the practice Id."
                          },
                          "patientId": {
                            "type": "string",
                            "minLength": 1,
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "description": "Represents the patient Id."
                          },
                          "importDate": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the correspondence import date",
                            "format": "date",
                            "pattern": "YYYY-MM-DD"
                          },
                          "category": {
                            "type": "integer",
                            "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          },
                          "subject": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the subject of the correspondence",
                            "maxLength": 100
                          },
                          "senderType": {
                            "type": "integer",
                            "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                            "enum": [
                              1,
                              2,
                              3,
                              4
                            ]
                          },
                          "senderId": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                          },
                          "recipientId": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the user Id.",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                          },
                          "letterStatus": {
                            "type": "integer",
                            "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                            "enum": [
                              1,
                              2
                            ],
                            "nullable": true
                          },
                          "checkedDate": {
                            "type": "string",
                            "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
                            "format": "date",
                            "pattern": "YYYY-MM-DD",
                            "nullable": true
                          },
                          "checkedById": {
                            "type": "string",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
                            "nullable": true
                          },
                          "attachmentUrl": {
                            "type": "string",
                            "description": "Represents the file url.",
                            "nullable": true
                          },
                          "notes": {
                            "type": "string",
                            "description": "Represents any additional details on the correpondence.",
                            "maxLength": 500,
                            "nullable": true
                          },
                          "originatorName": {
                            "type": "string",
                            "description": "Represents the correspondence originator name.",
                            "nullable": true
                          },
                          "senderName": {
                            "type": "string",
                            "description": "Represents the correspondence sender name.",
                            "nullable": true
                          },
                          "recipientName": {
                            "type": "string",
                            "description": "Represents the correspondence recipient name.",
                            "nullable": true
                          },
                          "checkedByName": {
                            "type": "string",
                            "description": "Represents the user who has checked the correspondence.",
                            "nullable": true
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "required": [
                          "id",
                          "practiceId",
                          "patientId",
                          "importDate",
                          "category",
                          "subject",
                          "senderType",
                          "senderId",
                          "recipientId",
                          "createdBy",
                          "createdDateTime",
                          "updatedBy",
                          "updatedDateTime"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalElements": {
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Correspondence Inbound Search Response": {
                    "value": {
                      "data": [
                        {
                          "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                          "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                          "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                          "importDate": "2021-02-10",
                          "category": 1,
                          "subject": "Correspondence request",
                          "senderType": 2,
                          "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                          "letterStatus": 2,
                          "checkedDate": null,
                          "checkedById": null,
                          "attachmentUrl": "https://locationtofile/attachment.pdf",
                          "notes": "additional notes",
                          "originatorName": "Dr Doreen Bean",
                          "senderName": "Dr Doreen Bean",
                          "recipientName": "Dr Brenda Reed",
                          "checkedByName": null,
                          "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "createdDateTime": "2020-12-15T08:07:33.601+0000",
                          "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                        },
                        {
                          "id": "c621e95f-1947-4a8a-8dfb-585ea79f2cdf",
                          "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                          "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                          "importDate": "2021-02-12",
                          "category": 1,
                          "subject": "Correspondence result",
                          "senderType": 2,
                          "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                          "letterStatus": 1,
                          "checkedDate": "2021-02-14",
                          "checkedById": "5e251550-b7e4-44fe-a695-76758d493b02",
                          "attachmentUrl": null,
                          "notes": "additional notes 2",
                          "originatorName": "Dr Doreen Bean",
                          "senderName": "Dr Doreen Bean",
                          "recipientName": "Dr Brenda Reed",
                          "checkedByName": "Dr Brenda Reed",
                          "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "createdDateTime": "2020-12-15T08:07:33.601+0000",
                          "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findAllByPatientId.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPatientId.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Inbound"
        ],
        "description": "Get correspondence inbound by patient_id"
      },
      "post": {
        "summary": "Create correspondence inbound",
        "operationId": "post-api-patients-id-correspondences-inbounds",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "default": "multipart/form-data"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Content type "
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceInbound",
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Inbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                    },
                    "practiceId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the practice Id."
                    },
                    "patientId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the patient Id."
                    },
                    "importDate": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the correspondence import date",
                      "format": "date",
                      "pattern": "YYYY-MM-DD"
                    },
                    "category": {
                      "type": "integer",
                      "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "subject": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the subject of the correspondence",
                      "maxLength": 100
                    },
                    "senderType": {
                      "type": "integer",
                      "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                      "enum": [
                        1,
                        2,
                        3,
                        4
                      ]
                    },
                    "senderId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "recipientId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user Id.",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "letterStatus": {
                      "type": "integer",
                      "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                      "enum": [
                        1,
                        2
                      ],
                      "nullable": true
                    },
                    "checkedDate": {
                      "type": "string",
                      "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
                      "format": "date",
                      "pattern": "YYYY-MM-DD",
                      "nullable": true
                    },
                    "checkedById": {
                      "type": "string",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
                      "nullable": true
                    },
                    "attachmentUrl": {
                      "type": "string",
                      "description": "Represents the file url.",
                      "nullable": true
                    },
                    "notes": {
                      "type": "string",
                      "description": "Represents any additional details on the correpondence.",
                      "maxLength": 500,
                      "nullable": true
                    },
                    "originatorName": {
                      "type": "string",
                      "description": "Represents the correspondence originator name.",
                      "nullable": true
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Represents the correspondence sender name.",
                      "nullable": true
                    },
                    "recipientName": {
                      "type": "string",
                      "description": "Represents the correspondence recipient name.",
                      "nullable": true
                    },
                    "checkedByName": {
                      "type": "string",
                      "description": "Represents the user who has checked the correspondence.",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "importDate",
                    "category",
                    "subject",
                    "senderType",
                    "senderId",
                    "recipientId",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                      "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                      "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                      "importDate": "2021-02-10",
                      "category": 1,
                      "subject": "Correspondence request",
                      "senderType": 2,
                      "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                      "letterStatus": 2,
                      "checkedDate": null,
                      "checkedById": null,
                      "attachmentUrl": "https://locationtofile/attachment.pdf",
                      "notes": "additional notes",
                      "originatorName": "Dr Doreen Bean",
                      "senderName": "Dr Doreen Bean",
                      "recipientName": "Dr Brenda Reed",
                      "checkedByName": null,
                      "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "createdDateTime": "2020-12-15T08:07:33.601+0000",
                      "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "senderType",
                          "value": "99",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "title": "CorrespondenceInboundCreate",
                "type": "object",
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "practiceId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the practice Id."
                  },
                  "patientId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the patient Id."
                  },
                  "importDate": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the correspondence import date",
                    "pattern": "YYYY-MM-DD"
                  },
                  "category": {
                    "type": "integer",
                    "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results\n",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "subject": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the subject of the correspondence"
                  },
                  "senderType": {
                    "type": "integer",
                    "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                    "enum": [
                      1,
                      2,
                      3,
                      4
                    ]
                  },
                  "senderId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "recipientId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user Id",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "letterStatus": {
                    "type": "integer",
                    "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                    "enum": [
                      1,
                      2
                    ],
                    "nullable": true
                  },
                  "checkedDate": {
                    "type": "string",
                    "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
                    "pattern": "YYYY-MM-DD",
                    "nullable": true
                  },
                  "checkedById": {
                    "type": "string",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
                    "nullable": true
                  },
                  "attachment": {
                    "type": "string",
                    "description": "Represents the actual file to be imported. File types could be jpg,png or pdf. Max file size is 20 MB.",
                    "format": "binary",
                    "nullable": true
                  },
                  "notes": {
                    "type": "string",
                    "description": "Represents any additional details on the correpondence.",
                    "nullable": true
                  }
                },
                "required": [
                  "practiceId",
                  "patientId",
                  "importDate",
                  "category",
                  "subject",
                  "senderType",
                  "senderId",
                  "recipientId"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence request",
                    "senderType": 2,
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "letterStatus": 2,
                    "checkedDate": null,
                    "checkedById": null,
                    "attachment": "attachment file",
                    "notes": "additional notes"
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence request",
                    "senderType": 99,
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "letterStatus": 2,
                    "checkedDate": null,
                    "checkedById": null,
                    "attachment": "attachment file",
                    "notes": "additional notes"
                  }
                }
              }
            }
          }
        },
        "description": "Create correspondence inbound",
        "tags": [
          "Inbound"
        ]
      }
    },
    "/v1/upload/patients/{patient_id}/correspondences/inbounds/{inbound_id}": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "inbound_id",
          "in": "path",
          "required": true,
          "description": "A GUID that represents the Inbound Id"
        }
      ],
      "get": {
        "summary": "Get correspondence inbound",
        "operationId": "get-api-patients-patient_id-correspondences-inbounds-inbound_id",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceInbound",
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Inbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                    },
                    "practiceId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the practice Id."
                    },
                    "patientId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the patient Id."
                    },
                    "importDate": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the correspondence import date",
                      "format": "date",
                      "pattern": "YYYY-MM-DD"
                    },
                    "category": {
                      "type": "integer",
                      "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "subject": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the subject of the correspondence",
                      "maxLength": 100
                    },
                    "senderType": {
                      "type": "integer",
                      "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                      "enum": [
                        1,
                        2,
                        3,
                        4
                      ]
                    },
                    "senderId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "recipientId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user Id.",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "letterStatus": {
                      "type": "integer",
                      "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                      "enum": [
                        1,
                        2
                      ],
                      "nullable": true
                    },
                    "checkedDate": {
                      "type": "string",
                      "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
                      "format": "date",
                      "pattern": "YYYY-MM-DD",
                      "nullable": true
                    },
                    "checkedById": {
                      "type": "string",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
                      "nullable": true
                    },
                    "attachmentUrl": {
                      "type": "string",
                      "description": "Represents the file url.",
                      "nullable": true
                    },
                    "notes": {
                      "type": "string",
                      "description": "Represents any additional details on the correpondence.",
                      "maxLength": 500,
                      "nullable": true
                    },
                    "originatorName": {
                      "type": "string",
                      "description": "Represents the correspondence originator name.",
                      "nullable": true
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Represents the correspondence sender name.",
                      "nullable": true
                    },
                    "recipientName": {
                      "type": "string",
                      "description": "Represents the correspondence recipient name.",
                      "nullable": true
                    },
                    "checkedByName": {
                      "type": "string",
                      "description": "Represents the user who has checked the correspondence.",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "importDate",
                    "category",
                    "subject",
                    "senderType",
                    "senderId",
                    "recipientId",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Correspondence Inbound get Response": {
                    "value": {
                      "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                      "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                      "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                      "importDate": "2021-02-10",
                      "category": 1,
                      "subject": "Correspondence request",
                      "senderType": 2,
                      "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                      "letterStatus": 2,
                      "checkedDate": null,
                      "checkedById": null,
                      "attachmentUrl": "https://locationtofile/attachment.pdf",
                      "notes": "additional notes",
                      "originatorName": "Dr Doreen Bean",
                      "senderName": "Dr Doreen Bean",
                      "recipientName": "Dr Brenda Reed",
                      "checkedByName": null,
                      "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "createdDateTime": "2020-12-15T08:07:33.601+0000",
                      "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Inbound"
        ],
        "description": "Get correspondence inbound by Patient Id and Inbound Id"
      },
      "put": {
        "summary": "Update correspondence inbound",
        "operationId": "put-api-patients-id-correspondences-inbounds",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A GUID that represents the patient_id"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "inbound_id",
            "in": "path",
            "required": true,
            "description": "A GUID that represents the Inbound Id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "default": "multipart/form-data"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Content Type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceInbound",
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Inbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                    },
                    "practiceId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the practice Id."
                    },
                    "patientId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the patient Id."
                    },
                    "importDate": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the correspondence import date",
                      "format": "date",
                      "pattern": "YYYY-MM-DD"
                    },
                    "category": {
                      "type": "integer",
                      "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "subject": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the subject of the correspondence",
                      "maxLength": 100
                    },
                    "senderType": {
                      "type": "integer",
                      "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                      "enum": [
                        1,
                        2,
                        3,
                        4
                      ]
                    },
                    "senderId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "recipientId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user Id.",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "letterStatus": {
                      "type": "integer",
                      "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                      "enum": [
                        1,
                        2
                      ],
                      "nullable": true
                    },
                    "checkedDate": {
                      "type": "string",
                      "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
                      "format": "date",
                      "pattern": "YYYY-MM-DD",
                      "nullable": true
                    },
                    "checkedById": {
                      "type": "string",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
                      "nullable": true
                    },
                    "attachmentUrl": {
                      "type": "string",
                      "description": "Represents the file url.",
                      "nullable": true
                    },
                    "notes": {
                      "type": "string",
                      "description": "Represents any additional details on the correpondence.",
                      "maxLength": 500,
                      "nullable": true
                    },
                    "originatorName": {
                      "type": "string",
                      "description": "Represents the correspondence originator name.",
                      "nullable": true
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Represents the correspondence sender name.",
                      "nullable": true
                    },
                    "recipientName": {
                      "type": "string",
                      "description": "Represents the correspondence recipient name.",
                      "nullable": true
                    },
                    "checkedByName": {
                      "type": "string",
                      "description": "Represents the user who has checked the correspondence.",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "importDate",
                    "category",
                    "subject",
                    "senderType",
                    "senderId",
                    "recipientId",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                      "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                      "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                      "importDate": "2021-02-10",
                      "category": 1,
                      "subject": "Correspondence request",
                      "senderType": 2,
                      "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                      "letterStatus": 2,
                      "checkedDate": null,
                      "checkedById": null,
                      "attachmentUrl": "https://locationtofile/attachment.pdf",
                      "notes": "additional notes",
                      "originatorName": "Dr Doreen Bean",
                      "senderName": "Dr Doreen Bean",
                      "recipientName": "Dr Brenda Reed",
                      "checkedByName": null,
                      "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "createdDateTime": "2020-12-15T08:07:33.601+0000",
                      "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "senderType",
                          "value": "99",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "title": "CorrespondenceInboundCreate",
                "type": "object",
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "practiceId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the practice Id."
                  },
                  "patientId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the patient Id."
                  },
                  "importDate": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the correspondence import date",
                    "pattern": "YYYY-MM-DD"
                  },
                  "category": {
                    "type": "integer",
                    "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results\n",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "subject": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the subject of the correspondence"
                  },
                  "senderType": {
                    "type": "integer",
                    "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                    "enum": [
                      1,
                      2,
                      3,
                      4
                    ]
                  },
                  "senderId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "recipientId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user Id",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "letterStatus": {
                    "type": "integer",
                    "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                    "enum": [
                      1,
                      2
                    ],
                    "nullable": true
                  },
                  "checkedDate": {
                    "type": "string",
                    "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
                    "pattern": "YYYY-MM-DD",
                    "nullable": true
                  },
                  "checkedById": {
                    "type": "string",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
                    "nullable": true
                  },
                  "attachment": {
                    "type": "string",
                    "description": "Represents the actual file to be imported. File types could be jpg,png or pdf. Max file size is 20 MB.",
                    "format": "binary",
                    "nullable": true
                  },
                  "notes": {
                    "type": "string",
                    "description": "Represents any additional details on the correpondence.",
                    "nullable": true
                  }
                },
                "required": [
                  "practiceId",
                  "patientId",
                  "importDate",
                  "category",
                  "subject",
                  "senderType",
                  "senderId",
                  "recipientId"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence request",
                    "senderType": 2,
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "letterStatus": 2,
                    "checkedDate": null,
                    "checkedById": null,
                    "attachment": "attachment file",
                    "notes": "additional notes"
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence request",
                    "senderType": 99,
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "letterStatus": 2,
                    "checkedDate": null,
                    "checkedById": null,
                    "attachment": "attachment file",
                    "notes": "additional notes"
                  }
                }
              }
            }
          }
        },
        "description": "Update correspondence inbound",
        "tags": [
          "Inbound"
        ]
      },
      "delete": {
        "summary": "Delete correspondence inbound",
        "operationId": "delete-api-patients-id-correspondences-inbounds",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A GUID that represents the patient_id"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "inbound_id",
            "in": "path",
            "required": true,
            "description": "A GUID that represents the Inbound Id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "5987afa6-2976-11eb-b53a-538b0f928ae9",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "delete.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "delete.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete correspondence inbound",
        "tags": [
          "Inbound"
        ]
      }
    },
    "/v1/upload/patients/{patient_id}/correspondences/outbounds": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "get": {
        "summary": "Get correspondence outbounds",
        "operationId": "get-api-patients-patient_id-correspondences-outbounds",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          },
          {
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2
              ]
            },
            "in": "query",
            "name": "letterStatus",
            "description": "Represents the correspondence status."
          },
          {
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ]
            },
            "in": "query",
            "name": "category",
            "description": "Represents the category of the outbound correspondence."
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
            },
            "in": "query",
            "name": "senderId",
            "description": "Represents the sender Id."
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
            },
            "in": "query",
            "name": "recipientId",
            "description": "Represents the user Id."
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "importDate",
            "description": "Represents the correspondence import date"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "outboundStatus",
            "description": "Represents the outbound correspondence status like Pending, Sent, Delivered etc."
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceOutboundPage",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "CorrespondenceOutbound",
                        "type": "object",
                        "x-tags": [
                          "Other"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "minLength": 1,
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "description": "Outbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                          },
                          "practiceId": {
                            "type": "string",
                            "minLength": 1,
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "description": "Represents the practice Id."
                          },
                          "patientId": {
                            "type": "string",
                            "minLength": 1,
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "description": "Represents the patient Id."
                          },
                          "importDate": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the correspondence import date",
                            "format": "date"
                          },
                          "category": {
                            "type": "integer",
                            "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                            "enum": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          },
                          "subject": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the subject of the correspondence",
                            "maxLength": 100
                          },
                          "senderId": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the user Id.\n",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                          },
                          "letterStatus": {
                            "type": "integer",
                            "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                            "enum": [
                              1,
                              2
                            ],
                            "nullable": true
                          },
                          "attachmentUrl": {
                            "type": "string",
                            "description": "Represents the file url.",
                            "nullable": true
                          },
                          "recipientType": {
                            "type": "integer",
                            "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                            "enum": [
                              1,
                              2,
                              3,
                              4
                            ]
                          },
                          "recipientId": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                          },
                          "notes": {
                            "type": "string",
                            "description": "Represents any additional details on the correpondence.",
                            "maxLength": 500,
                            "nullable": true
                          },
                          "htmlContent": {
                            "type": "string",
                            "description": "Represents the correspondence html content.",
                            "nullable": true
                          },
                          "originatorName": {
                            "type": "string",
                            "description": "Represents the correspondence originator name.",
                            "nullable": true
                          },
                          "senderName": {
                            "type": "string",
                            "description": "Represents the correspondence sender name.",
                            "nullable": true
                          },
                          "recipientName": {
                            "type": "string",
                            "description": "Represents the correspondence recipient name.",
                            "nullable": true
                          },
                          "outboundStatus": {
                            "type": "string",
                            "description": "Represents the outbound correspondence status like Pending, Sent, Delivered etc.",
                            "nullable": true
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "required": [
                          "id",
                          "practiceId",
                          "patientId",
                          "importDate",
                          "category",
                          "subject",
                          "senderId",
                          "createdBy",
                          "createdDateTime",
                          "updatedBy",
                          "updatedDateTime"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalElements": {
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Correspondence Outbound Search Response": {
                    "value": {
                      "data": [
                        {
                          "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                          "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                          "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                          "importDate": "2021-02-10",
                          "category": 1,
                          "subject": "Correspondence request",
                          "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "letterStatus": 2,
                          "attachmentUrl": "https://locationtofile/attachment.pdf",
                          "recipientType": 2,
                          "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                          "notes": "additional notes",
                          "htmlContent": "<div class=\"mr-letter-content\">html content</div>",
                          "originatorName": "Dr Doreen Bean",
                          "senderName": "Dr Doreen Bean",
                          "recipientName": "Dr Brenda Reed",
                          "outboundStatus": "Sent",
                          "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "createdDateTime": "2020-12-15T08:07:33.601+0000",
                          "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                        },
                        {
                          "id": "c621e95f-1947-4a8a-8dfb-585ea79f2cdf",
                          "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                          "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                          "importDate": "2021-02-14",
                          "category": 2,
                          "subject": "Correspondence result",
                          "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "letterStatus": 2,
                          "attachmentUrl": null,
                          "recipientType": 1,
                          "recipientId": "13f16322-7af8-46b3-ba63-60a5757dd97b",
                          "notes": "additional notes",
                          "htmlContent": null,
                          "originatorName": "Dr Doreen Bean",
                          "senderName": "Dr Doreen Bean",
                          "recipientName": "Dr Brenda Reed",
                          "outboundStatus": null,
                          "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "createdDateTime": "2020-12-15T08:07:33.601+0000",
                          "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                          "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findAllByPatientId.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPatientId.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Outbound"
        ],
        "description": "Get correspondence outbound by patient_id"
      },
      "post": {
        "summary": "Create correspondence outbound",
        "operationId": "post-api-patients-id-correspondences-outbounds",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "default": "multipart/form-data"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Content type"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceOutbound",
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Outbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                    },
                    "practiceId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the practice Id."
                    },
                    "patientId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the patient Id."
                    },
                    "importDate": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the correspondence import date",
                      "format": "date"
                    },
                    "category": {
                      "type": "integer",
                      "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "subject": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the subject of the correspondence",
                      "maxLength": 100
                    },
                    "senderId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user Id.\n",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "letterStatus": {
                      "type": "integer",
                      "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                      "enum": [
                        1,
                        2
                      ],
                      "nullable": true
                    },
                    "attachmentUrl": {
                      "type": "string",
                      "description": "Represents the file url.",
                      "nullable": true
                    },
                    "recipientType": {
                      "type": "integer",
                      "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                      "enum": [
                        1,
                        2,
                        3,
                        4
                      ]
                    },
                    "recipientId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Represents any additional details on the correpondence.",
                      "maxLength": 500,
                      "nullable": true
                    },
                    "htmlContent": {
                      "type": "string",
                      "description": "Represents the correspondence html content.",
                      "nullable": true
                    },
                    "originatorName": {
                      "type": "string",
                      "description": "Represents the correspondence originator name.",
                      "nullable": true
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Represents the correspondence sender name.",
                      "nullable": true
                    },
                    "recipientName": {
                      "type": "string",
                      "description": "Represents the correspondence recipient name.",
                      "nullable": true
                    },
                    "outboundStatus": {
                      "type": "string",
                      "description": "Represents the outbound correspondence status like Pending, Sent, Delivered etc.",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "importDate",
                    "category",
                    "subject",
                    "senderId",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                      "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                      "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                      "importDate": "2021-02-10",
                      "category": 1,
                      "subject": "Correspondence request",
                      "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "letterStatus": 2,
                      "attachmentUrl": "https://locationtofile/attachment.pdf",
                      "recipientType": 2,
                      "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                      "notes": "additional notes",
                      "htmlContent": "<div class=\"mr-letter-content\">html content</div>",
                      "originatorName": "Dr Doreen Bean",
                      "senderName": "Dr Doreen Bean",
                      "recipientName": "Dr Brenda Reed",
                      "outboundStatus": "Sent",
                      "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "createdDateTime": "2020-12-15T08:07:33.601+0000",
                      "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "letterStatus",
                          "value": "5",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "title": "CorrespondenceOutboundCreate",
                "type": "object",
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "practiceId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the practice Id."
                  },
                  "patientId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the patient Id."
                  },
                  "importDate": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the correspondence import date",
                    "format": "date"
                  },
                  "category": {
                    "type": "integer",
                    "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "subject": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the subject of the correspondence"
                  },
                  "senderId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user Id.\n",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "letterStatus": {
                    "type": "integer",
                    "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                    "enum": [
                      1,
                      2
                    ],
                    "nullable": true
                  },
                  "attachment": {
                    "type": "string",
                    "description": "Represents the actual file to be imported. File types could be jpg,png or pdf. Max file size is 20 MB.",
                    "nullable": true
                  },
                  "recipientType": {
                    "type": "integer",
                    "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                    "enum": [
                      1,
                      2,
                      3,
                      4
                    ]
                  },
                  "recipientId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Represents any additional details on the correpondence.",
                    "nullable": true
                  },
                  "htmlContent": {
                    "type": "string",
                    "description": "Represents the correspondence html content.",
                    "nullable": true
                  }
                },
                "required": [
                  "practiceId",
                  "patientId",
                  "importDate",
                  "category",
                  "subject",
                  "senderId"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence result",
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "letterStatus": 2,
                    "attachment": "attachment file",
                    "recipientType": 2,
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "notes": "correspondence notes",
                    "htmlContent": "<div class=\"mr-letter-content\">html content</div>"
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence result",
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "letterStatus": 5,
                    "attachment": "attachment file",
                    "recipientType": 2,
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "notes": "correspondence notes",
                    "htmlContent": "<div class=\"mr-letter-content\">html content</div>"
                  }
                }
              }
            }
          }
        },
        "description": "Create correspondence outbound",
        "tags": [
          "Outbound"
        ]
      }
    },
    "/v1/upload/patients/{patient_id}/correspondences/outbounds/{outbound_id}": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "outbound_id",
          "in": "path",
          "required": true,
          "description": "A GUID that represents the Outbound Id"
        }
      ],
      "get": {
        "summary": "Get correspondence outbound",
        "operationId": "get-api-patients-patient_id-correspondences-outbounds-outbound_id",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceOutbound",
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Outbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                    },
                    "practiceId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the practice Id."
                    },
                    "patientId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the patient Id."
                    },
                    "importDate": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the correspondence import date",
                      "format": "date"
                    },
                    "category": {
                      "type": "integer",
                      "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "subject": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the subject of the correspondence",
                      "maxLength": 100
                    },
                    "senderId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user Id.\n",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "letterStatus": {
                      "type": "integer",
                      "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                      "enum": [
                        1,
                        2
                      ],
                      "nullable": true
                    },
                    "attachmentUrl": {
                      "type": "string",
                      "description": "Represents the file url.",
                      "nullable": true
                    },
                    "recipientType": {
                      "type": "integer",
                      "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                      "enum": [
                        1,
                        2,
                        3,
                        4
                      ]
                    },
                    "recipientId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Represents any additional details on the correpondence.",
                      "maxLength": 500,
                      "nullable": true
                    },
                    "htmlContent": {
                      "type": "string",
                      "description": "Represents the correspondence html content.",
                      "nullable": true
                    },
                    "originatorName": {
                      "type": "string",
                      "description": "Represents the correspondence originator name.",
                      "nullable": true
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Represents the correspondence sender name.",
                      "nullable": true
                    },
                    "recipientName": {
                      "type": "string",
                      "description": "Represents the correspondence recipient name.",
                      "nullable": true
                    },
                    "outboundStatus": {
                      "type": "string",
                      "description": "Represents the outbound correspondence status like Pending, Sent, Delivered etc.",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "importDate",
                    "category",
                    "subject",
                    "senderId",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Correspondence outbound get Response": {
                    "value": {
                      "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                      "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                      "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                      "importDate": "2021-02-10",
                      "category": 1,
                      "subject": "Correspondence request",
                      "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "letterStatus": 2,
                      "attachmentUrl": "https://locationtofile/attachment.pdf",
                      "recipientType": 2,
                      "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                      "notes": "additional notes",
                      "htmlContent": "<div class=\"mr-letter-content\">html content</div>",
                      "originatorName": "Dr Doreen Bean",
                      "senderName": "Dr Doreen Bean",
                      "recipientName": "Dr Brenda Reed",
                      "outboundStatus": "Sent",
                      "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "createdDateTime": "2020-12-15T08:07:33.601+0000",
                      "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "findById.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findById.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Outbound"
        ],
        "description": "Get correspondence outbound by Patient Id and Outbound Id"
      },
      "put": {
        "summary": "Update correspondence outbound",
        "operationId": "put-api-patients-id-correspondences-outbounds",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A GUID that represents the patient_id"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "outbound_id",
            "in": "path",
            "required": true,
            "description": "A GUID that represents the Outbound Id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "default": "multipart/form-data"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Content type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CorrespondenceOutbound",
                  "type": "object",
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Outbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                    },
                    "practiceId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the practice Id."
                    },
                    "patientId": {
                      "type": "string",
                      "minLength": 1,
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "Represents the patient Id."
                    },
                    "importDate": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the correspondence import date",
                      "format": "date"
                    },
                    "category": {
                      "type": "integer",
                      "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ]
                    },
                    "subject": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the subject of the correspondence",
                      "maxLength": 100
                    },
                    "senderId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user Id.\n",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "letterStatus": {
                      "type": "integer",
                      "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                      "enum": [
                        1,
                        2
                      ],
                      "nullable": true
                    },
                    "attachmentUrl": {
                      "type": "string",
                      "description": "Represents the file url.",
                      "nullable": true
                    },
                    "recipientType": {
                      "type": "integer",
                      "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                      "enum": [
                        1,
                        2,
                        3,
                        4
                      ]
                    },
                    "recipientId": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "notes": {
                      "type": "string",
                      "description": "Represents any additional details on the correpondence.",
                      "maxLength": 500,
                      "nullable": true
                    },
                    "htmlContent": {
                      "type": "string",
                      "description": "Represents the correspondence html content.",
                      "nullable": true
                    },
                    "originatorName": {
                      "type": "string",
                      "description": "Represents the correspondence originator name.",
                      "nullable": true
                    },
                    "senderName": {
                      "type": "string",
                      "description": "Represents the correspondence sender name.",
                      "nullable": true
                    },
                    "recipientName": {
                      "type": "string",
                      "description": "Represents the correspondence recipient name.",
                      "nullable": true
                    },
                    "outboundStatus": {
                      "type": "string",
                      "description": "Represents the outbound correspondence status like Pending, Sent, Delivered etc.",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "patientId",
                    "importDate",
                    "category",
                    "subject",
                    "senderId",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "c9d6f248-61d4-4956-946f-063c496dc1ee",
                      "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                      "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                      "importDate": "2021-02-10",
                      "category": 1,
                      "subject": "Correspondence request",
                      "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "letterStatus": 2,
                      "attachmentUrl": "https://locationtofile/attachment.pdf",
                      "recipientType": 2,
                      "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                      "notes": "additional notes",
                      "htmlContent": "<div class=\"mr-letter-content\">html content</div>",
                      "originatorName": "Dr Doreen Bean",
                      "senderName": "Dr Doreen Bean",
                      "recipientName": "Dr Brenda Reed",
                      "outboundStatus": "Sent",
                      "createdBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "createdDateTime": "2020-12-15T08:07:33.601+0000",
                      "updatedBy": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                      "updatedDateTime": "2020-12-15T08:07:33.601+0000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Fields Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "letterStatus",
                          "value": "5",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "title": "CorrespondenceOutboundCreate",
                "type": "object",
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "practiceId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the practice Id."
                  },
                  "patientId": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "description": "Represents the patient Id."
                  },
                  "importDate": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the correspondence import date",
                    "format": "date"
                  },
                  "category": {
                    "type": "integer",
                    "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "subject": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the subject of the correspondence"
                  },
                  "senderId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user Id.\n",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "letterStatus": {
                    "type": "integer",
                    "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                    "enum": [
                      1,
                      2
                    ],
                    "nullable": true
                  },
                  "attachment": {
                    "type": "string",
                    "description": "Represents the actual file to be imported. File types could be jpg,png or pdf. Max file size is 20 MB.",
                    "nullable": true
                  },
                  "recipientType": {
                    "type": "integer",
                    "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                    "enum": [
                      1,
                      2,
                      3,
                      4
                    ]
                  },
                  "recipientId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Represents any additional details on the correpondence.",
                    "nullable": true
                  },
                  "htmlContent": {
                    "type": "string",
                    "description": "Represents the correspondence html content.",
                    "nullable": true
                  }
                },
                "required": [
                  "practiceId",
                  "patientId",
                  "importDate",
                  "category",
                  "subject",
                  "senderId"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence result",
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "letterStatus": 2,
                    "attachment": "attachment file",
                    "recipientType": 2,
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "notes": "correspondence notes",
                    "htmlContent": "<div class=\"mr-letter-content\">html content</div>"
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "practiceId": "dea38c62-31bd-40d5-a437-2731f7ec9b1b",
                    "patientId": "7fb8d3f6-9673-4b72-84f8-d94b1aae7a69",
                    "importDate": "2021-02-10",
                    "category": 1,
                    "subject": "Correspondence result",
                    "senderId": "9f8eb010-4744-4f89-8cbb-0cbd4f6c89a9",
                    "letterStatus": 5,
                    "attachment": "attachment file",
                    "recipientType": 2,
                    "recipientId": "5e251550-b7e4-44fe-a695-76758d493b02",
                    "notes": "correspondence notes",
                    "htmlContent": "<div class=\"mr-letter-content\">html content</div>"
                  }
                }
              }
            }
          }
        },
        "description": "Update correspondence outbound",
        "tags": [
          "Outbound"
        ]
      },
      "delete": {
        "summary": "Delete correspondence outbound",
        "operationId": "delete-api-patients-id-correspondences-outbounds",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A GUID that represents the patient_id"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "outbound_id",
            "in": "path",
            "required": true,
            "description": "A GUID that represents the Outbound Id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "5987afa6-2976-11eb-b53a-538b0f928ae9",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "delete.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "delete.id",
                          "value": "12",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorized Error Response": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please try again."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete correspondence outbound",
        "tags": [
          "Outbound"
        ]
      }
    },
    "/v1/webhooks": {
      "get": {
        "summary": "Get Webhook",
        "tags": [
          "Webhook"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "WebhooksPage",
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "data": [
                        {
                          "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                          "status": "enabled",
                          "createdDate": "2020-09-29T00:59:16Z",
                          "url": "https://example.com/customer/webhook",
                          "updatedDate": "2020-09-29T00:59:16Z"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "numberOfElements": 1,
                      "size": 20,
                      "page": 10
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "WebhookObject",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "138262b2-3e4d-11eb-9747-372b406ed24f",
                            "format": "uuid",
                            "description": "Webhook id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                          },
                          "status": {
                            "type": "string",
                            "description": "Webhook Status"
                          },
                          "url": {
                            "type": "string",
                            "description": "Webhook URL"
                          },
                          "createdDate": {
                            "type": "string",
                            "description": "Time when the resource was created"
                          },
                          "updatedDate": {
                            "type": "string",
                            "description": "Time when the resource was updated"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "List of Webhooks With Pagination": {
                    "value": {
                      "data": [
                        {
                          "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                          "status": "enabled",
                          "createdDate": "2020-09-29T00:59:16Z",
                          "url": "https://example.com/customer/webhook",
                          "updatedDate": "2020-09-29T00:59:16Z"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "numberOfElements": 1,
                      "size": 20,
                      "page": 10
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-webhooks",
        "description": "Fetch specific webhook ",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          }
        ],
        "security": []
      },
      "post": {
        "summary": "Create Webhook",
        "tags": [
          "Webhook"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "secret": {
                      "type": "string"
                    },
                    "webhook": {
                      "title": "WebhookObject",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "138262b2-3e4d-11eb-9747-372b406ed24f",
                          "format": "uuid",
                          "description": "Webhook id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                        },
                        "status": {
                          "type": "string",
                          "description": "Webhook Status"
                        },
                        "url": {
                          "type": "string",
                          "description": "Webhook URL"
                        },
                        "createdDate": {
                          "type": "string",
                          "description": "Time when the resource was created"
                        },
                        "updatedDate": {
                          "type": "string",
                          "description": "Time when the resource was updated"
                        }
                      },
                      "x-tags": [
                        "Other"
                      ]
                    }
                  },
                  "required": [
                    "secret",
                    "webhook"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "secret": "scXDFSSfdsfxjxldsfj",
                      "webhook": {
                        "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                        "status": "enabled",
                        "createdDate": "2020-09-29T00:59:16Z",
                        "url": "https://example.com/customer/webhook",
                        "updatedDate": "2020-09-29T00:59:16Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "Bad Request": {
                    "value": {
                      "message": "create.detail.url: must be a valid URL",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "create.detail.url",
                          "value": "http://www.example0.com/webhook/test1234",
                          "message": "must be a valid URL"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-webhooks",
        "description": "Create Webhook",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "The oAuth 2.0 bearer tokens",
            "name": "Authorization",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "supplied webhook url"
                  },
                  "eventTypes": {
                    "type": "array",
                    "x-stoplight": {
                      "id": "g1xjng3prakol"
                    },
                    "description": "Webhook events. If no webhook event is provided, then all events will be received.\nWhen a specified webhook event is triggered, a webhook is sent.\nWhen a webhook event not included in the filtered events is triggered, no webhook is sent.\nFor more details, please refer to [webhook event](docs/summary/Webhooks/7.-Wehook-Events.md) page.",
                    "items": {
                      "x-stoplight": {
                        "id": "efvfrhcyjjigt"
                      },
                      "type": "string",
                      "example": "[patient.create, patient.update, patient.delete]",
                      "default": "Receive all events"
                    }
                  }
                },
                "required": [
                  "url"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "url": "https://example.com/customer/webhook",
                    "eventTypes": [
                      "patient.create",
                      "patient.update",
                      "patient.delete"
                    ]
                  }
                }
              }
            }
          },
          "description": ""
        },
        "security": []
      },
      "parameters": []
    },
    "/v1/webhooks/{webhook_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "webhook_id",
          "in": "path",
          "required": true,
          "description": "Webhook ID"
        }
      ],
      "get": {
        "summary": "Get specific webhook",
        "tags": [
          "Webhook"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "WebhookObject",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "138262b2-3e4d-11eb-9747-372b406ed24f",
                      "format": "uuid",
                      "description": "Webhook id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                    },
                    "status": {
                      "type": "string",
                      "description": "Webhook Status"
                    },
                    "url": {
                      "type": "string",
                      "description": "Webhook URL"
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "Time when the resource was created"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "Time when the resource was updated"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Get Response": {
                    "value": {
                      "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                      "status": "enabled",
                      "createdDate": "2020-09-29T00:59:16Z",
                      "url": "https://example.com/customer/webhook",
                      "updatedDate": "2020-09-30T00:59:16Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "tyoe": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "Bad Request": {
                    "value": {
                      "message": "No Webhook for id: b97d12fe-7cd9-4849-9bee-59c806974b95",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-webhooks-webhook_id",
        "description": "Get specific webhook using webhook id",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          }
        ],
        "security": []
      },
      "put": {
        "summary": "Update webhook",
        "operationId": "put-webhooks-webhook_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "WebhookObject",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "138262b2-3e4d-11eb-9747-372b406ed24f",
                      "format": "uuid",
                      "description": "Webhook id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                    },
                    "status": {
                      "type": "string",
                      "description": "Webhook Status"
                    },
                    "url": {
                      "type": "string",
                      "description": "Webhook URL"
                    },
                    "createdDate": {
                      "type": "string",
                      "description": "Time when the resource was created"
                    },
                    "updatedDate": {
                      "type": "string",
                      "description": "Time when the resource was updated"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                      "status": "enabled",
                      "createdDate": "2020-09-29T00:59:16Z",
                      "url": "https://example.com/customer/webhook",
                      "updatedDate": "2020-09-30T00:59:16Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "Bad Request With An Invalid URL": {
                    "value": {
                      "message": "create.detail.url: must be a valid URL",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "create.detail.url",
                          "value": "http://www.example0.com/webhook/test1234",
                          "message": "must be a valid URL"
                        }
                      ]
                    }
                  },
                  "Bad Request With An Invalid Status": {
                    "value": {
                      "message": "Invalid status - must be enabled or disabled",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  },
                  "Bad Request No Webhook Error Response": {
                    "value": {
                      "message": "No Webhook for id: b97d12fe-7cd9-4849-9bee-59c806974b95",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update webhook",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true,
            "name": "Authorization"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "Request": {
                  "value": {
                    "url": "https://example.com/webhook/new",
                    "status": "disabled"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Webhook"
        ],
        "security": []
      },
      "delete": {
        "summary": "Delete Webhook",
        "operationId": "delete-webhooks-webhook_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "Bad Request": {
                    "value": {
                      "message": "No Webhook for id: b97d12fe-7cd9-4849-9bee-59c806974b95",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete webhook",
        "security": [],
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The oAuth 2.0 bearer tokens",
            "required": true
          }
        ]
      }
    },
    "/v1/code-system/{code_name}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "code_name",
          "in": "path",
          "required": true,
          "description": "Valid values for code_name:<br>  ```patient-status-code```, ```title-code```, ```ethnicity-code```,<br> ```country-code```, ```state-code```, ```relationship-code```,<br> ```referral-type-code```, ```skin-code```, ```account-payer-code```,<br> ```ihi-no-status-code```, ```ihi-record-status-code```,<br> ```appointment-interval-code```, ```subspeciality-code```,<br> ```qualifications-code```, ```role-code```, ```module-code```,<br> ```languages-code```, ```category-code```,```user-group-id```"
        }
      ],
      "get": {
        "summary": "Code Systems",
        "tags": [
          "Code System"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "CodeSystem",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "x-examples": {
                      "example": {
                        "code": "AU",
                        "value": "Australia"
                      }
                    },
                    "x-tags": [
                      "Other"
                    ]
                  }
                },
                "examples": {
                  "example country code": {
                    "value": [
                      {
                        "code": "AU",
                        "value": "Australia"
                      },
                      {
                        "code": "NZ",
                        "value": "New Zealand"
                      }
                    ]
                  },
                  "example ethnicity": {
                    "value": [
                      {
                        "code": "1",
                        "value": "Australian"
                      },
                      {
                        "code": "2",
                        "value": "Indian"
                      }
                    ]
                  },
                  "example title-code": {
                    "value": [
                      {
                        "code": "315890000",
                        "value": "Mr"
                      },
                      {
                        "code": "315890001",
                        "value": "Mrs"
                      }
                    ]
                  },
                  "example category-code": {
                    "value": [
                      {
                        "code": "1",
                        "value": "GP"
                      },
                      {
                        "code": "2",
                        "value": "Specialist"
                      }
                    ]
                  },
                  "example module-code": {
                    "value": [
                      {
                        "code": "CLINICAL_GP",
                        "value": "Clinical GP"
                      },
                      {
                        "code": "PRACTICE_SPECIALIST",
                        "value": "Practice Management - Specialist"
                      }
                    ]
                  },
                  "example role-code": {
                    "value": [
                      {
                        "code": "1",
                        "value": "Principal Doctor"
                      },
                      {
                        "code": "2",
                        "value": "Doctor"
                      }
                    ]
                  },
                  "example subspeciality-code": {
                    "value": [
                      {
                        "code": "9",
                        "value": "Child and adolescent psychiatry and psychotherapy"
                      },
                      {
                        "code": "32",
                        "value": "Oral and Maxillofacial Surgery"
                      }
                    ]
                  },
                  "example qualification-code": {
                    "value": [
                      {
                        "code": "31",
                        "value": "Bachelor of Health Science (Podiatry)"
                      },
                      {
                        "code": "32",
                        "value": "Bachelor of Nursing 2014"
                      }
                    ]
                  },
                  "example languages-code": {
                    "value": [
                      {
                        "code": "1",
                        "value": "English"
                      },
                      {
                        "code": "3",
                        "value": "Afrikaans"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "errorDescription": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "errorDescription": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "errorDescription"
                  ],
                  "title": "",
                  "description": "Error for Unauthorization",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "unauthorized",
                      "errorDescription": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-code-system-code-name",
        "description": "Get all code systems for a given code_name",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/practices/{practice_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "description": "practice GUID",
          "required": true
        }
      ],
      "get": {
        "summary": "Get practice",
        "tags": [
          "Practices"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PracticeObject",
                  "type": "object",
                  "x-examples": {
                    "Full Practice Response": {
                      "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                      "practiceName": "EastCorePractice",
                      "mainPhone": 298761234,
                      "addressLine1": "50 East Core",
                      "addressLine2": "Block 2",
                      "postcode": "4000",
                      "city": "Brisbane",
                      "stateCode": "QLD",
                      "countryCode": "AU",
                      "email": "test_practice@medirecords.com",
                      "serviceTypeText": "string",
                      "primaryPractice": true,
                      "fax": 491148223,
                      "lspNo": "14",
                      "abn": "91905419459",
                      "pipNo": "1241414",
                      "acirClinicCode": "1234",
                      "acirCommunityCode": "12345",
                      "status": "Active",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-02-14 05:10:09.088"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Practice id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "format": "uuid",
                      "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                    },
                    "practiceName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 200,
                      "description": "Represents the practice name.",
                      "example": "EastCorePractice"
                    },
                    "mainPhone": {
                      "type": "string",
                      "example": 298761234,
                      "maxLength": 10,
                      "description": "Represents the practice main phone number"
                    },
                    "addressLine1": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 30,
                      "description": "Represents the practice address line 1. ",
                      "example": "50 East Core"
                    },
                    "addressLine2": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 30,
                      "description": "Represents the practice address line 2. ",
                      "example": "Block 2"
                    },
                    "postcode": {
                      "type": "string",
                      "description": "Represents the practice address postcode.",
                      "minLength": 1,
                      "maxLength": 10,
                      "example": "4000"
                    },
                    "city": {
                      "type": "string",
                      "description": "Represents the practice address city or suburb.",
                      "example": "Brisbane",
                      "minLength": 1,
                      "maxLength": 60
                    },
                    "stateCode": {
                      "type": "string",
                      "description": "Represents the practice address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code.",
                      "minLength": 1,
                      "maxLength": 20,
                      "example": "QLD"
                    },
                    "countryCode": {
                      "type": "string",
                      "description": "Represents the practice address country.Call the below endpoint to get the countryCode\n/code-system/country-code .",
                      "maxLength": 2,
                      "example": "AU"
                    },
                    "email": {
                      "type": "string",
                      "description": "Represents the practice email.",
                      "example": "test_practice@medirecords.com",
                      "maxLength": 100
                    },
                    "serviceTypeText": {
                      "type": "string",
                      "description": "Represents the practice service type text (e.g Aged care , Community health etc)."
                    },
                    "primaryPractice": {
                      "type": "boolean",
                      "description": "Represents the practice type . If the practice type is primary , then the flag is set to true else its false."
                    },
                    "fax": {
                      "type": "string",
                      "description": "Represents the practice fax number . ",
                      "maxLength": 10,
                      "example": 491148223
                    },
                    "lspNo": {
                      "type": "string",
                      "description": "Represents the lsp number.",
                      "maxLength": 6,
                      "example": "14"
                    },
                    "abn": {
                      "type": "string",
                      "description": "Represents the users abn number",
                      "example": "91905419459",
                      "maxLength": 14
                    },
                    "pipNo": {
                      "type": "string",
                      "description": "Represents the practice fax number. ",
                      "example": "1241414",
                      "maxLength": 12
                    },
                    "acirClinicCode": {
                      "type": "string",
                      "example": "1234",
                      "description": "Represents the practice acir clinic code."
                    },
                    "acirCommunityCode": {
                      "type": "string",
                      "example": "12345",
                      "description": "Represents the practice acir community code."
                    },
                    "status": {
                      "type": "string",
                      "description": "Represents the practice status. ",
                      "example": "Active"
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceName",
                    "mainPhone",
                    "addressLine1",
                    "postcode",
                    "city",
                    "stateCode",
                    "countryCode",
                    "email",
                    "primaryPractice"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Practice Get Response": {
                    "value": {
                      "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                      "practiceName": "EastCorePractice",
                      "mainPhone": 298761234,
                      "addressLine1": "50 East Core",
                      "addressLine2": "Block 2",
                      "postcode": "4000",
                      "city": "Brisbane",
                      "stateCode": "QLD",
                      "countryCode": "AU",
                      "email": "test_practice@medirecords.com",
                      "serviceTypeText": "Public Hospital",
                      "primaryPractice": true,
                      "fax": 491148223,
                      "lspNo": "14",
                      "abn": "91905419459",
                      "pipNo": "1241414",
                      "acirClinicCode": "1234",
                      "acirCommunityCode": "12345",
                      "status": "Active",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-02-14 05:10:09.088"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-practice_practice_id",
        "description": "Get practice for a given practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/practices": {
      "get": {
        "summary": "Get all practices",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "tags": [
          "Practices"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PracticePage",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PracticeObject",
                        "type": "object",
                        "x-examples": {
                          "Full Practice Response": {
                            "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                            "practiceName": "EastCorePractice",
                            "mainPhone": 298761234,
                            "addressLine1": "50 East Core",
                            "addressLine2": "Block 2",
                            "postcode": "4000",
                            "city": "Brisbane",
                            "stateCode": "QLD",
                            "countryCode": "AU",
                            "email": "test_practice@medirecords.com",
                            "serviceTypeText": "string",
                            "primaryPractice": true,
                            "fax": 491148223,
                            "lspNo": "14",
                            "abn": "91905419459",
                            "pipNo": "1241414",
                            "acirClinicCode": "1234",
                            "acirCommunityCode": "12345",
                            "status": "Active",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-02-13 05:10:09.088",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-02-14 05:10:09.088"
                          }
                        },
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Practice id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                            "format": "uuid",
                            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                          },
                          "practiceName": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 200,
                            "description": "Represents the practice name.",
                            "example": "EastCorePractice"
                          },
                          "mainPhone": {
                            "type": "string",
                            "example": 298761234,
                            "maxLength": 10,
                            "description": "Represents the practice main phone number"
                          },
                          "addressLine1": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 30,
                            "description": "Represents the practice address line 1. ",
                            "example": "50 East Core"
                          },
                          "addressLine2": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 30,
                            "description": "Represents the practice address line 2. ",
                            "example": "Block 2"
                          },
                          "postcode": {
                            "type": "string",
                            "description": "Represents the practice address postcode.",
                            "minLength": 1,
                            "maxLength": 10,
                            "example": "4000"
                          },
                          "city": {
                            "type": "string",
                            "description": "Represents the practice address city or suburb.",
                            "example": "Brisbane",
                            "minLength": 1,
                            "maxLength": 60
                          },
                          "stateCode": {
                            "type": "string",
                            "description": "Represents the practice address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code.",
                            "minLength": 1,
                            "maxLength": 20,
                            "example": "QLD"
                          },
                          "countryCode": {
                            "type": "string",
                            "description": "Represents the practice address country.Call the below endpoint to get the countryCode\n/code-system/country-code .",
                            "maxLength": 2,
                            "example": "AU"
                          },
                          "email": {
                            "type": "string",
                            "description": "Represents the practice email.",
                            "example": "test_practice@medirecords.com",
                            "maxLength": 100
                          },
                          "serviceTypeText": {
                            "type": "string",
                            "description": "Represents the practice service type text (e.g Aged care , Community health etc)."
                          },
                          "primaryPractice": {
                            "type": "boolean",
                            "description": "Represents the practice type . If the practice type is primary , then the flag is set to true else its false."
                          },
                          "fax": {
                            "type": "string",
                            "description": "Represents the practice fax number . ",
                            "maxLength": 10,
                            "example": 491148223
                          },
                          "lspNo": {
                            "type": "string",
                            "description": "Represents the lsp number.",
                            "maxLength": 6,
                            "example": "14"
                          },
                          "abn": {
                            "type": "string",
                            "description": "Represents the users abn number",
                            "example": "91905419459",
                            "maxLength": 14
                          },
                          "pipNo": {
                            "type": "string",
                            "description": "Represents the practice fax number. ",
                            "example": "1241414",
                            "maxLength": 12
                          },
                          "acirClinicCode": {
                            "type": "string",
                            "example": "1234",
                            "description": "Represents the practice acir clinic code."
                          },
                          "acirCommunityCode": {
                            "type": "string",
                            "example": "12345",
                            "description": "Represents the practice acir community code."
                          },
                          "status": {
                            "type": "string",
                            "description": "Represents the practice status. ",
                            "example": "Active"
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "required": [
                          "id",
                          "practiceName",
                          "mainPhone",
                          "addressLine1",
                          "postcode",
                          "city",
                          "stateCode",
                          "countryCode",
                          "email",
                          "primaryPractice"
                        ],
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "totalElements": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "x-examples": {
                    "Full Practice Paged Response": {
                      "data": [
                        {
                          "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                          "practiceName": "EastCorePractice",
                          "mainPhone": 298761234,
                          "addressLine1": "50 East Core",
                          "addressLine2": "Block 2",
                          "postcode": "4000",
                          "city": "Brisbane",
                          "stateCode": "QLD",
                          "countryCode": "AU",
                          "email": "test_practice@medirecords.com",
                          "serviceTypeText": "Aged Care Facility",
                          "primaryPractice": true,
                          "fax": 491148223,
                          "lspNo": "14",
                          "abn": "91905419459",
                          "pipNo": "1241414",
                          "acirClinicCode": "1234",
                          "acirCommunityCode": "12345",
                          "status": "Active",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-13 05:10:09.088"
                        },
                        {
                          "id": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630",
                          "practiceName": "Dodo Medical",
                          "mainPhone": 987654321,
                          "addressLine1": "30 Grandis Road",
                          "addressLine2": "Block 3",
                          "postcode": "4000",
                          "city": "Dondingalong",
                          "stateCode": "NSW",
                          "countryCode": "AU",
                          "email": "test_practice@medirecords.com",
                          "serviceTypeText": "Aged Care Facility",
                          "primaryPractice": true,
                          "fax": 491148299,
                          "lspNo": "14",
                          "abn": "91905419459",
                          "pipNo": "1241414",
                          "acirClinicCode": "1234",
                          "acirCommunityCode": "12345",
                          "status": "Active",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-13 05:10:09.088"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "List of Practices With Pagination": {
                    "value": {
                      "data": [
                        {
                          "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                          "practiceName": "EastCorePractice",
                          "mainPhone": 298761234,
                          "addressLine1": "50 East Core",
                          "addressLine2": "Block 2",
                          "postcode": "4000",
                          "city": "Brisbane",
                          "stateCode": "QLD",
                          "countryCode": "AU",
                          "email": "test_practice@medirecords.com",
                          "serviceTypeText": "Aged Care Facility",
                          "primaryPractice": true,
                          "fax": 491148223,
                          "lspNo": "14",
                          "abn": "91905419459",
                          "pipNo": "1241414",
                          "acirClinicCode": "1234",
                          "acirCommunityCode": "12345",
                          "status": "Active",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-13 05:10:09.088"
                        },
                        {
                          "id": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630",
                          "practiceName": "Dodo Medical",
                          "mainPhone": 987654321,
                          "addressLine1": "30 Grandis Road",
                          "addressLine2": "Block 3",
                          "postcode": "4000",
                          "city": "Dondingalong",
                          "stateCode": "NSW",
                          "countryCode": "AU",
                          "email": "test_practice@medirecords.com",
                          "serviceTypeText": "Aged Care Facility",
                          "primaryPractice": true,
                          "fax": 491148299,
                          "lspNo": "14",
                          "abn": "91905419459",
                          "pipNo": "1241414",
                          "acirClinicCode": "1234",
                          "acirCommunityCode": "12345",
                          "status": "Active",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-13 05:10:09.088"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-practices",
        "description": "Get list of practices"
      },
      "parameters": []
    },
    "/v1/practices/{practice_id}/practice-biographies": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "practice GUID"
        }
      ],
      "get": {
        "summary": "Get all practice biographies",
        "tags": [
          "Practices"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PracticeBiographyPage",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PracticeBiographyObject",
                        "type": "object",
                        "x-examples": {
                          "Full Practice Biography Response": {
                            "id": "88b33b1a-a2b8-11e9-8fc8-c71be0152285",
                            "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                            "biography": "test biography for Pearl Harbour Hospital",
                            "communityList": true,
                            "bulkBilling": true,
                            "afterHours": true,
                            "practiceWebsite": "www.practice.com",
                            "subSpecialities": {
                              "subSpecialityName": "Workplace Wellbeing"
                            }
                          }
                        },
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Practice biograpy id .This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                            "format": "uuid",
                            "example": "88b33b1a-a2b8-11e9-8fc8-c71be0152285"
                          },
                          "practiceId": {
                            "type": "string",
                            "format": "uuid",
                            "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                            "description": "A GUID that reprsents the practice id "
                          },
                          "biography": {
                            "type": "string",
                            "description": "Represents the practice biography. This will be included in the practice profile in Medirecords app.",
                            "example": "test biography for Pearl Harbour Hospital",
                            "maxLength": 1000
                          },
                          "communityList": {
                            "type": "boolean",
                            "description": "Repesents the community and contact list. When this is set to true, the practice and user profiles are shared across the medirecords community and contact list and will also be included in the medirecords app."
                          },
                          "bulkBilling": {
                            "type": "boolean",
                            "description": "Represents the bulk billing service. If the practice offers bulk billing service, then this value is set to true."
                          },
                          "afterHours": {
                            "type": "boolean",
                            "description": "Represents the after hour service. If the practice offers after hours service (open before 8am or  after 6pm), then this value is set to true."
                          },
                          "practiceWebsite": {
                            "type": "string",
                            "description": "Represents the practice website url.",
                            "example": "www.practice.com",
                            "maxLength": 2000
                          },
                          "subSpecialities": {
                            "title": "SubSpeciality",
                            "type": "object",
                            "properties": {
                              "subSpecialityName": {
                                "type": "string",
                                "description": "Represents the sub speciality name.\n",
                                "maxLength": 200,
                                "example": "Workplace Wellbeing"
                              }
                            },
                            "required": [
                              "subSpecialityName"
                            ],
                            "x-examples": {
                              "example": {
                                "subSpecialityName": "Workplace Wellbeing"
                              }
                            },
                            "x-tags": [
                              "Other"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "practiceId",
                          "biography"
                        ],
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "totalElements": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "x-examples": {
                    "Full Paged Practice Biography Response": {
                      "data": [
                        {
                          "id": "88b33b1a-a2b8-11e9-8fc8-c71be0152285",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "biography": "test biography for Pearl Harbour Hospital",
                          "communityList": true,
                          "bulkBilling": true,
                          "afterHours": true,
                          "practiceWebsite": "www.practice.com",
                          "subSpecialities": {
                            "subSpecialityName": "Workplace Wellbeing"
                          }
                        },
                        {
                          "id": "499909b6-c9b6-11e5-80e2-afba8bd47e5d",
                          "practiceId": "0c506efa-c9b6-11e5-bd95-33414b5372a6",
                          "biography": "Allied Health Clinic",
                          "communityList": true,
                          "bulkBilling": true,
                          "afterHours": true,
                          "practiceWebsite": "www.allied-practice.com",
                          "subSpecialities": {
                            "subSpecialityName": "Neurosurgery"
                          }
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "List of Practice Biographies With Pagination": {
                    "value": {
                      "data": [
                        {
                          "id": "88b33b1a-a2b8-11e9-8fc8-c71be0152285",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "biography": "test biography for Pearl Harbour Hospital",
                          "communityList": true,
                          "bulkBilling": true,
                          "afterHours": true,
                          "practiceWebsite": "www.practice.com",
                          "subSpecialities": {
                            "subSpecialityName": "Workplace Wellbeing"
                          }
                        },
                        {
                          "id": "499909b6-c9b6-11e5-80e2-afba8bd47e5d",
                          "practiceId": "0c506efa-c9b6-11e5-bd95-33414b5372a6",
                          "biography": "Allied Health Clinic",
                          "communityList": true,
                          "bulkBilling": true,
                          "afterHours": true,
                          "practiceWebsite": "www.allied-practice.com",
                          "subSpecialities": {
                            "subSpecialityName": "Neurosurgery"
                          }
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Invalid practice id Error Response": {
                    "value": {
                      "message": "findAllByPractice.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPractice.id",
                          "value": "xxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-practices-practice_id-practice-biography-practice_biography_id",
        "description": "Get all practice biographies for a given practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ]
      }
    },
    "/v1/practices/{practice_id}/rooms": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "practice GUID"
        }
      ],
      "get": {
        "summary": "Get all practice rooms",
        "tags": [
          "Rooms"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PracticeRoomPage",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PracticeRoomObject",
                        "type": "object",
                        "x-examples": {
                          "Full Practice Room Response": {
                            "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
                            "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                            "roomName": "Langit Biru",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-02-13 05:10:09.088",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-02-13 05:10:09.088"
                          }
                        },
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "room id .This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                            "example": "9ccc3c50-55ef-11eb-a494-6f52f912607e"
                          },
                          "practiceId": {
                            "type": "string",
                            "description": "A GUID that reprsents the practice id ",
                            "format": "uuid",
                            "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                          },
                          "roomName": {
                            "type": "string",
                            "description": "Represents the practice room name.",
                            "example": "Langit Biru",
                            "maxLength": 100
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "required": [
                          "id",
                          "practiceId",
                          "roomName"
                        ],
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "totalElements": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "x-examples": {
                    "Full Paged Practice Room Response": {
                      "data": [
                        {
                          "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "roomName": "Langit Biru",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-14 05:10:09.088"
                        },
                        {
                          "id": "ba4b4e20-88b9-11e8-9bbe-9369fe5be7f6",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "roomName": "Public Room",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-14 05:10:09.088"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "List of Practice Rooms With Pagination": {
                    "value": {
                      "data": [
                        {
                          "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "roomName": "Langit Biru",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-14 05:10:09.088"
                        },
                        {
                          "id": "ba4b4e20-88b9-11e8-9bbe-9369fe5be7f6",
                          "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                          "roomName": "Public Room",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-02-13 05:10:09.088",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-02-14 05:10:09.088"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 2,
                      "numberOfElements": 2,
                      "size": 2,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Invalid practice id Error Response": {
                    "value": {
                      "message": "findAllByPracticeId.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPracticeId.id",
                          "value": "xxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-practices-practice_id-practice-rooms",
        "description": "Get all practice rooms for a given practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ]
      }
    },
    "/v1/practices/{practice_id}/rooms/{room_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "practice GUID"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "room_id",
          "in": "path",
          "required": true,
          "description": "room GUID"
        }
      ],
      "get": {
        "summary": "Get practice room",
        "tags": [
          "Rooms"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PracticeRoomObject",
                  "type": "object",
                  "x-examples": {
                    "Full Practice Room Response": {
                      "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "roomName": "Langit Biru",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-02-13 05:10:09.088"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "room id .This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                      "example": "9ccc3c50-55ef-11eb-a494-6f52f912607e"
                    },
                    "practiceId": {
                      "type": "string",
                      "description": "A GUID that reprsents the practice id ",
                      "format": "uuid",
                      "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                    },
                    "roomName": {
                      "type": "string",
                      "description": "Represents the practice room name.",
                      "example": "Langit Biru",
                      "maxLength": 100
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "roomName"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Practice Room Get Response": {
                    "value": {
                      "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
                      "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                      "roomName": "Langit Biru",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-02-13 05:10:09.088",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-02-14 05:10:09.088"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request No Practice Room Error Response": {
                    "value": {
                      "message": "No Practice Room for id: b97d12fe-7cd9-4849-9bee-59c806974b95",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-practices-practice_id-practice-rooms-practice_room_id",
        "description": "Get practice room by practice id and room id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/practices/{practice_id}/regular-sessions": {
      "parameters": [
        {
          "in": "path",
          "name": "practice_id",
          "schema": {
            "type": "string"
          },
          "description": "A GUID represents the Practice ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
          "required": true
        }
      ],
      "get": {
        "summary": "Search all regular sessions",
        "tags": [
          "Regular Sessions"
        ],
        "operationId": "searchPracticeRegularSessions",
        "description": "Get all regular sessions for a given practice ID",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "userId",
            "description": "A GUID represents Practitioner ID. See [Resource Identifier](../../#Resource-Identifier) format"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RegularSessionResponseTypeBundle",
                  "type": "object",
                  "properties": {
                    "data": {
                      "title": "RegularSessionResponseType",
                      "type": "object",
                      "description": "Regular session response model",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                          "format": "uuid",
                          "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
                        },
                        "practiceId": {
                          "type": "string",
                          "description": "A GUID represents the practice ID.",
                          "format": "uuid",
                          "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
                        },
                        "calendar": {
                          "type": "integer",
                          "enum": [
                            1,
                            2
                          ],
                          "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
                        },
                        "userId": {
                          "type": "string",
                          "description": "A GUID represents the practitioner ID.",
                          "format": "uuid",
                          "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                        },
                        "sessionName": {
                          "type": "string",
                          "description": "The session name.",
                          "example": "Regular session"
                        },
                        "dayOfWeek": {
                          "type": "integer",
                          "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
                          "example": 1,
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8
                          ]
                        },
                        "cycleWeek": {
                          "type": "integer",
                          "description": "The cycle week.",
                          "example": 1
                        },
                        "cycleNoOfWeeks": {
                          "type": "integer",
                          "description": "The cycle number of week.",
                          "example": 1
                        },
                        "cycleStartDate": {
                          "type": "string",
                          "description": "The cycle start date with format `YYYY-MM-DD`",
                          "example": "2021-08-18",
                          "format": "date"
                        },
                        "startDate": {
                          "type": "string",
                          "description": "The session start date with format `YYYY-MM-DD`",
                          "example": "2021-08-18",
                          "format": "date"
                        },
                        "startTime": {
                          "type": "string",
                          "description": "The session start time with format `HH:MM`",
                          "example": "08:00"
                        },
                        "endDate": {
                          "type": "string",
                          "description": "The session end date with format `YYYY-MM-DD`",
                          "example": "2026-08-18",
                          "format": "date"
                        },
                        "endTime": {
                          "type": "string",
                          "description": "The session end time with format `HH:MM`",
                          "example": "18:00"
                        },
                        "colorCode": {
                          "type": "string",
                          "description": "The session color code in hexadecimal.",
                          "example": "#ff0000"
                        },
                        "excludedTypes": {
                          "type": "array",
                          "description": "The list of excluded appointment type id.",
                          "nullable": true,
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "A GUID represents the appointment type ID.",
                                "format": "uuid",
                                "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                              }
                            }
                          }
                        },
                        "userName": {
                          "type": "string",
                          "description": "The practitioner name.",
                          "example": "Mr John Smith"
                        },
                        "dayOfWeekName": {
                          "type": "string",
                          "description": "The name of day of week.",
                          "example": "Sunday"
                        },
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      },
                      "required": [
                        "id",
                        "practiceId",
                        "calendar",
                        "userId",
                        "sessionName"
                      ],
                      "x-internal": false
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalElements": {
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "List of regular sessions with pagination": {
                    "value": {
                      "data": {
                        "id": "041f8122-d8a9-11e7-894e-133f32cd70ad",
                        "practiceId": "031f8122-d8a9-11e7-894e-133f32cd70ac",
                        "userId": "051f8122-d8a9-11e7-894e-133f32cd70ad",
                        "sessionName": "Regular Session",
                        "calendar": 1,
                        "dayOfWeek": 4,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "98709c82-f12e-11e8-956c-a73bcd214242"
                          },
                          {
                            "id": "987188ae-f12e-11e8-956e-2f9bcbf33cb9"
                          }
                        ],
                        "userName": "Dr John Smith",
                        "dayOfWeekName": "Wednesday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-24T14:15:22Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-09-20T13:05:12Z"
                      },
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 1,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Invalid practice id Error Response": {
                    "value": {
                      "message": "findAllByPractice.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPractice.id",
                          "value": "xxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create regular session",
        "operationId": "createPractitionerRegularSession",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "RegularSessionResponseType",
                    "type": "object",
                    "description": "Regular session response model",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                        "format": "uuid",
                        "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
                      },
                      "practiceId": {
                        "type": "string",
                        "description": "A GUID represents the practice ID.",
                        "format": "uuid",
                        "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
                      },
                      "calendar": {
                        "type": "integer",
                        "enum": [
                          1,
                          2
                        ],
                        "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
                      },
                      "userId": {
                        "type": "string",
                        "description": "A GUID represents the practitioner ID.",
                        "format": "uuid",
                        "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                      },
                      "sessionName": {
                        "type": "string",
                        "description": "The session name.",
                        "example": "Regular session"
                      },
                      "dayOfWeek": {
                        "type": "integer",
                        "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
                        "example": 1,
                        "enum": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ]
                      },
                      "cycleWeek": {
                        "type": "integer",
                        "description": "The cycle week.",
                        "example": 1
                      },
                      "cycleNoOfWeeks": {
                        "type": "integer",
                        "description": "The cycle number of week.",
                        "example": 1
                      },
                      "cycleStartDate": {
                        "type": "string",
                        "description": "The cycle start date with format `YYYY-MM-DD`",
                        "example": "2021-08-18",
                        "format": "date"
                      },
                      "startDate": {
                        "type": "string",
                        "description": "The session start date with format `YYYY-MM-DD`",
                        "example": "2021-08-18",
                        "format": "date"
                      },
                      "startTime": {
                        "type": "string",
                        "description": "The session start time with format `HH:MM`",
                        "example": "08:00"
                      },
                      "endDate": {
                        "type": "string",
                        "description": "The session end date with format `YYYY-MM-DD`",
                        "example": "2026-08-18",
                        "format": "date"
                      },
                      "endTime": {
                        "type": "string",
                        "description": "The session end time with format `HH:MM`",
                        "example": "18:00"
                      },
                      "colorCode": {
                        "type": "string",
                        "description": "The session color code in hexadecimal.",
                        "example": "#ff0000"
                      },
                      "excludedTypes": {
                        "type": "array",
                        "description": "The list of excluded appointment type id.",
                        "nullable": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "A GUID represents the appointment type ID.",
                              "format": "uuid",
                              "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                            }
                          }
                        }
                      },
                      "userName": {
                        "type": "string",
                        "description": "The practitioner name.",
                        "example": "Mr John Smith"
                      },
                      "dayOfWeekName": {
                        "type": "string",
                        "description": "The name of day of week.",
                        "example": "Sunday"
                      },
                      "createdBy": {
                        "type": "string",
                        "title": "CreatedBy",
                        "description": "A GUID refers to User identifier who created the resource.",
                        "x-examples": {
                          "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                        },
                        "default": "UUID",
                        "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "x-internal": false
                      },
                      "createdDateTime": {
                        "type": "string",
                        "title": "CreatedDate",
                        "description": "Time when the resource was created.",
                        "x-internal": false
                      },
                      "updatedBy": {
                        "type": "string",
                        "title": "UpdatedBy",
                        "description": "A GUID refers to User identifier who updated the resource.",
                        "default": "UUID",
                        "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "x-internal": false
                      },
                      "updatedDateTime": {
                        "title": "UpdatedDate",
                        "type": "string",
                        "description": "Time when the resource was updated.",
                        "x-internal": false
                      }
                    },
                    "required": [
                      "id",
                      "practiceId",
                      "calendar",
                      "userId",
                      "sessionName"
                    ],
                    "x-internal": false
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 1,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Sunday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      }
                    ]
                  },
                  "Monday-Saturday Example": {
                    "value": [
                      {
                        "id": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 2,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Monday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      {
                        "id": "02e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 1,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Tuesday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      {
                        "id": "03e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 4,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Wednesday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      {
                        "id": "04e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 5,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Thursday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      {
                        "id": "05e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 6,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Friday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      {
                        "id": "06e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 7,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Saturday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Field Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "userId",
                          "value": "xxx",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Regular Sessions"
        ],
        "description": "Create regular session for a given practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "RegularSessionRequestType",
                "type": "object",
                "description": "Update regular session request model",
                "x-internal": false,
                "properties": {
                  "calendar": {
                    "type": "integer",
                    "enum": [
                      1,
                      2
                    ],
                    "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
                  },
                  "userId": {
                    "type": "string",
                    "description": "A GUID represents the practitioner ID.",
                    "format": "uuid",
                    "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                  },
                  "sessionName": {
                    "type": "string",
                    "description": "The session name.",
                    "example": "Regular session"
                  },
                  "dayOfWeek": {
                    "type": "integer",
                    "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
                    "example": 1,
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8
                    ]
                  },
                  "cycleWeek": {
                    "type": "integer",
                    "description": "The cycle week.",
                    "example": 1
                  },
                  "cycleNoOfWeeks": {
                    "type": "integer",
                    "description": "The cycle number of week.",
                    "example": 1
                  },
                  "cycleStartDate": {
                    "type": "string",
                    "description": "The cycle start date with format `YYYY-MM-DD`",
                    "example": "2021-08-18",
                    "format": "date"
                  },
                  "startDate": {
                    "type": "string",
                    "description": "The session start date with format `YYYY-MM-DD`",
                    "example": "2021-08-18",
                    "format": "date"
                  },
                  "startTime": {
                    "type": "string",
                    "description": "The session start time with format `HH:MM`",
                    "example": "08:00"
                  },
                  "endDate": {
                    "type": "string",
                    "description": "The session end date with format `YYYY-MM-DD`",
                    "example": "2026-08-18",
                    "format": "date"
                  },
                  "endTime": {
                    "type": "string",
                    "description": "The session end time with format `HH:MM`",
                    "example": "18:00"
                  },
                  "colorCode": {
                    "type": "string",
                    "description": "The session color code in hexadecimal.",
                    "example": "#ff0000"
                  },
                  "excludedTypes": {
                    "type": "array",
                    "description": "The list of excluded appointment type id.",
                    "nullable": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "A GUID represents the appointment type ID.",
                          "format": "uuid",
                          "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "calendar",
                  "userId",
                  "sessionName",
                  "startDate",
                  "startTime",
                  "endDate",
                  "endTime"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "calendar": 1,
                    "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                    "sessionName": "Regular session",
                    "dayOfWeek": 1,
                    "cycleWeek": 1,
                    "cycleNoOfWeeks": 1,
                    "cycleStartDate": "2021-08-18",
                    "startDate": "2021-08-18",
                    "startTime": "08:00",
                    "endDate": "2026-08-18",
                    "endTime": "18:00",
                    "colorCode": "#ff0000",
                    "excludedTypes": [
                      {
                        "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/practices/{practice_id}/regular-sessions/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "practice_id",
          "schema": {
            "type": "string"
          },
          "description": "A GUID represents the Practice ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
          "required": true
        },
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "description": "A GUID represents the Session ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
          "required": true
        }
      ],
      "put": {
        "summary": "Update regular session",
        "operationId": "updateRegularSession",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RegularSessionResponseType",
                  "type": "object",
                  "description": "Regular session response model",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                      "format": "uuid",
                      "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
                    },
                    "practiceId": {
                      "type": "string",
                      "description": "A GUID represents the practice ID.",
                      "format": "uuid",
                      "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
                    },
                    "calendar": {
                      "type": "integer",
                      "enum": [
                        1,
                        2
                      ],
                      "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
                    },
                    "userId": {
                      "type": "string",
                      "description": "A GUID represents the practitioner ID.",
                      "format": "uuid",
                      "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                    },
                    "sessionName": {
                      "type": "string",
                      "description": "The session name.",
                      "example": "Regular session"
                    },
                    "dayOfWeek": {
                      "type": "integer",
                      "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
                      "example": 1,
                      "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                      ]
                    },
                    "cycleWeek": {
                      "type": "integer",
                      "description": "The cycle week.",
                      "example": 1
                    },
                    "cycleNoOfWeeks": {
                      "type": "integer",
                      "description": "The cycle number of week.",
                      "example": 1
                    },
                    "cycleStartDate": {
                      "type": "string",
                      "description": "The cycle start date with format `YYYY-MM-DD`",
                      "example": "2021-08-18",
                      "format": "date"
                    },
                    "startDate": {
                      "type": "string",
                      "description": "The session start date with format `YYYY-MM-DD`",
                      "example": "2021-08-18",
                      "format": "date"
                    },
                    "startTime": {
                      "type": "string",
                      "description": "The session start time with format `HH:MM`",
                      "example": "08:00"
                    },
                    "endDate": {
                      "type": "string",
                      "description": "The session end date with format `YYYY-MM-DD`",
                      "example": "2026-08-18",
                      "format": "date"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "The session end time with format `HH:MM`",
                      "example": "18:00"
                    },
                    "colorCode": {
                      "type": "string",
                      "description": "The session color code in hexadecimal.",
                      "example": "#ff0000"
                    },
                    "excludedTypes": {
                      "type": "array",
                      "description": "The list of excluded appointment type id.",
                      "nullable": true,
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A GUID represents the appointment type ID.",
                            "format": "uuid",
                            "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        }
                      }
                    },
                    "userName": {
                      "type": "string",
                      "description": "The practitioner name.",
                      "example": "Mr John Smith"
                    },
                    "dayOfWeekName": {
                      "type": "string",
                      "description": "The name of day of week.",
                      "example": "Sunday"
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "calendar",
                    "userId",
                    "sessionName"
                  ],
                  "x-internal": false
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                      "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                      "calendar": 1,
                      "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                      "sessionName": "Regular session",
                      "dayOfWeek": 1,
                      "cycleWeek": 1,
                      "cycleNoOfWeeks": 1,
                      "cycleStartDate": "2021-08-18",
                      "startDate": "2021-08-18",
                      "startTime": "08:00",
                      "endDate": "2026-08-18",
                      "endTime": "18:00",
                      "colorCode": "#ff0000",
                      "excludedTypes": [
                        {
                          "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                        }
                      ],
                      "userName": "Mr John Smith",
                      "dayOfWeekName": "Sunday",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2021-08-18T10:30:26Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2021-08-18T10:30:26Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Field Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "userId",
                          "value": "xxx",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Regular Sessions"
        ],
        "description": "Update regular session for a given practice id and session id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "RegularSessionRequestType",
                "type": "object",
                "description": "Update regular session request model",
                "x-internal": false,
                "properties": {
                  "calendar": {
                    "type": "integer",
                    "enum": [
                      1,
                      2
                    ],
                    "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
                  },
                  "userId": {
                    "type": "string",
                    "description": "A GUID represents the practitioner ID.",
                    "format": "uuid",
                    "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                  },
                  "sessionName": {
                    "type": "string",
                    "description": "The session name.",
                    "example": "Regular session"
                  },
                  "dayOfWeek": {
                    "type": "integer",
                    "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
                    "example": 1,
                    "enum": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8
                    ]
                  },
                  "cycleWeek": {
                    "type": "integer",
                    "description": "The cycle week.",
                    "example": 1
                  },
                  "cycleNoOfWeeks": {
                    "type": "integer",
                    "description": "The cycle number of week.",
                    "example": 1
                  },
                  "cycleStartDate": {
                    "type": "string",
                    "description": "The cycle start date with format `YYYY-MM-DD`",
                    "example": "2021-08-18",
                    "format": "date"
                  },
                  "startDate": {
                    "type": "string",
                    "description": "The session start date with format `YYYY-MM-DD`",
                    "example": "2021-08-18",
                    "format": "date"
                  },
                  "startTime": {
                    "type": "string",
                    "description": "The session start time with format `HH:MM`",
                    "example": "08:00"
                  },
                  "endDate": {
                    "type": "string",
                    "description": "The session end date with format `YYYY-MM-DD`",
                    "example": "2026-08-18",
                    "format": "date"
                  },
                  "endTime": {
                    "type": "string",
                    "description": "The session end time with format `HH:MM`",
                    "example": "18:00"
                  },
                  "colorCode": {
                    "type": "string",
                    "description": "The session color code in hexadecimal.",
                    "example": "#ff0000"
                  },
                  "excludedTypes": {
                    "type": "array",
                    "description": "The list of excluded appointment type id.",
                    "nullable": true,
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "A GUID represents the appointment type ID.",
                          "format": "uuid",
                          "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "calendar",
                  "userId",
                  "sessionName",
                  "startDate",
                  "startTime",
                  "endDate",
                  "endTime"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "calendar": 1,
                    "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                    "sessionName": "Regular session",
                    "dayOfWeek": 1,
                    "cycleWeek": 1,
                    "cycleNoOfWeeks": 1,
                    "cycleStartDate": "2021-08-18",
                    "startDate": "2021-08-18",
                    "startTime": "08:00",
                    "endDate": "2026-08-18",
                    "endTime": "18:00",
                    "colorCode": "#ff0000",
                    "excludedTypes": [
                      {
                        "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete regular session",
        "operationId": "deleteRegularSession",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "5987afa6-2976-11eb-b53a-538b0f928ae9",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "No Regular Session for Session id: {id}",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete a Regular Session by Id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Regular Sessions"
        ]
      }
    },
    "/v1/practices/{practice_id}/available-sessions": {
      "parameters": [
        {
          "in": "path",
          "name": "practice_id",
          "schema": {
            "type": "string"
          },
          "description": "A GUID represents the Practice ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
          "required": true
        }
      ],
      "get": {
        "summary": "Search all available sessions",
        "tags": [
          "Available Sessions"
        ],
        "operationId": "searchPracticeAvailableSessions",
        "description": "Get all available sessions for a given practice ID",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "userId",
            "description": "A GUID represents Practitioner ID. See [Resource Identifier](../../#Resource-Identifier) format"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sessionDate",
            "description": "Represents the session date in the format YYYY-MM-DD. This query will return all the available sessions for the next 6 days starting from this session date. If there is no session date, then by default the system date will be set as session date."
          },
          {
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2
              ]
            },
            "in": "query",
            "name": "calendar",
            "description": "The selected calendar.  `1`=Practice             `2`=Community"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "AvailableSessionResponseType",
                    "type": "object",
                    "description": "Available session response model",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                        "format": "uuid",
                        "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
                      },
                      "practiceId": {
                        "type": "string",
                        "description": "A GUID represents the practice ID.",
                        "format": "uuid",
                        "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
                      },
                      "calendar": {
                        "type": "integer",
                        "enum": [
                          1,
                          2
                        ],
                        "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
                      },
                      "userId": {
                        "type": "string",
                        "description": "A GUID represents the practitioner ID.",
                        "format": "uuid",
                        "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                      },
                      "sessionName": {
                        "type": "string",
                        "description": "The session name.",
                        "example": "Regular session"
                      },
                      "dayOfWeek": {
                        "type": "integer",
                        "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
                        "example": 1,
                        "enum": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ]
                      },
                      "cycleWeek": {
                        "type": "integer",
                        "description": "The cycle week.",
                        "example": 1
                      },
                      "cycleNoOfWeeks": {
                        "type": "integer",
                        "description": "The cycle number of week.",
                        "example": 1
                      },
                      "cycleStartDate": {
                        "type": "string",
                        "description": "The cycle start date with format `YYYY-MM-DD`",
                        "example": "2021-08-18",
                        "format": "date"
                      },
                      "startDate": {
                        "type": "string",
                        "description": "The session start date with format `YYYY-MM-DD`",
                        "example": "2021-08-18",
                        "format": "date"
                      },
                      "startTime": {
                        "type": "string",
                        "description": "The session start time with format `HH:MM`",
                        "example": "08:00"
                      },
                      "endDate": {
                        "type": "string",
                        "description": "The session end date with format `YYYY-MM-DD`",
                        "example": "2026-08-18",
                        "format": "date"
                      },
                      "endTime": {
                        "type": "string",
                        "description": "The session end time with format `HH:MM`",
                        "example": "18:00"
                      },
                      "colorCode": {
                        "type": "string",
                        "description": "The session color code in hexadecimal.",
                        "example": "#ff0000"
                      },
                      "excludedTypes": {
                        "type": "array",
                        "description": "The list of excluded appointment type id.",
                        "nullable": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "A GUID represents the appointment type ID.",
                              "format": "uuid",
                              "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                            }
                          }
                        }
                      },
                      "userName": {
                        "type": "string",
                        "description": "The practitioner name.",
                        "example": "Mr John Smith"
                      },
                      "dayOfWeekName": {
                        "type": "string",
                        "description": "The name of day of week.",
                        "example": "Sunday"
                      },
                      "createdBy": {
                        "type": "string",
                        "title": "CreatedBy",
                        "description": "A GUID refers to User identifier who created the resource.",
                        "x-examples": {
                          "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                        },
                        "default": "UUID",
                        "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "x-internal": false
                      },
                      "createdDateTime": {
                        "type": "string",
                        "title": "CreatedDate",
                        "description": "Time when the resource was created.",
                        "x-internal": false
                      },
                      "updatedBy": {
                        "type": "string",
                        "title": "UpdatedBy",
                        "description": "A GUID refers to User identifier who updated the resource.",
                        "default": "UUID",
                        "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "x-internal": false
                      },
                      "updatedDateTime": {
                        "title": "UpdatedDate",
                        "type": "string",
                        "description": "Time when the resource was updated.",
                        "x-internal": false
                      }
                    },
                    "required": [
                      "id",
                      "practiceId",
                      "calendar",
                      "userId",
                      "sessionName"
                    ],
                    "x-internal": false
                  }
                },
                "examples": {
                  "List of available sessions": {
                    "value": [
                      {
                        "id": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 2,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Monday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      {
                        "id": "02e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 1,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Tuesday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      {
                        "id": "03e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "calendar": 1,
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Regular session",
                        "dayOfWeek": 4,
                        "cycleWeek": 1,
                        "cycleNoOfWeeks": 1,
                        "cycleStartDate": "2021-08-18",
                        "startDate": "2021-08-18",
                        "startTime": "08:00",
                        "endDate": "2026-08-18",
                        "endTime": "18:00",
                        "colorCode": "#ff0000",
                        "excludedTypes": [
                          {
                            "id": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                          }
                        ],
                        "userName": "Mr John Smith",
                        "dayOfWeekName": "Wednesday",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Invalid practice id Error Response": {
                    "value": {
                      "message": "findAllByPractice.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPractice.id",
                          "value": "xxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/practices/{practice_id}/holiday-sessions": {
      "parameters": [
        {
          "in": "path",
          "name": "practice_id",
          "schema": {
            "type": "string"
          },
          "description": "A GUID represents the Practice ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
          "required": true
        }
      ],
      "post": {
        "summary": "Create holiday session",
        "operationId": "createHolidaySession",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HolidaySessionResponseType",
                  "type": "object",
                  "description": "Holiday session response model",
                  "x-internal": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                      "format": "uuid",
                      "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
                    },
                    "practiceId": {
                      "type": "string",
                      "description": "A GUID represents the practice ID.",
                      "format": "uuid",
                      "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
                    },
                    "userId": {
                      "type": "string",
                      "description": "A GUID represents the practitioner ID.",
                      "format": "uuid",
                      "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                    },
                    "sessionName": {
                      "type": "string",
                      "description": "The session name.",
                      "example": "Holiday session"
                    },
                    "startDate": {
                      "type": "string",
                      "description": "The session start date with format `YYYY-MM-DD`",
                      "example": "2021-08-18",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "description": "The session end date with format `YYYY-MM-DD`",
                      "example": "2026-08-18",
                      "format": "date"
                    },
                    "userName": {
                      "type": "string",
                      "description": "The practitioner name.",
                      "example": "Mr John Smith"
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "userId",
                    "sessionName"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                      "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                      "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                      "sessionName": "Holiday session",
                      "startDate": "2021-08-18",
                      "endDate": "2021-08-19",
                      "userName": "Mr John Smith",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2021-08-18T10:30:26Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2021-08-18T10:30:26Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Field Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "userId",
                          "value": "xxx",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Holiday Sessions"
        ],
        "description": "Create holiday session for a given practice id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "HolidaySessionRequestType",
                "type": "object",
                "description": "Update holiday session request model",
                "x-internal": false,
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "A GUID represents the practitioner ID.",
                    "format": "uuid",
                    "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                  },
                  "sessionName": {
                    "type": "string",
                    "description": "The session name.",
                    "example": "Holiday session"
                  },
                  "startDate": {
                    "type": "string",
                    "description": "The session start date with format `YYYY-MM-DD`",
                    "example": "2021-08-18",
                    "format": "date"
                  },
                  "endDate": {
                    "type": "string",
                    "description": "The session end date with format `YYYY-MM-DD`",
                    "example": "2026-08-18",
                    "format": "date"
                  }
                },
                "required": [
                  "userId",
                  "sessionName",
                  "startDate",
                  "endDate"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                    "sessionName": "Holiday session",
                    "startDate": "2021-08-18",
                    "endDate": "2021-08-19"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Search all holiday sessions",
        "tags": [
          "Holiday Sessions"
        ],
        "operationId": "searchPracticeHolidaySessions",
        "description": "Get all holiday sessions for a given practice ID",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "userId",
            "description": "A GUID represents Practitioner ID. See [Resource Identifier](../../#Resource-Identifier) format"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HolidaySessionResponseTypeBundle",
                  "type": "object",
                  "properties": {
                    "data": {
                      "title": "HolidaySessionResponseType",
                      "type": "object",
                      "description": "Holiday session response model",
                      "x-internal": false,
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                          "format": "uuid",
                          "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
                        },
                        "practiceId": {
                          "type": "string",
                          "description": "A GUID represents the practice ID.",
                          "format": "uuid",
                          "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
                        },
                        "userId": {
                          "type": "string",
                          "description": "A GUID represents the practitioner ID.",
                          "format": "uuid",
                          "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                        },
                        "sessionName": {
                          "type": "string",
                          "description": "The session name.",
                          "example": "Holiday session"
                        },
                        "startDate": {
                          "type": "string",
                          "description": "The session start date with format `YYYY-MM-DD`",
                          "example": "2021-08-18",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "description": "The session end date with format `YYYY-MM-DD`",
                          "example": "2026-08-18",
                          "format": "date"
                        },
                        "userName": {
                          "type": "string",
                          "description": "The practitioner name.",
                          "example": "Mr John Smith"
                        },
                        "createdBy": {
                          "type": "string",
                          "title": "CreatedBy",
                          "description": "A GUID refers to User identifier who created the resource.",
                          "x-examples": {
                            "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "default": "UUID",
                          "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "x-internal": false
                        },
                        "createdDateTime": {
                          "type": "string",
                          "title": "CreatedDate",
                          "description": "Time when the resource was created.",
                          "x-internal": false
                        },
                        "updatedBy": {
                          "type": "string",
                          "title": "UpdatedBy",
                          "description": "A GUID refers to User identifier who updated the resource.",
                          "default": "UUID",
                          "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "x-internal": false
                        },
                        "updatedDateTime": {
                          "title": "UpdatedDate",
                          "type": "string",
                          "description": "Time when the resource was updated.",
                          "x-internal": false
                        }
                      },
                      "required": [
                        "id",
                        "practiceId",
                        "userId",
                        "sessionName"
                      ]
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalElements": {
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "List of holiday sessions with pagination": {
                    "value": {
                      "data": {
                        "id": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                        "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                        "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                        "sessionName": "Holiday session",
                        "startDate": "2021-08-18",
                        "endDate": "2021-08-19",
                        "userName": "Mr John Smith",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2021-08-18T10:30:26Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2021-08-18T10:30:26Z"
                      },
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 1,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Invalid practice id Error Response": {
                    "value": {
                      "message": "findAllByPractice.id: Invalid GUID",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "findAllByPractice.id",
                          "value": "xxx",
                          "message": "Invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ForbiddenErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Forbidden Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "example": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/practices/{practice_id}/holiday-sessions/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "practice_id",
          "schema": {
            "type": "string"
          },
          "description": "A GUID represents the Practice ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
          "required": true
        },
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "description": "A GUID represents the Session ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
          "required": true
        }
      ],
      "put": {
        "summary": "Update holiday session",
        "operationId": "updateHolidaySession",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "HolidaySessionResponseType",
                  "type": "object",
                  "description": "Holiday session response model",
                  "x-internal": false,
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                      "format": "uuid",
                      "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
                    },
                    "practiceId": {
                      "type": "string",
                      "description": "A GUID represents the practice ID.",
                      "format": "uuid",
                      "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
                    },
                    "userId": {
                      "type": "string",
                      "description": "A GUID represents the practitioner ID.",
                      "format": "uuid",
                      "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                    },
                    "sessionName": {
                      "type": "string",
                      "description": "The session name.",
                      "example": "Holiday session"
                    },
                    "startDate": {
                      "type": "string",
                      "description": "The session start date with format `YYYY-MM-DD`",
                      "example": "2021-08-18",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "description": "The session end date with format `YYYY-MM-DD`",
                      "example": "2026-08-18",
                      "format": "date"
                    },
                    "userName": {
                      "type": "string",
                      "description": "The practitioner name.",
                      "example": "Mr John Smith"
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "required": [
                    "id",
                    "practiceId",
                    "userId",
                    "sessionName"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                      "practiceId": "05a3f314-5964-4ccb-8e7f-d35db22c15be",
                      "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                      "sessionName": "Holiday session",
                      "startDate": "2021-08-18",
                      "endDate": "2021-08-20",
                      "userName": "Mr John Smith",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2021-08-18T10:30:26Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2021-08-18T10:30:26Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request With Invalid Field Error Response": {
                    "value": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "userId",
                          "value": "xxx",
                          "message": "Must be a valid value"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Holiday Sessions"
        ],
        "description": "Update holiday session for a given practice id and session id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "HolidaySessionRequestType",
                "type": "object",
                "description": "Update holiday session request model",
                "x-internal": false,
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "A GUID represents the practitioner ID.",
                    "format": "uuid",
                    "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
                  },
                  "sessionName": {
                    "type": "string",
                    "description": "The session name.",
                    "example": "Holiday session"
                  },
                  "startDate": {
                    "type": "string",
                    "description": "The session start date with format `YYYY-MM-DD`",
                    "example": "2021-08-18",
                    "format": "date"
                  },
                  "endDate": {
                    "type": "string",
                    "description": "The session end date with format `YYYY-MM-DD`",
                    "example": "2026-08-18",
                    "format": "date"
                  }
                },
                "required": [
                  "userId",
                  "sessionName",
                  "startDate",
                  "endDate"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "userId": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214",
                    "sessionName": "Holiday session",
                    "startDate": "2021-08-18",
                    "endDate": "2021-08-20"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete holiday session",
        "operationId": "deleteHolidaySession",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "5987afa6-2976-11eb-b53a-538b0f928ae9",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "No Holiday Session for Session id: {id}",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access Denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_type"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete a Holiday Session by Id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Holiday Sessions"
        ]
      }
    },
    "/v1/tags/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "A GUID for tag identifier. It has unique value for identify this resource and it is mandatory in `PUT` and `DELETE` operation to execute these operations based on given id"
        }
      ],
      "put": {
        "summary": "Update Tag",
        "operationId": "put-tags-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Tag",
                  "type": "object",
                  "description": "A model of Tag",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A GUID for tag identifier. It has unique value for identify this resource and it is mandatory",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string",
                      "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory",
                      "pattern": "^[a-zA-Z0-9]+$",
                      "maxLength": 40
                    },
                    "parentTagId": {
                      "type": [
                        "string"
                      ],
                      "maxLength": 36,
                      "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value"
                    },
                    "code": {
                      "type": [
                        "string"
                      ],
                      "maxLength": 50,
                      "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words",
                      "pattern": "^[a-zA-Z0-9]+$"
                    },
                    "colour": {
                      "type": "string",
                      "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                      "maxLength": 7,
                      "default": "#000000",
                      "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
                    },
                    "description": {
                      "type": [
                        "string"
                      ],
                      "maxLength": 500,
                      "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
                    },
                    "used": {
                      "type": "boolean",
                      "description": "A flag that signifies whether the tag has been linked to any entities"
                    },
                    "createdBy": {
                      "type": "string",
                      "description": "A GUID refers to User identifier who created the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                    },
                    "createdDateTime": {
                      "type": "string",
                      "description": "Time when the resource was created. See [Timezone](../../#Timezones) for the format"
                    },
                    "updatedBy": {
                      "type": "string",
                      "description": "A GUID refers to User identifier who updated the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70"
                    },
                    "updatedDateTime": {
                      "type": "string",
                      "description": "Time when the resource was updated. See [Timezone](../../#Timezones) for the format"
                    }
                  },
                  "required": [
                    "name",
                    "colour",
                    "used",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                      "name": "PatientSmoking",
                      "parentTagId": "e7d882be-20a1-11ea-bdbf-b7e78ea1b20a",
                      "code": "112233",
                      "colour": "#000000",
                      "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                      "used": false,
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2018-08-30 05:26:16.338",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2018-08-30 05:26:16.339"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "errors",
                    "type",
                    "code"
                  ],
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_token"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update tag for a given tag id",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$",
                    "maxLength": 40,
                    "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory"
                  },
                  "parentTagId": {
                    "type": [
                      "string"
                    ],
                    "maxLength": 36,
                    "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value"
                  },
                  "code": {
                    "type": [
                      "string"
                    ],
                    "pattern": "^[a-zA-Z0-9]+$",
                    "maxLength": 50,
                    "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words"
                  },
                  "colour": {
                    "type": "string",
                    "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                    "maxLength": 7,
                    "default": "#000000",
                    "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
                  },
                  "description": {
                    "type": [
                      "string"
                    ],
                    "maxLength": 500,
                    "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
                  }
                },
                "required": [
                  "name",
                  "colour"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "PatientSmoking",
                    "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                    "code": "112233",
                    "colour": "#FFFFFF",
                    "description": "Lorem ipsum dolor sit amet"
                  }
                }
              }
            }
          },
          "description": "Request payload to update tag"
        }
      },
      "delete": {
        "summary": "Delete Tag",
        "operationId": "delete-tags-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "Successfully deleted",
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "errors",
                    "type",
                    "code"
                  ],
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "null",
                          "message": "id is required to perform this operation"
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete tag for a given tag id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/tags": {
      "get": {
        "summary": "Get All Tags",
        "tags": [
          "Tags"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "data": {
                      "type": "array",
                      "uniqueItems": false,
                      "items": {
                        "title": "Tag",
                        "type": "object",
                        "description": "A model of Tag",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A GUID for tag identifier. It has unique value for identify this resource and it is mandatory",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory",
                            "pattern": "^[a-zA-Z0-9]+$",
                            "maxLength": 40
                          },
                          "parentTagId": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 36,
                            "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value"
                          },
                          "code": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 50,
                            "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words",
                            "pattern": "^[a-zA-Z0-9]+$"
                          },
                          "colour": {
                            "type": "string",
                            "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                            "maxLength": 7,
                            "default": "#000000",
                            "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
                          },
                          "description": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 500,
                            "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
                          },
                          "used": {
                            "type": "boolean",
                            "description": "A flag that signifies whether the tag has been linked to any entities"
                          },
                          "createdBy": {
                            "type": "string",
                            "description": "A GUID refers to User identifier who created the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "description": "Time when the resource was created. See [Timezone](../../#Timezones) for the format"
                          },
                          "updatedBy": {
                            "type": "string",
                            "description": "A GUID refers to User identifier who updated the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70"
                          },
                          "updatedDateTime": {
                            "type": "string",
                            "description": "Time when the resource was updated. See [Timezone](../../#Timezones) for the format"
                          }
                        },
                        "required": [
                          "name",
                          "colour",
                          "used",
                          "createdBy",
                          "createdDateTime",
                          "updatedBy",
                          "updatedDateTime"
                        ],
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "number"
                    },
                    "totalElements": {
                      "type": "number"
                    },
                    "numberOfElements": {
                      "type": "number"
                    },
                    "size": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "first",
                    "last",
                    "totalPages",
                    "totalElements",
                    "numberOfElements",
                    "size",
                    "page"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "data": [
                        {
                          "id": "e7d882be-20a1-11ea-bdbf-b7e78ea1b20a",
                          "name": "PatientSmoking",
                          "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                          "code": "112233",
                          "colour": "#FFFFFF",
                          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                          "used": false,
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2021-10-18 09:24:30.215",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2021-10-25 12:53:30.215"
                        },
                        {
                          "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "name": "OldPatient",
                          "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                          "code": "12435",
                          "colour": "#4287f5",
                          "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                          "used": false,
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2021-10-18 09:24:30.215",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2021-10-25 12:53:30.215"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 20,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "errors",
                    "type",
                    "code"
                  ],
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "id is required to perform this operation"
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "minLength": 1
                    },
                    "error_description": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-examples": {
                    "example-1": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "minLength": 1
                    },
                    "error_description": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-examples": {
                    "example-1": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "x-examples": {
                    "example-1": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-secure-api-mrapp-tags",
        "description": "Get list of all tags. User can also add query parameters such as page and limit for pagination purpose.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "integer",
              "default": 0
            },
            "in": "query",
            "name": "page",
            "description": "The page to be returned"
          },
          {
            "schema": {
              "type": "integer",
              "default": 20
            },
            "in": "query",
            "name": "size",
            "description": "The number of items to be returned"
          }
        ],
        "x-internal": false
      },
      "post": {
        "summary": "Create Tag",
        "operationId": "post-tags",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Tag",
                  "type": "object",
                  "description": "A model of Tag",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A GUID for tag identifier. It has unique value for identify this resource and it is mandatory",
                      "format": "uuid"
                    },
                    "name": {
                      "type": "string",
                      "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory",
                      "pattern": "^[a-zA-Z0-9]+$",
                      "maxLength": 40
                    },
                    "parentTagId": {
                      "type": [
                        "string"
                      ],
                      "maxLength": 36,
                      "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value"
                    },
                    "code": {
                      "type": [
                        "string"
                      ],
                      "maxLength": 50,
                      "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words",
                      "pattern": "^[a-zA-Z0-9]+$"
                    },
                    "colour": {
                      "type": "string",
                      "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                      "maxLength": 7,
                      "default": "#000000",
                      "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
                    },
                    "description": {
                      "type": [
                        "string"
                      ],
                      "maxLength": 500,
                      "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
                    },
                    "used": {
                      "type": "boolean",
                      "description": "A flag that signifies whether the tag has been linked to any entities"
                    },
                    "createdBy": {
                      "type": "string",
                      "description": "A GUID refers to User identifier who created the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                    },
                    "createdDateTime": {
                      "type": "string",
                      "description": "Time when the resource was created. See [Timezone](../../#Timezones) for the format"
                    },
                    "updatedBy": {
                      "type": "string",
                      "description": "A GUID refers to User identifier who updated the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70"
                    },
                    "updatedDateTime": {
                      "type": "string",
                      "description": "Time when the resource was updated. See [Timezone](../../#Timezones) for the format"
                    }
                  },
                  "required": [
                    "name",
                    "colour",
                    "used",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                      "name": "PatientSmoking",
                      "parentTagId": "e7d882be-20a1-11ea-bdbf-b7e78ea1b20a",
                      "code": "112233",
                      "colour": "#000000",
                      "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
                      "used": false,
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2018-08-30 05:26:16.338",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2018-08-30 05:26:16.339"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  },
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ]
                      }
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message",
                    "errors",
                    "type",
                    "code"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "string",
                      "error_description": "string"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "Unauthorized",
                      "error_description": "You must have explicit, authorized permission to access or configure this system"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "error": "invalid_token",
                      "error_description": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "invalid_token",
                      "error_description": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "code": "string",
                      "message": "string"
                    }
                  },
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": 500,
                      "message": "Internal server errors"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 40,
                    "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory",
                    "pattern": "^[a-zA-Z0-9]+$"
                  },
                  "parentTagId": {
                    "type": [
                      "string"
                    ],
                    "maxLength": 36,
                    "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value",
                    "format": "uuid"
                  },
                  "code": {
                    "type": [
                      "string"
                    ],
                    "maxLength": 40,
                    "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words",
                    "pattern": "^[a-zA-Z0-9]+$"
                  },
                  "colour": {
                    "type": "string",
                    "maxLength": 7,
                    "default": "#000000",
                    "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                    "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
                  },
                  "description": {
                    "type": [
                      "string"
                    ],
                    "maxLength": 500,
                    "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
                  }
                },
                "required": [
                  "name",
                  "colour"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "PatientSmoking",
                    "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                    "code": "112233",
                    "colour": "#FFFFFF",
                    "description": "Lorem ipsum dolor sit amet"
                  }
                }
              }
            }
          },
          "description": "Request payload to create tag"
        },
        "tags": [
          "Tags"
        ],
        "description": "Create new tag",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      },
      "parameters": []
    },
    "/v1/tags/search": {
      "get": {
        "summary": "Search Tag by Name",
        "tags": [
          "Tags"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A JSON object repesent list of workflow with pagination",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "A list with a data property that contains an array of tags. Each entry in the array is a separate tag object. If no more tags are available, the resulting array will be empty.",
                      "items": {
                        "title": "Tag",
                        "type": "object",
                        "description": "A model of Tag",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A GUID for tag identifier. It has unique value for identify this resource and it is mandatory",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory",
                            "pattern": "^[a-zA-Z0-9]+$",
                            "maxLength": 40
                          },
                          "parentTagId": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 36,
                            "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value"
                          },
                          "code": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 50,
                            "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words",
                            "pattern": "^[a-zA-Z0-9]+$"
                          },
                          "colour": {
                            "type": "string",
                            "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                            "maxLength": 7,
                            "default": "#000000",
                            "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
                          },
                          "description": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 500,
                            "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
                          },
                          "used": {
                            "type": "boolean",
                            "description": "A flag that signifies whether the tag has been linked to any entities"
                          },
                          "createdBy": {
                            "type": "string",
                            "description": "A GUID refers to User identifier who created the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "description": "Time when the resource was created. See [Timezone](../../#Timezones) for the format"
                          },
                          "updatedBy": {
                            "type": "string",
                            "description": "A GUID refers to User identifier who updated the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70"
                          },
                          "updatedDateTime": {
                            "type": "string",
                            "description": "Time when the resource was updated. See [Timezone](../../#Timezones) for the format"
                          }
                        },
                        "required": [
                          "name",
                          "colour",
                          "used",
                          "createdBy",
                          "createdDateTime",
                          "updatedBy",
                          "updatedDateTime"
                        ],
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean",
                      "description": "Indicates first page"
                    },
                    "last": {
                      "type": "boolean",
                      "description": "Indicate last page"
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "total available page"
                    },
                    "totalElements": {
                      "type": "number",
                      "description": "total available element"
                    },
                    "numberOfElements": {
                      "type": "number",
                      "description": "no of element in current page"
                    },
                    "size": {
                      "type": "number",
                      "description": "page size requested"
                    },
                    "page": {
                      "type": "number",
                      "description": "current page"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "data": [
                        {
                          "id": "e7d882be-20a1-11ea-bdbf-b7e78ea1b20a",
                          "name": "PatientSmoking",
                          "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                          "code": "112233",
                          "colour": "#FFFFFF",
                          "description": "Tag is used for smoking patient data",
                          "used": false,
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2021-10-18 09:24:30.215",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2021-10-25 12:53:30.215"
                        },
                        {
                          "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "name": "OldPatient",
                          "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                          "code": "12435",
                          "colour": "#4287f5",
                          "description": "Tag is used for patient data with age over 40",
                          "used": false,
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2021-10-18 09:24:30.215",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2021-10-25 12:53:30.215"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 0,
                      "totalElements": 0,
                      "numberOfElements": 0,
                      "size": 0,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "code": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "message",
                    "errors",
                    "type",
                    "code"
                  ],
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "inittag00 1",
                          "message": "must match \"^[a-zA-Z0-9]+$\""
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "search.name: size must be between 3 and 40",
                      "errors": [
                        {
                          "parameter": "search.name",
                          "value": "t",
                          "message": "size must be between 3 and 40"
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "minLength": 1
                    },
                    "error_description": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-examples": {
                    "example-1": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "minLength": 1
                    },
                    "error_description": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-examples": {
                    "example-1": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "x-examples": {
                    "example-1": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-secure-api-mrapp-tags-search",
        "description": "Return list of tag data where the tag names partially or whole match the search term which has been defined.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "example": "PatientSmoking",
              "pattern": "^[a-zA-Z0-9]+$",
              "maxLength": 40
            },
            "in": "query",
            "name": "name",
            "description": "Represents tag name, it has minimal 3 and no more than 40 characters, can not use space between each word"
          },
          {
            "schema": {
              "type": "integer",
              "default": 0
            },
            "in": "query",
            "name": "page",
            "description": "The page to be returned"
          },
          {
            "schema": {
              "type": "integer",
              "default": 20
            },
            "in": "query",
            "name": "size",
            "description": "The number of items to be returned"
          }
        ]
      },
      "parameters": []
    },
    "/v1/tagging-entity": {
      "parameters": [],
      "post": {
        "summary": "Add a tag to an entity",
        "operationId": "create-tag-entity",
        "responses": {
          "201": {
            "description": "Created.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "title": "TagEntity",
                  "type": "object",
                  "description": "A model representing a relationship between a tag and an entity.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "maxLength": 36,
                      "description": "A globally unique identifier (GUID) for tag record. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                      "example": "2b0f7904-3bee-4214-89a4-a5b682e6204b",
                      "format": "uuid"
                    },
                    "tagId": {
                      "type": "string",
                      "title": "TagId",
                      "maxLength": 36,
                      "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                      "format": "uuid",
                      "x-examples": {
                        "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "entityId": {
                      "type": "string",
                      "title": "EntityId",
                      "maxLength": 36,
                      "description": "A globally unique identifier (GUID) for an entity being linked to a tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                      "format": "uuid",
                      "x-examples": {
                        "example-1": "6e0a119d-04ee-4bad-b848-5371638d6450"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "entityType": {
                      "title": "EntityType",
                      "type": "number",
                      "description": "A type identifier for an entity being linked to a tag. This a mandatory field.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDateTime",
                      "description": "A date and time for when the resource is created. This a mandatory field.",
                      "format": "date-time",
                      "x-examples": {
                        "example-1": "2018-08-30 05:26:16.338"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A globally unique identifier (GUID) for the user who created the resource. This a mandatory field.",
                      "format": "uuid",
                      "x-examples": {
                        "example-1": "3eafe8b8-5a60-4019-acdf-50397a220dfe"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "updatedDateTime": {
                      "type": "string",
                      "title": "UpdatedDateTime",
                      "description": "A date and time for when the resource is last updated. This a mandatory field.",
                      "format": "date-time",
                      "x-examples": {
                        "example-1": "2018-08-30 05:26:16.338"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A globally unique identifier (GUID) for the user who updated the resource. This a mandatory field.",
                      "format": "uuid",
                      "x-examples": {
                        "example-1": "75f87ad1-d7be-47df-a3a3-b4e591abb0b3"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "tagId",
                    "entityId",
                    "entityType",
                    "createdDateTime",
                    "createdBy",
                    "updatedDateTime",
                    "updatedBy"
                  ],
                  "x-examples": {
                    "example-1": {
                      "id": "2b0f7904-3bee-4214-89a4-a5b682e6204b",
                      "tagId": "eab7aa24-56f0-11eb-9499-0b1199252fc0",
                      "entityId": "6e0a119d-04ee-4bad-b848-5371638d6450",
                      "entityType": 1,
                      "createdDateTime": "2018-08-30 05:26:16.338",
                      "createdBy": "3eafe8b8-5a60-4019-acdf-50397a220dfe",
                      "updatedDateTime": "2018-08-30 05:26:16.338",
                      "updatedBy": "75f87ad1-d7be-47df-a3a3-b4e591abb0b3"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request."
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "x-examples": {
              "example": {
                "error": "conflict",
                "error_description": "Conflict"
              }
            },
            "description": "Conflict.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "conflict"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "conflict",
                      "error_description": "The resource is already existing"
                    }
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "URL pointing to the existing resource"
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "500",
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            },
            "x-examples": {
              "Example": {
                "code": "unknown_error_code",
                "type": "unknown_error_type",
                "message": "Oops! Appears that an error has occurred"
              }
            },
            "description": "Generic error response model"
          }
        },
        "description": "Creates a link between a given tag and a given entity.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "x-internal": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tagId": {
                    "type": "string",
                    "title": "TagId",
                    "maxLength": 36,
                    "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                    "format": "uuid",
                    "x-examples": {
                      "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "entityId": {
                    "type": "string",
                    "title": "EntityId",
                    "maxLength": 36,
                    "description": "A globally unique identifier (GUID) for an entity being linked to a tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                    "format": "uuid",
                    "x-examples": {
                      "example-1": "6e0a119d-04ee-4bad-b848-5371638d6450"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "entityType": {
                    "title": "EntityType",
                    "type": "number",
                    "description": "A type identifier for an entity being linked to a tag. This a mandatory field.",
                    "x-examples": {
                      "example-1": 1
                    },
                    "x-tags": [
                      "Other"
                    ]
                  }
                },
                "required": [
                  "tagId",
                  "entityId",
                  "entityType"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "tagId": "f69eb9f1-ae9f-4086-b25c-c39758a43fb3",
                    "entityId": "156e622c-6cdf-4c27-9bc9-2f2db69919f5",
                    "entityType": 1
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Tagging Entity"
        ]
      },
      "delete": {
        "summary": "Remove a tag from an entity",
        "operationId": "delete-tag-entity",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tag record id of the resource that was deleted"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "2b0f7904-3bee-4214-89a4-a5b682e6204b",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "message": "The resource being accessed is not found",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  },
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message",
                    "type",
                    "code"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "The resource being accessed is not found",
                      "type": "data_access_error",
                      "code": "record_not_found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "500",
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            },
            "x-examples": {
              "Example": {
                "code": "unknown_error_code",
                "type": "unknown_error_type",
                "message": "Oops! Appears that an error has occurred"
              }
            },
            "description": "Generic error response model"
          }
        },
        "x-internal": false,
        "description": "Removes a existing link between a given tag and a given entity",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tagId": {
                    "type": "string",
                    "title": "TagId",
                    "maxLength": 36,
                    "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                    "format": "uuid",
                    "x-examples": {
                      "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "entityId": {
                    "type": "string",
                    "title": "EntityId",
                    "maxLength": 36,
                    "description": "A globally unique identifier (GUID) for an entity being linked to a tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                    "format": "uuid",
                    "x-examples": {
                      "example-1": "6e0a119d-04ee-4bad-b848-5371638d6450"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "entityType": {
                    "title": "EntityType",
                    "type": "number",
                    "description": "A type identifier for an entity being linked to a tag. This a mandatory field.",
                    "x-examples": {
                      "example-1": 1
                    },
                    "x-tags": [
                      "Other"
                    ]
                  }
                },
                "required": [
                  "tagId",
                  "entityId",
                  "entityType"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "tagId": "f69eb9f1-ae9f-4086-b25c-c39758a43fb3",
                    "entityId": "156e622c-6cdf-4c27-9bc9-2f2db69919f5",
                    "entityType": 1
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Tagging Entity"
        ]
      }
    },
    "/v1/tagging-entity/{entityType}/{entityId}/tags": {
      "parameters": [
        {
          "schema": {
            "type": "number"
          },
          "name": "entityType",
          "in": "path",
          "required": true,
          "description": "A type identifier for an entity being linked to a tag"
        },
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "maxLength": 36
          },
          "name": "entityId",
          "in": "path",
          "required": true,
          "description": "A globally unique identifier (GUID) for an entity being linked to a tag. This field has maximum limit of no more than 36 characters, and is mandatory field."
        }
      ],
      "get": {
        "summary": "Find tags by entity id and entity type",
        "tags": [
          "Tagging Entity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "Tag",
                        "type": "object",
                        "description": "A model of Tag",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A GUID for tag identifier. It has unique value for identify this resource and it is mandatory",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory",
                            "pattern": "^[a-zA-Z0-9]+$",
                            "maxLength": 40
                          },
                          "parentTagId": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 36,
                            "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value"
                          },
                          "code": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 50,
                            "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words",
                            "pattern": "^[a-zA-Z0-9]+$"
                          },
                          "colour": {
                            "type": "string",
                            "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
                            "maxLength": 7,
                            "default": "#000000",
                            "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
                          },
                          "description": {
                            "type": [
                              "string"
                            ],
                            "maxLength": 500,
                            "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
                          },
                          "used": {
                            "type": "boolean",
                            "description": "A flag that signifies whether the tag has been linked to any entities"
                          },
                          "createdBy": {
                            "type": "string",
                            "description": "A GUID refers to User identifier who created the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "description": "Time when the resource was created. See [Timezone](../../#Timezones) for the format"
                          },
                          "updatedBy": {
                            "type": "string",
                            "description": "A GUID refers to User identifier who updated the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70"
                          },
                          "updatedDateTime": {
                            "type": "string",
                            "description": "Time when the resource was updated. See [Timezone](../../#Timezones) for the format"
                          }
                        },
                        "required": [
                          "name",
                          "colour",
                          "used",
                          "createdBy",
                          "createdDateTime",
                          "updatedBy",
                          "updatedDateTime"
                        ],
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean"
                    },
                    "last": {
                      "type": "boolean"
                    },
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalElements": {
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "data": [
                        {
                          "id": "e7d882be-20a1-11ea-bdbf-b7e78ea1b20a",
                          "name": "PatientSmoking",
                          "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                          "code": "112233",
                          "colour": "#FFFFFF",
                          "description": "Tag to label smoking patient",
                          "used": false,
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2021-10-18 09:24:30.215",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2021-10-25 12:53:30.215"
                        },
                        {
                          "id": "e7d882be-20a1-11ea-bdbf-b7e78ea1b20a",
                          "name": "PatientSmoking",
                          "parentTagId": "01e608e4-c5d0-11e8-b262-377cdf40a37d",
                          "code": "112233",
                          "colour": "#FFFFFF",
                          "description": "Tag to label smoking patient",
                          "used": false,
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2021-10-18 09:24:30.215",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2021-10-25 12:53:30.215"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 0,
                      "totalElements": 0,
                      "numberOfElements": 0,
                      "size": 0,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1
                    },
                    "errors": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "properties": {
                          "parameter": {
                            "type": "string",
                            "minLength": 1
                          },
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "message": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message",
                    "errors"
                  ],
                  "x-examples": {
                    "example-1": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "entityType",
                          "value": "patient",
                          "message": "Invalid Entity Type"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "entityType",
                          "value": "patient",
                          "message": "Invalid Entity Type"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "minLength": 1
                    },
                    "error_description": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-examples": {
                    "example-1": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "Unauthorized",
                      "error_description": "Unauthorized request, unauthenticated user"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "minLength": 1
                    },
                    "error_description": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-examples": {
                    "example-1": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "invalid_token",
                      "error_description": "invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "x-examples": {
                    "example-1": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": 500,
                      "message": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-secure-api-mrapp-tagging-entity-entityType-entityId",
        "description": "Get all tags by given entity id and entity type",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "page",
            "description": "The page to be returned"
          },
          {
            "schema": {
              "type": "integer",
              "default": 10
            },
            "in": "query",
            "name": "size",
            "description": "The number of items to be returned"
          }
        ]
      }
    },
    "/v1/tags/status": {
      "put": {
        "summary": "Set Tag Status",
        "operationId": "set-tag-status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "title": "TagId",
                      "maxLength": 36,
                      "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                      "format": "uuid",
                      "x-examples": {
                        "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully deactivated"
                    }
                  }
                },
                "examples": {
                  "Activate": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "message": "Successfully changed status to active"
                    }
                  },
                  "Deactivate": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "message": "Successfully changed status to inactive"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request."
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tags"
        ],
        "description": "Sets a new status for a given tag. This only allows a maximum of:\n* 300 active tags\n* 300 inactive tags\n\nUnder this, it only allows the following number of parent tags (root tag of linked tags):\n* 50 active tags\n* 50 inactive tags",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "title": "TagId",
                    "maxLength": 36,
                    "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                    "format": "uuid",
                    "x-examples": {
                      "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "status": {
                    "type": "number",
                    "example": 1,
                    "minimum": 1,
                    "maximum": 2,
                    "description": "The new status of the tag. This field only accepts these values:\\\n1 - Active\\\n2 - Inactive"
                  }
                },
                "required": [
                  "id",
                  "status"
                ]
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/v1/tagging-entity/{tagId}/{entityType}/entities": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tagId",
          "in": "path",
          "required": true,
          "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field."
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "entityType",
          "in": "path",
          "required": true,
          "description": "A type identifier for an entity being linked to a tag. This a mandatory field."
        }
      ],
      "get": {
        "summary": "Get all entities by tag id and entity type",
        "tags": [
          "Tagging Entity"
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "TagEntityResult",
                  "type": "object",
                  "properties": {
                    "patients": {
                      "title": "PatientPage",
                      "type": "object",
                      "x-examples": {
                        "Full Response with pagination": {
                          "data": [
                            {
                              "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                              "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                              "titleId": 315890000,
                              "firstName": "Timothy",
                              "lastName": "Mark",
                              "middleName": "David",
                              "preferredName": "Tim",
                              "previouslyKnownAs": "Jake",
                              "fullName": "Timothy Mark",
                              "genderCode": 2,
                              "dob": "1970-12-08",
                              "estimated": true,
                              "oneNameOnly": "false",
                              "dateOfDeath": "12/01/2010",
                              "causeOfDeath": "Cancer",
                              "patientStatusCode": 2,
                              "ethnicityCode": 55,
                              "esl": true,
                              "atsiId": 4,
                              "ctgCoPaymentRelief": true,
                              "placeOfBirth": "Sydney",
                              "skinCode": 16,
                              "languageSpokenAtHome": 0,
                              "homePhone": 298761234,
                              "mobilePhone": "0413324123",
                              "workPhone": 298671234,
                              "email": "Timothy.Mark@nedirecords.com",
                              "contactMethod": 1,
                              "note": "Patient had a mild fever",
                              "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "createdDateTime": "2019-08-24T14:15:22Z",
                              "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                              "updatedDateTime": "2019-08-24T14:15:22Z"
                            }
                          ],
                          "first": true,
                          "last": false,
                          "totalPages": 3,
                          "totalElements": 29,
                          "numberOfElements": 10,
                          "size": 10,
                          "page": 0
                        }
                      },
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "title": "PatientResponse",
                            "description": "The Patient Response properties that are included for a patient",
                            "type": "object",
                            "x-examples": {
                              "Full Patient Response": {
                                "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                                "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                                "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                                "titleCode": 315890000,
                                "firstName": "Timothy",
                                "lastName": "Mark",
                                "middleName": "David",
                                "preferredName": "Tim",
                                "previouslyKnownAs": "Jake",
                                "fullName": "Timothy Mark",
                                "gender": 2,
                                "dob": "1970-12-12",
                                "estimated": true,
                                "oneNameOnly": "false",
                                "dateOfDeath": "2018-03-04",
                                "causeOfDeath": "Cancer",
                                "patientStatusCode": 2,
                                "ethnicityCode": 55,
                                "englishAsSecondLanguage": true,
                                "atsi": 1,
                                "ctgCoPaymentRelief": true,
                                "placeOfBirth": "Sydney",
                                "skinCode": 16,
                                "languageSpokenAtHome": 1,
                                "homePhone": 298761234,
                                "mobilePhone": "0413324123",
                                "workPhone": 298671234,
                                "email": "Timothy.Mark@nedirecords.com",
                                "contactMethod": 1,
                                "notes": "Patient had a mild fever",
                                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              }
                            },
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                                "format": "uuid",
                                "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                              },
                              "defaultPracticeId": {
                                "type": "string",
                                "description": "Default practice id where the patient details are created",
                                "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                                "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                                "format": "uuid",
                                "nullable": true
                              },
                              "usualDoctorId": {
                                "type": "string",
                                "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                                "description": "A user id that represents the usual doctor for the patient",
                                "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                                "format": "uuid",
                                "nullable": true
                              },
                              "titleCode": {
                                "type": "integer",
                                "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                                "example": 315890000
                              },
                              "firstName": {
                                "type": "string",
                                "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                                "minLength": 1,
                                "maxLength": 40,
                                "example": "Timothy",
                                "nullable": true
                              },
                              "lastName": {
                                "type": "string",
                                "description": "Represents patient last name",
                                "minLength": 1,
                                "maxLength": 40,
                                "example": "Mark"
                              },
                              "middleName": {
                                "type": "string",
                                "description": "Represents the patient middle name",
                                "minLength": 0,
                                "maxLength": 40,
                                "example": "David",
                                "nullable": true
                              },
                              "preferredName": {
                                "type": "string",
                                "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                                "minLength": 0,
                                "maxLength": 40,
                                "example": "Tim",
                                "nullable": true
                              },
                              "previouslyKnownAs": {
                                "type": "string",
                                "description": "Represents the patient previously known name",
                                "maxLength": 40,
                                "example": "Jake",
                                "minLength": 0,
                                "nullable": true
                              },
                              "fullName": {
                                "type": "string",
                                "description": "Represents the patient full name",
                                "nullable": true
                              },
                              "gender": {
                                "type": "integer",
                                "title": "Gender",
                                "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                                "default": 0,
                                "example": 2,
                                "x-examples": {
                                  "Male": 2
                                },
                                "x-internal": false
                              },
                              "dob": {
                                "type": "string",
                                "title": "DateOfBirth",
                                "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                                "format": "date",
                                "default": "1970-01-10",
                                "example": "1970-01-10",
                                "x-examples": {
                                  "Date of Birth": "1970-01-10"
                                },
                                "x-tags": [
                                  "Other"
                                ]
                              },
                              "estimated": {
                                "type": "boolean",
                                "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                                "nullable": true
                              },
                              "oneNameOnly": {
                                "type": "boolean",
                                "example": false,
                                "description": "The flag is set to true, if the patient has one name only",
                                "nullable": true
                              },
                              "dateOfDeath": {
                                "type": "string",
                                "nullable": true,
                                "title": "DateOfDeath",
                                "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                                "default": "yyyy-MM-dd",
                                "example": "2018-12-01",
                                "x-examples": {
                                  "Date Of Death Format": "2018-12-01"
                                },
                                "x-tags": [
                                  "Other"
                                ]
                              },
                              "causeOfDeath": {
                                "type": "string",
                                "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                                "example": "Cancer",
                                "maxLength": 300,
                                "nullable": true
                              },
                              "patientStatusCode": {
                                "type": "integer",
                                "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                                "example": 2,
                                "nullable": true
                              },
                              "ethnicityCode": {
                                "type": "integer",
                                "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                                "example": 55,
                                "nullable": true
                              },
                              "englishAsSecondLanguage": {
                                "type": "boolean",
                                "description": "If english is the patient second language the flag is set as true else it is set to false",
                                "nullable": true
                              },
                              "atsiStatus": {
                                "type": "integer",
                                "title": "Atsi",
                                "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                                "example": 4,
                                "nullable": true,
                                "x-tags": [
                                  "Other"
                                ]
                              },
                              "ctgCoPaymentRelief": {
                                "type": "boolean",
                                "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                                "nullable": true
                              },
                              "placeOfBirth": {
                                "type": "string",
                                "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                                "example": "Sydney",
                                "maxLength": 100,
                                "nullable": true
                              },
                              "skinCode": {
                                "type": "integer",
                                "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                                "example": 16,
                                "nullable": true
                              },
                              "languageSpokenAtHome": {
                                "title": "LanguageSpokenAtHome",
                                "type": "integer",
                                "nullable": true,
                                "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                                "x-examples": {
                                  "example-1": 1
                                },
                                "x-internal": false
                              },
                              "homePhone": {
                                "type": "string",
                                "nullable": true,
                                "title": "HomePhone",
                                "x-examples": {
                                  "HomePhone Number": "0298761234"
                                },
                                "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                                "x-tags": [
                                  "Common Models"
                                ],
                                "maxLength": 10,
                                "example": "0298761234",
                                "x-internal": false,
                                "minLength": 8
                              },
                              "mobilePhone": {
                                "type": "string",
                                "nullable": true,
                                "title": "MobilePhone",
                                "x-examples": {
                                  "MobileNumber": "0413324123"
                                },
                                "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                                "x-tags": [
                                  "Common Models"
                                ],
                                "example": "0413324123",
                                "maxLength": 10,
                                "x-internal": false,
                                "minLength": 8
                              },
                              "workPhone": {
                                "type": "string",
                                "nullable": true,
                                "title": "OfficePhone",
                                "x-examples": {
                                  "OfficePhoneNumber": "0298671234"
                                },
                                "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                                "x-tags": [
                                  "Common Models"
                                ],
                                "example": "0298671234",
                                "maxLength": 10,
                                "x-internal": false,
                                "minLength": 8
                              },
                              "email": {
                                "type": "string",
                                "nullable": true,
                                "title": "Email",
                                "description": "Represents the patient email id.",
                                "x-examples": {
                                  "Email": "Timothy.Mark@nedirecords.com"
                                },
                                "x-tags": [
                                  "Common Models"
                                ],
                                "format": "email",
                                "example": "Timothy.Mark@nedirecords.com",
                                "maxLength": 100,
                                "x-internal": false
                              },
                              "contactMethod": {
                                "title": "PatientContactMethod",
                                "type": "number",
                                "nullable": true,
                                "x-examples": {
                                  "example-1": 1
                                },
                                "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                                "x-tags": [
                                  "Other"
                                ]
                              },
                              "notes": {
                                "type": "string",
                                "description": "Any comments or notes can be recorded in this field",
                                "maxLength": 500,
                                "example": "Patient had a mild fever",
                                "nullable": true
                              },
                              "createdBy": {
                                "type": "string",
                                "title": "CreatedBy",
                                "description": "A GUID refers to User identifier who created the resource.",
                                "x-examples": {
                                  "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                                },
                                "default": "UUID",
                                "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                                "x-internal": false
                              },
                              "createdDateTime": {
                                "type": "string",
                                "title": "CreatedDate",
                                "description": "Time when the resource was created.",
                                "x-internal": false
                              },
                              "updatedBy": {
                                "type": "string",
                                "title": "UpdatedBy",
                                "description": "A GUID refers to User identifier who updated the resource.",
                                "default": "UUID",
                                "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                                "x-internal": false
                              },
                              "updatedDateTime": {
                                "title": "UpdatedDate",
                                "type": "string",
                                "description": "Time when the resource was updated.",
                                "x-internal": false
                              }
                            },
                            "x-tags": [
                              "Other"
                            ]
                          }
                        },
                        "first": {
                          "type": "boolean",
                          "description": "Showing the first page."
                        },
                        "last": {
                          "type": "boolean",
                          "description": "Showing the last page."
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total Pages"
                        },
                        "totalElements": {
                          "description": "Total records",
                          "type": "integer"
                        },
                        "numberOfElements": {
                          "type": "integer",
                          "description": "Total records"
                        },
                        "size": {
                          "description": "Number of records in a page",
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer",
                          "description": "current page number"
                        }
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "appointments": {
                      "type": "object"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example for Patient entity type": {
                    "value": {
                      "patients": {
                        "data": [
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "gender": 2,
                            "dob": "1970-10-12",
                            "estimated": true,
                            "oneNameOnly": false,
                            "dateOfDeath": "2014-05-08",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsiStatus": 3,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 1,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "createdDateTime": "2020-10-28T04:55:06.766Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2020-10-29T15:00:40.226Z"
                          },
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "gender": 2,
                            "dob": "1970-10-12",
                            "estimated": true,
                            "oneNameOnly": false,
                            "dateOfDeath": "2014-05-08",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsiStatus": 3,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 1,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "createdDateTime": "2020-10-28T04:55:06.766Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2020-10-29T15:00:40.226Z"
                          }
                        ],
                        "first": true,
                        "last": false,
                        "totalPages": 3,
                        "totalElements": 29,
                        "numberOfElements": 10,
                        "size": 10,
                        "page": 0
                      },
                      "appointments": {}
                    }
                  },
                  "Example for Appointment entity type": {
                    "value": {
                      "patients": {},
                      "appointments": {
                        "data": [
                          {
                            "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                            "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                            "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                            "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                            "scheduleTime": "2019-02-13 05:10:09.088",
                            "appointmentStatus": 2,
                            "appointmentIntervalCode": 6,
                            "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                            "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                            "notes": "Patient injured knee",
                            "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                            "walkIn": true,
                            "firstAvailableDoctor": true,
                            "urgency": 1,
                            "cancellationReason": 1,
                            "emailReminder": true,
                            "reminderMethod": 1,
                            "reminderType": 7,
                            "confirmationLink": "https://medirecords.page.link/JLTg",
                            "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                            "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-02-13 05:10:09.088",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-02-14 05:10:09.088"
                          }
                        ],
                        "first": true,
                        "last": true,
                        "totalPages": 1,
                        "totalElements": 2,
                        "numberOfElements": 2,
                        "size": 2,
                        "page": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request."
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-secure-api-mrapp-tagging-entity-tagId-entityType-entities",
        "description": "Get a list of all entities associated to a specific tag id and entity type",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "page",
            "description": "The page to be returned"
          },
          {
            "schema": {
              "type": "integer",
              "default": 20
            },
            "in": "query",
            "name": "size",
            "description": "The number of items to be returned"
          }
        ],
        "x-internal": false
      }
    },
    "/v1/practices/{practice_id}/providers": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "The practice identifier"
        }
      ],
      "get": {
        "summary": "Get all practice providers",
        "tags": [
          "Providers"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PracticeProviderApiResponseDto",
                        "description": "",
                        "type": "object",
                        "x-examples": {
                          "Example": {
                            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                            "titleCode": "315890000",
                            "plan": 1,
                            "firstName": "Jane",
                            "lastName": "Smith",
                            "email": "jane.smith@example.com",
                            "officePhone": 491570110,
                            "createdBy": "string",
                            "createdDateTime": "string",
                            "updatedBy": "string",
                            "updatedDateTime": "string",
                            "homePhone": "0211111111",
                            "mobilePhone": 399999999,
                            "fax": 212345678,
                            "categoryCode": "86",
                            "userCode": "JS",
                            "userName": "Jane.Smith",
                            "timeZone": 255,
                            "roleCode": "9",
                            "moduleCode": "INTEGRATED_SPECIALIS",
                            "practices": [
                              {
                                "practiceId": "92f21dec-e233-4194-bcc7-0ad88df5677f",
                                "providerNo": "2515823",
                                "ahpraNo": "BBB6789423478",
                                "medicalObject": "string",
                                "defaultPractice": true
                              }
                            ],
                            "supervisingDoctorId": "1f92b268-050a-4755-9581-81573bc0421c",
                            "prescriberNo": "2515823",
                            "abn": "51824753556",
                            "hpiINo": "string",
                            "erxId": "1234",
                            "preferredName": "Beckham",
                            "biography": "User biography",
                            "shared": true,
                            "dob": "2021-06-01",
                            "gender": 1,
                            "subSpecialities": [
                              {
                                "subSpecialityCode": "10"
                              }
                            ],
                            "languages": [
                              {
                                "languageCode": "1"
                              }
                            ],
                            "qualifications": [
                              {
                                "qualificationCode": "227"
                              }
                            ],
                            "supportEnabled": true,
                            "metadata": [
                              {
                                "key": "secondEmail",
                                "value": "jane.smith@gmail.com"
                              }
                            ],
                            "status": "Active"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Provider identifier. This is a unique identifier for this resource.",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "format": "uuid"
                          },
                          "titleCode": {
                            "type": "string",
                            "description": "Represents the user title code.\nCall the below endpoint to get the user title code lookup:\n\n/code-system/title-code.",
                            "example": "315890000"
                          },
                          "plan": {
                            "type": "integer",
                            "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time",
                            "enum": [
                              1,
                              2
                            ],
                            "example": 1
                          },
                          "firstName": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents user firstName.",
                            "maxLength": 30,
                            "example": "Jane"
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Represents user lastName.",
                            "maxLength": 30,
                            "example": "Smith"
                          },
                          "email": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the users email.",
                            "example": "jane.smith@example.com"
                          },
                          "officePhone": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the user office phone number. It is 10 digits in length.",
                            "example": 491570110
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          },
                          "homePhone": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the users  home phone number.",
                            "example": "0211111111"
                          },
                          "mobilePhone": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the users  mobile phone number.",
                            "example": 399999999
                          },
                          "fax": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the users fax number.",
                            "example": 212345678
                          },
                          "categoryCode": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the category code. \nCall the below endpoint to get the user category code lookup\n/code-system/category-code.",
                            "example": "86"
                          },
                          "userCode": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the user code.",
                            "example": "JS"
                          },
                          "userName": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the user name.",
                            "example": "Jane.Smith"
                          },
                          "timeZone": {
                            "type": "number",
                            "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart",
                            "enum": [
                              225,
                              245,
                              250,
                              255,
                              260,
                              265
                            ],
                            "example": 255
                          },
                          "roleCode": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code.",
                            "example": "9"
                          },
                          "moduleCode": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code.",
                            "example": "INTEGRATED_SPECIALIS"
                          },
                          "practices": {
                            "type": "array",
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "practiceId": {
                                  "type": "string",
                                  "minLength": 1,
                                  "description": "Represents the practice identifier.",
                                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                                  "format": "uuid"
                                },
                                "providerNo": {
                                  "type": "string",
                                  "description": "Represents the user provider number for the practice.",
                                  "maxLength": 11,
                                  "example": "2515823"
                                },
                                "ahpraNo": {
                                  "type": "string",
                                  "description": "Represents the users aphra no for the practice.",
                                  "maxLength": 13,
                                  "example": "BBB6789423478"
                                },
                                "medicalObject": {
                                  "type": "string",
                                  "description": "Represents the user medical object identifier for the practice.",
                                  "maxLength": 11
                                },
                                "defaultPractice": {
                                  "type": "boolean",
                                  "description": "Represents the user default practice."
                                }
                              },
                              "required": [
                                "practiceId",
                                "providerNo",
                                "ahpraNo",
                                "medicalObject",
                                "defaultPractice"
                              ]
                            }
                          },
                          "supervisingDoctorId": {
                            "type": "string",
                            "description": "Represents the user's supervising doctor identifier.",
                            "format": "uuid",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                          },
                          "prescriberNo": {
                            "type": "string",
                            "description": "Represents the user prescriber number.",
                            "maxLength": 7,
                            "example": "2515823"
                          },
                          "abn": {
                            "type": "string",
                            "minLength": 11,
                            "description": "Represents the users abn number.",
                            "maxLength": 11,
                            "example": "51824753556"
                          },
                          "hpiINo": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
                            "maxLength": 16
                          },
                          "erxId": {
                            "type": "string",
                            "description": "Represents the user ERX ID.",
                            "maxLength": 10,
                            "example": "1234"
                          },
                          "preferredName": {
                            "type": "string",
                            "description": "Represents the users preferred name.",
                            "example": "Beckham",
                            "maxLength": 100
                          },
                          "biography": {
                            "type": "string",
                            "description": "Represents the users biography.",
                            "maxLength": 1000,
                            "example": "User biography"
                          },
                          "shared": {
                            "type": "boolean",
                            "description": "Represents  if the users profile will be shared to the community or not."
                          },
                          "dob": {
                            "type": "string",
                            "description": "Represents the user date of birth with format YYYY-MM-DD.",
                            "example": "2021-06-01"
                          },
                          "gender": {
                            "type": "integer",
                            "description": "Represents the user gender.\n\n* `1` - Female\n* `2` - Male",
                            "enum": [
                              1,
                              2
                            ],
                            "example": 1
                          },
                          "subSpecialities": {
                            "type": "array",
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "subSpecialityCode": {
                                  "type": "string",
                                  "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup \n/code-system/subspeciality-code.",
                                  "example": "10"
                                }
                              },
                              "required": [
                                "subSpecialityCode"
                              ]
                            }
                          },
                          "languages": {
                            "type": "array",
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "languageCode": {
                                  "type": "string",
                                  "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n\n/code-system/languages-code.",
                                  "example": "1"
                                }
                              },
                              "required": [
                                "languageCode"
                              ]
                            }
                          },
                          "qualifications": {
                            "type": "array",
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "qualificationCode": {
                                  "type": "string",
                                  "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n\n/code-system/qualifications-code.",
                                  "example": "227"
                                }
                              },
                              "required": [
                                "qualificationCode"
                              ]
                            }
                          },
                          "supportEnabled": {
                            "type": "boolean",
                            "description": "Represents support agent access to this record."
                          },
                          "metadata": {
                            "type": "array",
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "description": "Represents the users metadata key.",
                                  "maxLength": 40,
                                  "example": "secondEmail"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "Represents the users metadata value.",
                                  "maxLength": 500,
                                  "example": "jane.smith@gmail.com"
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ]
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Represents the users status.",
                            "example": "Active"
                          }
                        },
                        "required": [
                          "id",
                          "titleCode",
                          "plan",
                          "firstName",
                          "lastName",
                          "email",
                          "officePhone",
                          "createdBy",
                          "createdDateTime",
                          "updatedBy",
                          "updatedDateTime",
                          "homePhone",
                          "mobilePhone",
                          "fax",
                          "categoryCode",
                          "userCode",
                          "userName",
                          "timeZone",
                          "roleCode",
                          "moduleCode",
                          "practices",
                          "supervisingDoctorId",
                          "prescriberNo",
                          "abn",
                          "hpiINo",
                          "erxId",
                          "preferredName",
                          "biography",
                          "shared",
                          "dob",
                          "gender",
                          "subSpecialities",
                          "languages",
                          "qualifications",
                          "supportEnabled",
                          "metadata",
                          "status"
                        ]
                      }
                    },
                    "first": {
                      "title": "PageableFirst",
                      "description": "Flag to indicates if it is first page or not.",
                      "type": "boolean",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "last": {
                      "title": "PageableLast",
                      "description": "Flag to indicates if it is last page or not.",
                      "type": "boolean",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "totalPages": {
                      "title": "PageableTotalPages",
                      "description": "The total pages returned.",
                      "type": "integer",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "totalElements": {
                      "title": "PageableTotalElements",
                      "description": "The total records returned.",
                      "type": "integer",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "numberOfElements": {
                      "title": "PageableNumberOfElements",
                      "description": "The maximum records in one page.",
                      "type": "integer",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "size": {
                      "title": "PageableSize",
                      "description": "The size of a page. Similar to number of elements in a page.",
                      "type": "integer",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "page": {
                      "title": "PageablePage",
                      "description": "The page number",
                      "type": "integer",
                      "x-tags": [
                        "Other"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "first",
                    "last",
                    "totalPages",
                    "totalElements",
                    "numberOfElements",
                    "size",
                    "page"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "data": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "titleCode": "315890000",
                          "plan": 1,
                          "firstName": "Jane",
                          "lastName": "Smith",
                          "email": "jane.smith@example.com",
                          "officePhone": 491570110,
                          "createdBy": "string",
                          "createdDateTime": "string",
                          "updatedBy": "string",
                          "updatedDateTime": "string",
                          "homePhone": "0211111111",
                          "mobilePhone": 399999999,
                          "fax": 212345678,
                          "categoryCode": "86",
                          "userCode": "JS",
                          "userName": "Jane.Smith",
                          "timeZone": 255,
                          "roleCode": "9",
                          "moduleCode": "INTEGRATED_SPECIALIS",
                          "practices": [
                            {
                              "practiceId": "92f21dec-e233-4194-bcc7-0ad88df5677f",
                              "providerNo": "2515823",
                              "ahpraNo": "BBB6789423478",
                              "medicalObject": "string",
                              "defaultPractice": true
                            }
                          ],
                          "supervisingDoctorId": "1f92b268-050a-4755-9581-81573bc0421c",
                          "prescriberNo": "2515823",
                          "abn": "51824753556",
                          "hpiINo": "string",
                          "erxId": "1234",
                          "preferredName": "Beckham",
                          "biography": "User biography",
                          "shared": true,
                          "dob": "2021-06-01",
                          "gender": 1,
                          "subSpecialities": [
                            {
                              "subSpecialityCode": "10"
                            }
                          ],
                          "languages": [
                            {
                              "languageCode": "1"
                            }
                          ],
                          "qualifications": [
                            {
                              "qualificationCode": "227"
                            }
                          ],
                          "supportEnabled": true,
                          "metadata": [
                            {
                              "key": "secondEmail",
                              "value": "jane.smith@gmail.com"
                            }
                          ],
                          "status": "Active"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 10,
                      "page": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "description": "Validation error response model.",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "practiceId",
                          "value": "1234",
                          "message": "invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "description": "Unauthorized error response model",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Access is denied"
                    }
                  },
                  "description": "Forbidden error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "unknown_error_type",
                      "type": "unknown_error_code",
                      "message": "Access is denied"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  },
                  "description": "Error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-practices-practice_id-providers",
        "description": "Get all providers of a practice.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "status",
            "description": "The provider status"
          },
          {
            "schema": {
              "type": "string",
              "format": "email"
            },
            "in": "query",
            "name": "email",
            "description": "The provider email"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "providerNo",
            "description": "The provider number"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ahpraNo",
            "description": "The provider AHPRA number"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "medicalObject",
            "description": "The provider medical object identifier"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "firstName",
            "description": "The provider first name"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "lastName",
            "description": "The provider last name"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "userName",
            "description": "The provider username"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "categoryCode",
            "description": "The provider category"
          }
        ]
      }
    },
    "/v1/practices/{practice_id}/providers/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "name": "practice_id",
          "in": "path",
          "required": true,
          "description": "The practice identifier"
        },
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The provider identifier"
        }
      ],
      "get": {
        "summary": "Get a practice provider",
        "tags": [
          "Providers"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PracticeProviderApiResponseDto",
                  "description": "",
                  "type": "object",
                  "x-examples": {
                    "Example": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "titleCode": "315890000",
                      "plan": 1,
                      "firstName": "Jane",
                      "lastName": "Smith",
                      "email": "jane.smith@example.com",
                      "officePhone": 491570110,
                      "createdBy": "string",
                      "createdDateTime": "string",
                      "updatedBy": "string",
                      "updatedDateTime": "string",
                      "homePhone": "0211111111",
                      "mobilePhone": 399999999,
                      "fax": 212345678,
                      "categoryCode": "86",
                      "userCode": "JS",
                      "userName": "Jane.Smith",
                      "timeZone": 255,
                      "roleCode": "9",
                      "moduleCode": "INTEGRATED_SPECIALIS",
                      "practices": [
                        {
                          "practiceId": "92f21dec-e233-4194-bcc7-0ad88df5677f",
                          "providerNo": "2515823",
                          "ahpraNo": "BBB6789423478",
                          "medicalObject": "string",
                          "defaultPractice": true
                        }
                      ],
                      "supervisingDoctorId": "1f92b268-050a-4755-9581-81573bc0421c",
                      "prescriberNo": "2515823",
                      "abn": "51824753556",
                      "hpiINo": "string",
                      "erxId": "1234",
                      "preferredName": "Beckham",
                      "biography": "User biography",
                      "shared": true,
                      "dob": "2021-06-01",
                      "gender": 1,
                      "subSpecialities": [
                        {
                          "subSpecialityCode": "10"
                        }
                      ],
                      "languages": [
                        {
                          "languageCode": "1"
                        }
                      ],
                      "qualifications": [
                        {
                          "qualificationCode": "227"
                        }
                      ],
                      "supportEnabled": true,
                      "metadata": [
                        {
                          "key": "secondEmail",
                          "value": "jane.smith@gmail.com"
                        }
                      ],
                      "status": "Active"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Provider identifier. This is a unique identifier for this resource.",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "format": "uuid"
                    },
                    "titleCode": {
                      "type": "string",
                      "description": "Represents the user title code.\nCall the below endpoint to get the user title code lookup:\n\n/code-system/title-code.",
                      "example": "315890000"
                    },
                    "plan": {
                      "type": "integer",
                      "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time",
                      "enum": [
                        1,
                        2
                      ],
                      "example": 1
                    },
                    "firstName": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents user firstName.",
                      "maxLength": 30,
                      "example": "Jane"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents user lastName.",
                      "maxLength": 30,
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the users email.",
                      "example": "jane.smith@example.com"
                    },
                    "officePhone": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user office phone number. It is 10 digits in length.",
                      "example": 491570110
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the users  home phone number.",
                      "example": "0211111111"
                    },
                    "mobilePhone": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the users  mobile phone number.",
                      "example": 399999999
                    },
                    "fax": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the users fax number.",
                      "example": 212345678
                    },
                    "categoryCode": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the category code. \nCall the below endpoint to get the user category code lookup\n/code-system/category-code.",
                      "example": "86"
                    },
                    "userCode": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user code.",
                      "example": "JS"
                    },
                    "userName": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the user name.",
                      "example": "Jane.Smith"
                    },
                    "timeZone": {
                      "type": "number",
                      "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart",
                      "enum": [
                        225,
                        245,
                        250,
                        255,
                        260,
                        265
                      ],
                      "example": 255
                    },
                    "roleCode": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code.",
                      "example": "9"
                    },
                    "moduleCode": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code.",
                      "example": "INTEGRATED_SPECIALIS"
                    },
                    "practices": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "practiceId": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Represents the practice identifier.",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "format": "uuid"
                          },
                          "providerNo": {
                            "type": "string",
                            "description": "Represents the user provider number for the practice.",
                            "maxLength": 11,
                            "example": "2515823"
                          },
                          "ahpraNo": {
                            "type": "string",
                            "description": "Represents the users aphra no for the practice.",
                            "maxLength": 13,
                            "example": "BBB6789423478"
                          },
                          "medicalObject": {
                            "type": "string",
                            "description": "Represents the user medical object identifier for the practice.",
                            "maxLength": 11
                          },
                          "defaultPractice": {
                            "type": "boolean",
                            "description": "Represents the user default practice."
                          }
                        },
                        "required": [
                          "practiceId",
                          "providerNo",
                          "ahpraNo",
                          "medicalObject",
                          "defaultPractice"
                        ]
                      }
                    },
                    "supervisingDoctorId": {
                      "type": "string",
                      "description": "Represents the user's supervising doctor identifier.",
                      "format": "uuid",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                    },
                    "prescriberNo": {
                      "type": "string",
                      "description": "Represents the user prescriber number.",
                      "maxLength": 7,
                      "example": "2515823"
                    },
                    "abn": {
                      "type": "string",
                      "minLength": 11,
                      "description": "Represents the users abn number.",
                      "maxLength": 11,
                      "example": "51824753556"
                    },
                    "hpiINo": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
                      "maxLength": 16
                    },
                    "erxId": {
                      "type": "string",
                      "description": "Represents the user ERX ID.",
                      "maxLength": 10,
                      "example": "1234"
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the users preferred name.",
                      "example": "Beckham",
                      "maxLength": 100
                    },
                    "biography": {
                      "type": "string",
                      "description": "Represents the users biography.",
                      "maxLength": 1000,
                      "example": "User biography"
                    },
                    "shared": {
                      "type": "boolean",
                      "description": "Represents  if the users profile will be shared to the community or not."
                    },
                    "dob": {
                      "type": "string",
                      "description": "Represents the user date of birth with format YYYY-MM-DD.",
                      "example": "2021-06-01"
                    },
                    "gender": {
                      "type": "integer",
                      "description": "Represents the user gender.\n\n* `1` - Female\n* `2` - Male",
                      "enum": [
                        1,
                        2
                      ],
                      "example": 1
                    },
                    "subSpecialities": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "subSpecialityCode": {
                            "type": "string",
                            "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup \n/code-system/subspeciality-code.",
                            "example": "10"
                          }
                        },
                        "required": [
                          "subSpecialityCode"
                        ]
                      }
                    },
                    "languages": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "languageCode": {
                            "type": "string",
                            "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n\n/code-system/languages-code.",
                            "example": "1"
                          }
                        },
                        "required": [
                          "languageCode"
                        ]
                      }
                    },
                    "qualifications": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "qualificationCode": {
                            "type": "string",
                            "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n\n/code-system/qualifications-code.",
                            "example": "227"
                          }
                        },
                        "required": [
                          "qualificationCode"
                        ]
                      }
                    },
                    "supportEnabled": {
                      "type": "boolean",
                      "description": "Represents support agent access to this record."
                    },
                    "metadata": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Represents the users metadata key.",
                            "maxLength": 40,
                            "example": "secondEmail"
                          },
                          "value": {
                            "type": "string",
                            "description": "Represents the users metadata value.",
                            "maxLength": 500,
                            "example": "jane.smith@gmail.com"
                          }
                        },
                        "required": [
                          "key",
                          "value"
                        ]
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "Represents the users status.",
                      "example": "Active"
                    }
                  },
                  "required": [
                    "id",
                    "titleCode",
                    "plan",
                    "firstName",
                    "lastName",
                    "email",
                    "officePhone",
                    "createdBy",
                    "createdDateTime",
                    "updatedBy",
                    "updatedDateTime",
                    "homePhone",
                    "mobilePhone",
                    "fax",
                    "categoryCode",
                    "userCode",
                    "userName",
                    "timeZone",
                    "roleCode",
                    "moduleCode",
                    "practices",
                    "supervisingDoctorId",
                    "prescriberNo",
                    "abn",
                    "hpiINo",
                    "erxId",
                    "preferredName",
                    "biography",
                    "shared",
                    "dob",
                    "gender",
                    "subSpecialities",
                    "languages",
                    "qualifications",
                    "supportEnabled",
                    "metadata",
                    "status"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "titleCode": "315890000",
                      "plan": 1,
                      "firstName": "Jane",
                      "lastName": "Smith",
                      "email": "jane.smith@example.com",
                      "officePhone": 491570110,
                      "createdBy": "string",
                      "createdDateTime": "string",
                      "updatedBy": "string",
                      "updatedDateTime": "string",
                      "homePhone": "0211111111",
                      "mobilePhone": 399999999,
                      "fax": 212345678,
                      "categoryCode": "86",
                      "userCode": "JS",
                      "userName": "Jane.Smith",
                      "timeZone": 255,
                      "roleCode": "9",
                      "moduleCode": "INTEGRATED_SPECIALIS",
                      "practices": [
                        {
                          "practiceId": "92f21dec-e233-4194-bcc7-0ad88df5677f",
                          "providerNo": "2515823",
                          "ahpraNo": "BBB6789423478",
                          "medicalObject": "string",
                          "defaultPractice": true
                        }
                      ],
                      "supervisingDoctorId": "1f92b268-050a-4755-9581-81573bc0421c",
                      "prescriberNo": "2515823",
                      "abn": "51824753556",
                      "hpiINo": "string",
                      "erxId": "1234",
                      "preferredName": "Beckham",
                      "biography": "User biography",
                      "shared": true,
                      "dob": "2021-06-01",
                      "gender": 1,
                      "subSpecialities": [
                        {
                          "subSpecialityCode": "10"
                        }
                      ],
                      "languages": [
                        {
                          "languageCode": "1"
                        }
                      ],
                      "qualifications": [
                        {
                          "qualificationCode": "227"
                        }
                      ],
                      "supportEnabled": true,
                      "metadata": [
                        {
                          "key": "secondEmail",
                          "value": "jane.smith@gmail.com"
                        }
                      ],
                      "status": "Active"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "description": "Validation error response model.",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "practiceId",
                          "value": "1234",
                          "message": "invalid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "description": "Unauthorized error response model",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Access is denied"
                    }
                  },
                  "description": "Forbidden error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "unknown_error_type",
                      "type": "unknown_error_code",
                      "message": "Access is denied"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  },
                  "description": "Error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-practices-practice_id-providers-id",
        "description": "To get a provider of a practice by ID.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      }
    },
    "/v1/users": {
      "post": {
        "summary": "Create a user",
        "operationId": "post-users",
        "description": "Create a user.\n",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string"
            },
            "description": "The request content type.\n",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UserResponse",
                  "type": "object",
                  "description": "",
                  "x-examples": {
                    "Example": {
                      "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                      "titleCode": "315890000",
                      "plan": 1,
                      "firstName": "Jane",
                      "lastName": "Smith",
                      "email": "jane.smith@example.com",
                      "officePhone": 491570110,
                      "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                      "createdDateTime": "2020-10-02T15:00:00Z",
                      "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                      "updatedDateTime": "2020-10-02T15:00:00Z",
                      "homePhone": "0211111111",
                      "mobilePhone": 399999999,
                      "fax": 212345678,
                      "categoryCode": "86",
                      "userCode": "JS",
                      "userName": "Jane.Smith",
                      "timeZone": 255,
                      "roleCode": "9",
                      "moduleCode": "CLINICAL_GP",
                      "practices": [
                        {
                          "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                          "providerNo": "2515823",
                          "ahpraNo": "BBB6789423478",
                          "medicalObject": "",
                          "defaultPractice": true
                        }
                      ],
                      "supervisingDoctorId": "",
                      "prescriberNo": "2515823",
                      "abn": "51824753556",
                      "hpiINo": "",
                      "erxId": "",
                      "preferredName": "Jane",
                      "biography": "Jane Smith is an IT Manager of a multinational company",
                      "shared": true,
                      "dob": "1995-07-18",
                      "gender": 1,
                      "subSpecialities": [
                        {
                          "subSpecialityCode": "57"
                        }
                      ],
                      "languages": [
                        {
                          "languageCode": "123"
                        }
                      ],
                      "qualifications": [
                        {
                          "qualificationCode": "11"
                        }
                      ],
                      "supportEnabled": true,
                      "metadata": [
                        {
                          "key": "employeeId",
                          "value": "12345678"
                        },
                        {
                          "key": "secondaryEmail",
                          "value": "Jane.Smith@gmail.com"
                        }
                      ],
                      "monthlyFee": "$10.00",
                      "status": "Active",
                      "usageHours": 12.5,
                      "canonicalId": "Australia/Sydney",
                      "patientId": "8a7ca13a-ee06-472f-94d5-c83355f8118a"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations.",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                      "format": "uuid"
                    },
                    "titleCode": {
                      "type": "string",
                      "description": "Represents the user title. Call the below endpoint to get the user title code lookup\n/code-system/title-code.",
                      "example": "315890000"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents user firstName. Max 30 characters in length.",
                      "minLength": 1,
                      "maxLength": 30,
                      "example": "Jane"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents user lastName. Max 30 characters in length.",
                      "minLength": 1,
                      "maxLength": 30,
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "description": "Represents the users email id. This should be unique.",
                      "example": "jane.smith@example.com",
                      "format": "email"
                    },
                    "officePhone": {
                      "type": "string",
                      "description": "Represents the user office phone number. Should be 10 digits in length.",
                      "example": 491570110,
                      "minLength": 10,
                      "maxLength": 10
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "description": "Represents the users  home phone number.",
                      "minLength": 10,
                      "maxLength": 10,
                      "example": "0211111111"
                    },
                    "mobilePhone": {
                      "type": "string",
                      "description": "Represents the users  mobile phone number",
                      "minLength": 10,
                      "maxLength": 10,
                      "example": 399999999
                    },
                    "fax": {
                      "type": "string",
                      "description": "Represents the users fax number.",
                      "minLength": 10,
                      "maxLength": 10,
                      "example": 212345678
                    },
                    "categoryCode": {
                      "type": "string",
                      "description": "Represents the category code. Call the below endpoint to get the user category code lookup\n/code-system/category-code. If there is no categoryCode  entered, then by default 'Practice Owner'category will be set.",
                      "example": "b8f5f3b0-2402-e711-817e-06c7898ff79d"
                    },
                    "userCode": {
                      "type": "string",
                      "description": "Represents the user code. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be JS.",
                      "example": "JS"
                    },
                    "userName": {
                      "type": "string",
                      "description": "Represents the user name. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be John.smith.",
                      "example": "Jane.Smith"
                    },
                    "timeZone": {
                      "type": "integer",
                      "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart\n\nIf no timezone is entered, then the default timezone of Canberra, Melbourne and Sydney is applied",
                      "enum": [
                        225,
                        245,
                        250,
                        255,
                        260,
                        265
                      ],
                      "default": 255,
                      "example": 255
                    },
                    "roleCode": {
                      "type": "string",
                      "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code. If there is no roleCode  entered, then by default 'Practice Owner' role will be set.",
                      "example": "c98a3e02-327d-4d64-bb97-cb02de7cc425"
                    },
                    "plan": {
                      "type": "integer",
                      "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time\n\nIf there is no plan  entered, then by default 'Full Time ' plan will be set.",
                      "example": 1,
                      "default": 1,
                      "enum": [
                        1,
                        2
                      ]
                    },
                    "moduleCode": {
                      "type": "string",
                      "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code. If there is no moduleCode  entered, then by default 'Integrated Specialist' module will be applied.",
                      "default": "INTEGRATED_SPECIALIS",
                      "example": "CLINICAL_GP"
                    },
                    "practices": {
                      "type": "array",
                      "description": "The user subscribed practices information. If no practice(s) set, then the user will only be subscribed to the primary practice and  the primary practice will be set as the default user  practice. If multiple practice(s) set, then the user will be subscribed to multiple practices. When the user is subscribed to multiple practices, the first practice added in the list will be automatically set as the default practice.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "practiceId": {
                            "type": "string",
                            "description": "A GUID that represents the practice id.",
                            "format": "uuid",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "example": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630"
                          },
                          "providerNo": {
                            "type": "string",
                            "description": "Represents the user provider number for the practice. If its not set then the provider number will be blank for the particular practice.",
                            "maxLength": 11,
                            "example": "2515823"
                          },
                          "ahpraNo": {
                            "type": "string",
                            "description": "Represents the users aphra no for the practice. If it's not set, then the aphra no will be blank for the practice. User must input 3 alphabets and 10 digit number",
                            "maxLength": 13,
                            "example": "BBB6789423478"
                          },
                          "medicalObject": {
                            "type": "string",
                            "description": "Represents the user medical object identifier for the practice. If it is not set, then the medical object identifier will be blank for the subscribed practice.",
                            "maxLength": 11
                          },
                          "defaultPractice": {
                            "type": "boolean",
                            "description": "Represents the user default practice. If the flag is set to true then , practice is set as user default practice."
                          }
                        }
                      }
                    },
                    "supervisingDoctorId": {
                      "type": "string",
                      "description": "A GUID that represents the user's supervising doctor user id. A supervising doctor can be a user under the same tenant. A supervising doctor must be an active user.",
                      "format": "uuid"
                    },
                    "prescriberNo": {
                      "type": "string",
                      "description": "Represents the user prescriber number. Prescriber number is requied to allow users to prescribe drugs to the patient.",
                      "maxLength": 7,
                      "example": "2515823"
                    },
                    "abn": {
                      "type": "string",
                      "description": "Represents the users abn number.",
                      "minLength": 11,
                      "maxLength": 11,
                      "example": "51824753556"
                    },
                    "hpiINo": {
                      "type": "string",
                      "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
                      "maxLength": 16
                    },
                    "erxId": {
                      "type": "string",
                      "description": "Represents the user erxId.",
                      "maxLength": 10
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the users preferred name. If the preferred name is null, then the firstName becomes the preferred name.",
                      "maxLength": 100,
                      "example": "Beckham"
                    },
                    "biography": {
                      "type": "string",
                      "description": "Represents the users biography.",
                      "maxLength": 1000,
                      "example": "biography"
                    },
                    "shared": {
                      "type": "boolean",
                      "description": "Represents  if the users profile will be shared to the community or not. If the flag is set to true add the user profile to the Medirecords community and contact list."
                    },
                    "dob": {
                      "type": "string",
                      "description": "Represents the user date of birth. Date of birth should not be in the future. Format YYYY-MM-DD.",
                      "example": "2021-06-01"
                    },
                    "gender": {
                      "type": "integer",
                      "description": "Represents the user gender.\n\n* `1` - Female\n* `2` - Male",
                      "example": 1,
                      "enum": [
                        1,
                        2
                      ]
                    },
                    "supportEnabled": {
                      "type": "boolean",
                      "description": "Represents support agent access to this record. If the flag is set to true, then the support agent can access this account."
                    },
                    "subSpecialities": {
                      "type": "array",
                      "description": "Repesents the users sub specialities information. There can may more than one sub speciality for a user.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subSpecialityCode": {
                            "type": "string",
                            "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup\n/code-system/subspeciality-code.",
                            "example": "10"
                          }
                        }
                      }
                    },
                    "languages": {
                      "type": "array",
                      "description": "Repesents the users languages known information. There can may more than one language known for a user.",
                      "maxItems": 10,
                      "items": {
                        "type": "object",
                        "properties": {
                          "languageCode": {
                            "type": "string",
                            "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n/code-system/languages-code.",
                            "example": "1"
                          }
                        }
                      }
                    },
                    "qualifications": {
                      "type": "array",
                      "description": "Repesents the users qualifications information. There can may more than one qualification known for a user.",
                      "maxItems": 20,
                      "items": {
                        "type": "object",
                        "properties": {
                          "qualificationCode": {
                            "type": "string",
                            "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n/code-system/qualifications-code.",
                            "example": "227"
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "array",
                      "description": "Repesents the user metadata information.  You can use this parameter to attach key-value data to these user object. Metadata is useful for storing additional, structured information on an object. As an example, you could store your user's full name, user employee identifier, user secondary email or corresponding unique identifier from your system on a MediRecords user object.",
                      "maxItems": 50,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Represents the users metadata key.",
                            "maxLength": 40
                          },
                          "value": {
                            "type": "string",
                            "description": "Represents the users metadata value.",
                            "maxLength": 500
                          }
                        }
                      }
                    },
                    "monthlyFee": {
                      "type": "string",
                      "description": "Represents the users monthly fee based on user subsciption.",
                      "example": "$10.00"
                    },
                    "status": {
                      "type": "string",
                      "example": "Active",
                      "description": "Represents the users status."
                    },
                    "usageHours": {
                      "type": "number",
                      "description": "Represents the users usage hours.",
                      "example": 12.5
                    },
                    "canonicalId": {
                      "type": "string",
                      "description": "Represents the users canonicalId.",
                      "example": "Australia/Sydney"
                    },
                    "patientId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "8a7ca13a-ee06-472f-94d5-c83355f8118a",
                      "description": "Represents the patient id."
                    }
                  },
                  "required": [
                    "id",
                    "titleCode",
                    "firstName",
                    "lastName",
                    "email",
                    "officePhone",
                    "createdBy",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                      "titleCode": "315890000",
                      "plan": 1,
                      "firstName": "Jane",
                      "lastName": "Smith",
                      "email": "jane.smith@example.com",
                      "officePhone": 491570110,
                      "password": "p455w0rd",
                      "userName": "Jane.Smith",
                      "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                      "createdDateTime": "2020-10-02T15:00:00Z",
                      "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                      "updatedDateTime": "2020-10-02T15:00:00Z",
                      "homePhone": "0211111111",
                      "mobilePhone": 399999999,
                      "fax": 212345678,
                      "categoryCode": "86",
                      "userCode": "JS",
                      "timeZone": 255,
                      "roleCode": "9",
                      "moduleCode": "CLINICAL_GP",
                      "practices": [
                        {
                          "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                          "providerNo": "2515823",
                          "ahpraNo": "BBB6789423478",
                          "medicalObject": "",
                          "defaultPractice": true
                        }
                      ],
                      "supervisingDoctorId": "b8f5f3b0-2402-e711-817e-06c7898ff79d",
                      "prescriberNo": "2515823",
                      "abn": "51824753556",
                      "hpiINo": "",
                      "erxId": "",
                      "preferredName": "Jane",
                      "biography": "Jane Smith is an IT Manager of a multinational company",
                      "shared": true,
                      "dob": "1995-07-18",
                      "gender": 1,
                      "supportEnabled": true,
                      "subSpecialities": [
                        {
                          "subSpecialityCode": "57"
                        }
                      ],
                      "languages": [
                        {
                          "languageCode": "123"
                        }
                      ],
                      "qualifications": [
                        {
                          "qualificationCode": "11"
                        }
                      ],
                      "metadata": [
                        {
                          "key": "employeeId",
                          "value": "12345678"
                        },
                        {
                          "key": "secondaryEmail",
                          "value": "Jane.Smith@gmail.com"
                        }
                      ],
                      "monthlyFee": "$10.00",
                      "status": "Active",
                      "usageHours": 12.5,
                      "canonicalId": "Australia/Sydney",
                      "patientId": "8a7ca13a-ee06-472f-94d5-c83355f8118a"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "description": "Validation error response model.",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "firstName",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "description": "Unauthorized error response model",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Access is denied"
                    }
                  },
                  "description": "Forbidden error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "unknown_error_type",
                      "code": "unknown_error_code",
                      "message": "Access is denied"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  },
                  "description": "Error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateUserRequest",
                "description": "",
                "type": "object",
                "x-examples": {
                  "Example": {
                    "titleCode": "315890000",
                    "plan": 1,
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "email": "jane.smith@example.com",
                    "officePhone": 491570110,
                    "password": "p455w0rd",
                    "userName": "Jane.Smith",
                    "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                    "createdDateTime": "2020-10-02T15:00:00Z",
                    "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                    "updatedDateTime": "2020-10-02T15:00:00Z",
                    "homePhone": "0211111111",
                    "mobilePhone": 399999999,
                    "fax": 212345678,
                    "categoryCode": "86",
                    "userCode": "JS",
                    "timeZone": 255,
                    "roleCode": "9",
                    "moduleCode": "CLINICAL_GP",
                    "practices": [
                      {
                        "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                        "providerNo": "2515823",
                        "ahpraNo": "BBB6789423478",
                        "medicalObject": "",
                        "defaultPractice": true
                      }
                    ],
                    "supervisingDoctorId": "b8f5f3b0-2402-e711-817e-06c7898ff79d",
                    "prescriberNo": "2515823",
                    "abn": "51824753556",
                    "hpiINo": "",
                    "erxId": "",
                    "preferredName": "Jane",
                    "biography": "Jane Smith is an IT Manager of a multinational company",
                    "shared": true,
                    "dob": "1995-07-18",
                    "gender": 1,
                    "supportEnabled": true,
                    "subSpecialities": [
                      {
                        "subSpecialityCode": "57"
                      }
                    ],
                    "languages": [
                      {
                        "languageCode": "123"
                      }
                    ],
                    "qualifications": [
                      {
                        "qualificationCode": "11"
                      }
                    ],
                    "metadata": [
                      {
                        "key": "employeeId",
                        "value": "12345678"
                      },
                      {
                        "key": "secondaryEmail",
                        "value": "Jane.Smith@gmail.com"
                      }
                    ]
                  }
                },
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "titleCode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user title. Call the below endpoint to get the user title code lookup\n/code-system/title-code.",
                    "example": "315890000"
                  },
                  "plan": {
                    "type": "integer",
                    "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time\n\nIf there is no plan  entered, then by default 'Full Time ' plan will be set.",
                    "default": 1,
                    "enum": [
                      1,
                      2
                    ],
                    "example": 1
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents user firstName.",
                    "maxLength": 30,
                    "example": "Jane"
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents user lastName.",
                    "maxLength": 30,
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the users email id. This should be unique.",
                    "example": "jane.smith@example.com",
                    "format": "email"
                  },
                  "officePhone": {
                    "type": "string",
                    "minLength": 10,
                    "description": "Represents the user office phone number.",
                    "maxLength": 10,
                    "example": 491570110
                  },
                  "password": {
                    "type": "string",
                    "minLength": 18,
                    "description": "Represents the user login password. Password should be minimum 8 characters  and max 20 characters long and must include at least 1 number.",
                    "example": "p455w0rd",
                    "maxLength": 20
                  },
                  "userName": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user name. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be John.smith.",
                    "example": "Jane.Smith"
                  },
                  "createdBy": {
                    "type": "string",
                    "title": "CreatedBy",
                    "description": "A GUID refers to User identifier who created the resource.",
                    "x-examples": {
                      "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                    },
                    "default": "UUID",
                    "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                    "x-internal": false
                  },
                  "createdDateTime": {
                    "type": "string",
                    "title": "CreatedDate",
                    "description": "Time when the resource was created.",
                    "x-internal": false
                  },
                  "updatedBy": {
                    "type": "string",
                    "title": "UpdatedBy",
                    "description": "A GUID refers to User identifier who updated the resource.",
                    "default": "UUID",
                    "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                    "x-internal": false
                  },
                  "updatedDateTime": {
                    "title": "UpdatedDate",
                    "type": "string",
                    "description": "Time when the resource was updated.",
                    "x-internal": false
                  },
                  "homePhone": {
                    "type": "string",
                    "minLength": 10,
                    "description": "Represents the users home phone number.",
                    "maxLength": 10,
                    "example": "0211111111"
                  },
                  "mobilePhone": {
                    "type": "string",
                    "minLength": 10,
                    "description": "Represents the users  mobile phone number.",
                    "maxLength": 10,
                    "example": 399999999
                  },
                  "fax": {
                    "type": "string",
                    "minLength": 10,
                    "description": "Represents the users fax number.",
                    "maxLength": 10,
                    "example": 212345678
                  },
                  "categoryCode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the category code. Call the below endpoint to get the user category code lookup\n/code-system/category-code. \n\nIf there is no categoryCode  entered, then by default 'Practice Owner'category will be set.",
                    "example": "86"
                  },
                  "userCode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user code. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be JS.",
                    "example": "JS"
                  },
                  "timeZone": {
                    "type": "integer",
                    "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart\n\nIf no timezone is entered, then the default timezone of Canberra, Melbourne and Sydney is applied",
                    "enum": [
                      225,
                      245,
                      250,
                      255,
                      260,
                      265
                    ],
                    "example": 255,
                    "default": 255
                  },
                  "roleCode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code. \n\nIf there is no roleCode  entered, then by default 'Practice Owner' role will be set.",
                    "example": "9"
                  },
                  "moduleCode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code.  If there is no moduleCode  entered, then by default 'Integrated Specialist' module will be applied.",
                    "example": "CLINICAL_GP",
                    "default": "INTEGRATED_SPECIALIS"
                  },
                  "practices": {
                    "type": "array",
                    "uniqueItems": true,
                    "minItems": 1,
                    "description": "The user subscribed practices information. If no practice(s) set, then the user will only be subscribed to the primary practice and  the primary practice will be set as the default user  practice. If multiple practice(s) set, then the user will be subscribed to multiple practices. When the user is subscribed to multiple practices, the first practice added in the list will be automatically set as the default practice.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "practiceId": {
                          "type": "string",
                          "minLength": 1,
                          "description": "Represents the practice identifier.",
                          "format": "uuid",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "example": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630"
                        },
                        "providerNo": {
                          "type": "string",
                          "description": "Represents the user provider number for the practice. If its not set then the provider number will be blank for the particular practice.",
                          "maxLength": 11,
                          "example": "2515823"
                        },
                        "ahpraNo": {
                          "type": "string",
                          "description": "Represents the users aphra no for the practice. If it''s not set, then the aphra no will be blank for the practice. User must input 3 alphabets and 10 digit number.",
                          "maxLength": 13,
                          "example": "BBB6789423478"
                        },
                        "medicalObject": {
                          "type": "string",
                          "description": "Represents the user medical object identifier for the practice. If it is not set, then the medical object identifier will be blank for the subscribed practice.",
                          "maxLength": 11
                        },
                        "defaultPractice": {
                          "type": "boolean",
                          "description": "Represents the user default practice. If the flag is set to true then , practice is set as user default practice."
                        }
                      }
                    }
                  },
                  "supervisingDoctorId": {
                    "type": "string",
                    "description": "Represents the user's supervising doctor user identifier. A supervising doctor can be a user under the same tenant. A supervising doctor must be an active user.",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "format": "uuid",
                    "example": "b8f5f3b0-2402-e711-817e-06c7898ff79d"
                  },
                  "prescriberNo": {
                    "type": "string",
                    "description": "Represents the user prescriber number. Prescriber number is requied to allow users to prescribe drugs to the patient.",
                    "maxLength": 7,
                    "example": "2515823"
                  },
                  "abn": {
                    "type": "string",
                    "minLength": 11,
                    "description": "Represents the users abn number.",
                    "maxLength": 11,
                    "example": "51824753556"
                  },
                  "hpiINo": {
                    "type": "string",
                    "description": "Represents the user Hpi-I no. Should start with '80036'",
                    "maxLength": 16
                  },
                  "erxId": {
                    "type": "string",
                    "description": "Represents the user erxId.",
                    "maxLength": 10
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "Represents the users preferred name. If the preferred name is null, then the firstName becomes the preferred name.",
                    "maxLength": 100,
                    "example": "Beckham"
                  },
                  "biography": {
                    "type": "string",
                    "description": "Represents the users biography.",
                    "maxLength": 1000,
                    "example": "biography"
                  },
                  "shared": {
                    "type": "boolean",
                    "description": "Represents  if the users profile will be shared to the community or not. If the flag is set to true add the user profile to the Medirecords community and contact list."
                  },
                  "dob": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Represents the user date of birth. Date of birth should not be in the future. Format YYYY-MM-DD.",
                    "example": "2021-06-01"
                  },
                  "gender": {
                    "type": "integer",
                    "description": "Represents the user gender.\n\n* `1` - Male\n* `2` - Female",
                    "example": 1,
                    "enum": [
                      1,
                      2
                    ]
                  },
                  "supportEnabled": {
                    "type": "boolean",
                    "description": "Represents support agent access to this record. If the flag is set to true, then the support agent can access this account."
                  },
                  "subSpecialities": {
                    "type": "array",
                    "uniqueItems": true,
                    "minItems": 1,
                    "description": "Repesents the users sub specialities information. There can may more than one sub speciality for a user.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "subSpecialityCode": {
                          "type": "string",
                          "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup\n/code-system/subspeciality-code.",
                          "example": "10"
                        }
                      }
                    }
                  },
                  "languages": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Repesents the users languages known information. There can may more than one language known for a user.",
                    "maxItems": 10,
                    "items": {
                      "type": "object",
                      "properties": {
                        "languageCode": {
                          "type": "string",
                          "example": "1",
                          "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n/code-system/languages-code."
                        }
                      }
                    }
                  },
                  "qualifications": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Repesents the users qualifications information. There can may more than one qualification known for a user.",
                    "maxItems": 20,
                    "items": {
                      "type": "object",
                      "properties": {
                        "qualificationCode": {
                          "type": "string",
                          "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n/code-system/qualifications-code.",
                          "example": "227"
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Repesents the user metadata information.  You can use this parameter to attach key-value data to these user object. Metadata is useful for storing additional, structured information on an object. As an example, you could store your user''s full name, user employee identifier, user secondary email or corresponding unique identifier from your system on a MediRecords user object.",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Represents the users metadata key.",
                          "maxLength": 40,
                          "example": "employeeId"
                        },
                        "value": {
                          "type": "string",
                          "example": "12345678",
                          "maxLength": 500
                        }
                      }
                    }
                  }
                },
                "required": [
                  "titleCode",
                  "firstName",
                  "lastName",
                  "email",
                  "officePhone",
                  "password",
                  "createdBy",
                  "createdDateTime",
                  "updatedBy",
                  "updatedDateTime"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "titleCode": "315890000",
                    "plan": 1,
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "email": "jane.smith@example.com",
                    "officePhone": 491570110,
                    "password": "p455w0rd",
                    "userName": "Jane.Smith",
                    "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                    "createdDateTime": "2020-10-02T15:00:00Z",
                    "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                    "updatedDateTime": "2020-10-02T15:00:00Z",
                    "homePhone": "0211111111",
                    "mobilePhone": 399999999,
                    "fax": 212345678,
                    "categoryCode": "86",
                    "userCode": "JS",
                    "timeZone": 255,
                    "roleCode": "9",
                    "moduleCode": "CLINICAL_GP",
                    "practices": [
                      {
                        "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                        "providerNo": "2515823",
                        "ahpraNo": "BBB6789423478",
                        "medicalObject": "",
                        "defaultPractice": true
                      }
                    ],
                    "supervisingDoctorId": "b8f5f3b0-2402-e711-817e-06c7898ff79d",
                    "prescriberNo": "2515823",
                    "abn": "51824753556",
                    "hpiINo": "",
                    "erxId": "",
                    "preferredName": "Jane",
                    "biography": "Jane Smith is an IT Manager of a multinational company",
                    "shared": true,
                    "dob": "1995-07-18",
                    "gender": 1,
                    "supportEnabled": true,
                    "subSpecialities": [
                      {
                        "subSpecialityCode": "57"
                      }
                    ],
                    "languages": [
                      {
                        "languageCode": "123"
                      }
                    ],
                    "qualifications": [
                      {
                        "qualificationCode": "11"
                      }
                    ],
                    "metadata": [
                      {
                        "key": "employeeId",
                        "value": "12345678"
                      },
                      {
                        "key": "secondaryEmail",
                        "value": "Jane.Smith@gmail.com"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Create a user request body."
        }
      },
      "parameters": []
    },
    "/v1/users/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The user identifier"
        }
      ],
      "put": {
        "summary": "Update a user",
        "operationId": "put-users-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UserResponse",
                  "type": "object",
                  "description": "",
                  "x-examples": {
                    "Example": {
                      "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                      "titleCode": "315890000",
                      "plan": 1,
                      "firstName": "Jane",
                      "lastName": "Smith",
                      "email": "jane.smith@example.com",
                      "officePhone": 491570110,
                      "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                      "createdDateTime": "2020-10-02T15:00:00Z",
                      "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                      "updatedDateTime": "2020-10-02T15:00:00Z",
                      "homePhone": "0211111111",
                      "mobilePhone": 399999999,
                      "fax": 212345678,
                      "categoryCode": "86",
                      "userCode": "JS",
                      "userName": "Jane.Smith",
                      "timeZone": 255,
                      "roleCode": "9",
                      "moduleCode": "CLINICAL_GP",
                      "practices": [
                        {
                          "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                          "providerNo": "2515823",
                          "ahpraNo": "BBB6789423478",
                          "medicalObject": "",
                          "defaultPractice": true
                        }
                      ],
                      "supervisingDoctorId": "",
                      "prescriberNo": "2515823",
                      "abn": "51824753556",
                      "hpiINo": "",
                      "erxId": "",
                      "preferredName": "Jane",
                      "biography": "Jane Smith is an IT Manager of a multinational company",
                      "shared": true,
                      "dob": "1995-07-18",
                      "gender": 1,
                      "subSpecialities": [
                        {
                          "subSpecialityCode": "57"
                        }
                      ],
                      "languages": [
                        {
                          "languageCode": "123"
                        }
                      ],
                      "qualifications": [
                        {
                          "qualificationCode": "11"
                        }
                      ],
                      "supportEnabled": true,
                      "metadata": [
                        {
                          "key": "employeeId",
                          "value": "12345678"
                        },
                        {
                          "key": "secondaryEmail",
                          "value": "Jane.Smith@gmail.com"
                        }
                      ],
                      "monthlyFee": "$10.00",
                      "status": "Active",
                      "usageHours": 12.5,
                      "canonicalId": "Australia/Sydney",
                      "patientId": "8a7ca13a-ee06-472f-94d5-c83355f8118a"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations.",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "example": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                      "format": "uuid"
                    },
                    "titleCode": {
                      "type": "string",
                      "description": "Represents the user title. Call the below endpoint to get the user title code lookup\n/code-system/title-code.",
                      "example": "315890000"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents user firstName. Max 30 characters in length.",
                      "minLength": 1,
                      "maxLength": 30,
                      "example": "Jane"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents user lastName. Max 30 characters in length.",
                      "minLength": 1,
                      "maxLength": 30,
                      "example": "Smith"
                    },
                    "email": {
                      "type": "string",
                      "description": "Represents the users email id. This should be unique.",
                      "example": "jane.smith@example.com",
                      "format": "email"
                    },
                    "officePhone": {
                      "type": "string",
                      "description": "Represents the user office phone number. Should be 10 digits in length.",
                      "example": 491570110,
                      "minLength": 10,
                      "maxLength": 10
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "description": "Represents the users  home phone number.",
                      "minLength": 10,
                      "maxLength": 10,
                      "example": "0211111111"
                    },
                    "mobilePhone": {
                      "type": "string",
                      "description": "Represents the users  mobile phone number",
                      "minLength": 10,
                      "maxLength": 10,
                      "example": 399999999
                    },
                    "fax": {
                      "type": "string",
                      "description": "Represents the users fax number.",
                      "minLength": 10,
                      "maxLength": 10,
                      "example": 212345678
                    },
                    "categoryCode": {
                      "type": "string",
                      "description": "Represents the category code. Call the below endpoint to get the user category code lookup\n/code-system/category-code. If there is no categoryCode  entered, then by default 'Practice Owner'category will be set.",
                      "example": "b8f5f3b0-2402-e711-817e-06c7898ff79d"
                    },
                    "userCode": {
                      "type": "string",
                      "description": "Represents the user code. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be JS.",
                      "example": "JS"
                    },
                    "userName": {
                      "type": "string",
                      "description": "Represents the user name. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be John.smith.",
                      "example": "Jane.Smith"
                    },
                    "timeZone": {
                      "type": "integer",
                      "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart\n\nIf no timezone is entered, then the default timezone of Canberra, Melbourne and Sydney is applied",
                      "enum": [
                        225,
                        245,
                        250,
                        255,
                        260,
                        265
                      ],
                      "default": 255,
                      "example": 255
                    },
                    "roleCode": {
                      "type": "string",
                      "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code. If there is no roleCode  entered, then by default 'Practice Owner' role will be set.",
                      "example": "c98a3e02-327d-4d64-bb97-cb02de7cc425"
                    },
                    "plan": {
                      "type": "integer",
                      "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time\n\nIf there is no plan  entered, then by default 'Full Time ' plan will be set.",
                      "example": 1,
                      "default": 1,
                      "enum": [
                        1,
                        2
                      ]
                    },
                    "moduleCode": {
                      "type": "string",
                      "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code. If there is no moduleCode  entered, then by default 'Integrated Specialist' module will be applied.",
                      "default": "INTEGRATED_SPECIALIS",
                      "example": "CLINICAL_GP"
                    },
                    "practices": {
                      "type": "array",
                      "description": "The user subscribed practices information. If no practice(s) set, then the user will only be subscribed to the primary practice and  the primary practice will be set as the default user  practice. If multiple practice(s) set, then the user will be subscribed to multiple practices. When the user is subscribed to multiple practices, the first practice added in the list will be automatically set as the default practice.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "practiceId": {
                            "type": "string",
                            "description": "A GUID that represents the practice id.",
                            "format": "uuid",
                            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                            "example": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630"
                          },
                          "providerNo": {
                            "type": "string",
                            "description": "Represents the user provider number for the practice. If its not set then the provider number will be blank for the particular practice.",
                            "maxLength": 11,
                            "example": "2515823"
                          },
                          "ahpraNo": {
                            "type": "string",
                            "description": "Represents the users aphra no for the practice. If it's not set, then the aphra no will be blank for the practice. User must input 3 alphabets and 10 digit number",
                            "maxLength": 13,
                            "example": "BBB6789423478"
                          },
                          "medicalObject": {
                            "type": "string",
                            "description": "Represents the user medical object identifier for the practice. If it is not set, then the medical object identifier will be blank for the subscribed practice.",
                            "maxLength": 11
                          },
                          "defaultPractice": {
                            "type": "boolean",
                            "description": "Represents the user default practice. If the flag is set to true then , practice is set as user default practice."
                          }
                        }
                      }
                    },
                    "supervisingDoctorId": {
                      "type": "string",
                      "description": "A GUID that represents the user's supervising doctor user id. A supervising doctor can be a user under the same tenant. A supervising doctor must be an active user.",
                      "format": "uuid"
                    },
                    "prescriberNo": {
                      "type": "string",
                      "description": "Represents the user prescriber number. Prescriber number is requied to allow users to prescribe drugs to the patient.",
                      "maxLength": 7,
                      "example": "2515823"
                    },
                    "abn": {
                      "type": "string",
                      "description": "Represents the users abn number.",
                      "minLength": 11,
                      "maxLength": 11,
                      "example": "51824753556"
                    },
                    "hpiINo": {
                      "type": "string",
                      "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
                      "maxLength": 16
                    },
                    "erxId": {
                      "type": "string",
                      "description": "Represents the user erxId.",
                      "maxLength": 10
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the users preferred name. If the preferred name is null, then the firstName becomes the preferred name.",
                      "maxLength": 100,
                      "example": "Beckham"
                    },
                    "biography": {
                      "type": "string",
                      "description": "Represents the users biography.",
                      "maxLength": 1000,
                      "example": "biography"
                    },
                    "shared": {
                      "type": "boolean",
                      "description": "Represents  if the users profile will be shared to the community or not. If the flag is set to true add the user profile to the Medirecords community and contact list."
                    },
                    "dob": {
                      "type": "string",
                      "description": "Represents the user date of birth. Date of birth should not be in the future. Format YYYY-MM-DD.",
                      "example": "2021-06-01"
                    },
                    "gender": {
                      "type": "integer",
                      "description": "Represents the user gender.\n\n* `1` - Female\n* `2` - Male",
                      "example": 1,
                      "enum": [
                        1,
                        2
                      ]
                    },
                    "supportEnabled": {
                      "type": "boolean",
                      "description": "Represents support agent access to this record. If the flag is set to true, then the support agent can access this account."
                    },
                    "subSpecialities": {
                      "type": "array",
                      "description": "Repesents the users sub specialities information. There can may more than one sub speciality for a user.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subSpecialityCode": {
                            "type": "string",
                            "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup\n/code-system/subspeciality-code.",
                            "example": "10"
                          }
                        }
                      }
                    },
                    "languages": {
                      "type": "array",
                      "description": "Repesents the users languages known information. There can may more than one language known for a user.",
                      "maxItems": 10,
                      "items": {
                        "type": "object",
                        "properties": {
                          "languageCode": {
                            "type": "string",
                            "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n/code-system/languages-code.",
                            "example": "1"
                          }
                        }
                      }
                    },
                    "qualifications": {
                      "type": "array",
                      "description": "Repesents the users qualifications information. There can may more than one qualification known for a user.",
                      "maxItems": 20,
                      "items": {
                        "type": "object",
                        "properties": {
                          "qualificationCode": {
                            "type": "string",
                            "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n/code-system/qualifications-code.",
                            "example": "227"
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "array",
                      "description": "Repesents the user metadata information.  You can use this parameter to attach key-value data to these user object. Metadata is useful for storing additional, structured information on an object. As an example, you could store your user's full name, user employee identifier, user secondary email or corresponding unique identifier from your system on a MediRecords user object.",
                      "maxItems": 50,
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Represents the users metadata key.",
                            "maxLength": 40
                          },
                          "value": {
                            "type": "string",
                            "description": "Represents the users metadata value.",
                            "maxLength": 500
                          }
                        }
                      }
                    },
                    "monthlyFee": {
                      "type": "string",
                      "description": "Represents the users monthly fee based on user subsciption.",
                      "example": "$10.00"
                    },
                    "status": {
                      "type": "string",
                      "example": "Active",
                      "description": "Represents the users status."
                    },
                    "usageHours": {
                      "type": "number",
                      "description": "Represents the users usage hours.",
                      "example": 12.5
                    },
                    "canonicalId": {
                      "type": "string",
                      "description": "Represents the users canonicalId.",
                      "example": "Australia/Sydney"
                    },
                    "patientId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "8a7ca13a-ee06-472f-94d5-c83355f8118a",
                      "description": "Represents the patient id."
                    }
                  },
                  "required": [
                    "id",
                    "titleCode",
                    "firstName",
                    "lastName",
                    "email",
                    "officePhone",
                    "createdBy",
                    "updatedBy",
                    "updatedDateTime"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                      "titleCode": "315890000",
                      "plan": 1,
                      "firstName": "Jane",
                      "lastName": "Smith",
                      "email": "jane.smith@example.com",
                      "officePhone": 491570110,
                      "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                      "createdDateTime": "2020-10-02T15:00:00Z",
                      "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                      "updatedDateTime": "2020-10-02T15:00:00Z",
                      "homePhone": "0211111111",
                      "mobilePhone": 399999999,
                      "fax": 212345678,
                      "categoryCode": "86",
                      "userCode": "JS",
                      "userName": "Jane.Smith",
                      "timeZone": 255,
                      "roleCode": "9",
                      "moduleCode": "CLINICAL_GP",
                      "practices": [
                        {
                          "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                          "providerNo": "2515823",
                          "ahpraNo": "BBB6789423478",
                          "medicalObject": "",
                          "defaultPractice": false
                        }
                      ],
                      "supervisingDoctorId": "b8f5f3b0-2402-e711-817e-06c7898ff79d",
                      "prescriberNo": "123456",
                      "abn": "51824753556",
                      "hpiINo": "HP1234567890",
                      "erxId": "79FE",
                      "preferredName": "Jane",
                      "biography": "Jane Smith is an IT Manager of a multinational company",
                      "shared": true,
                      "dob": "1995-07-18",
                      "gender": 1,
                      "supportEnabled": true,
                      "subSpecialities": [
                        {
                          "subSpecialityCode": "57"
                        }
                      ],
                      "languages": [
                        {
                          "languageCode": "123"
                        }
                      ],
                      "qualifications": [
                        {
                          "qualificationCode": "11"
                        }
                      ],
                      "metadata": [
                        {
                          "key": "employeeId",
                          "value": "12345678"
                        },
                        {
                          "key": "secondaryEmail",
                          "value": "Jane.Smith@gmail.com"
                        }
                      ],
                      "monthlyFee": "$10.00",
                      "status": "Active",
                      "usageHours": 12.5,
                      "canonicalId": "Australia/Sydney",
                      "patientId": "8a7ca13a-ee06-472f-94d5-c83355f8118a"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "description": "Validation error response model.",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "123",
                          "message": "Must be a valid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "description": "Unauthorized error response model",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Access is denied"
                    }
                  },
                  "description": "Forbidden error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  },
                  "description": "Error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "To update a user information by setting the values of the parameter passed.\nAny parameters not provided are left unchanged. By design, you cannot edit the `password` for any user (_other API is provided to change the user password_).\nYou also cannot edit the `categoryId` for primary user. A primary user is a user who was created from registration. The primary user is the user who is flagged as contact account.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string"
            },
            "description": "The request content type.\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateUserRequest",
                "description": "Update user data transfer object model",
                "type": "object",
                "x-examples": {
                  "Example": {
                    "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                    "titleCode": "315890000",
                    "plan": 1,
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "email": "jane.smith@example.com",
                    "officePhone": 491570110,
                    "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                    "createdDateTime": "2020-10-02T15:00:00Z",
                    "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                    "updatedDateTime": "2020-10-02T15:00:00Z",
                    "homePhone": "0211111111",
                    "mobilePhone": 399999999,
                    "fax": 212345678,
                    "categoryCode": "86",
                    "userCode": "JS",
                    "userName": "Jane.Smith",
                    "timeZone": 255,
                    "roleCode": "9",
                    "moduleCode": "CLINICAL_GP",
                    "practices": [
                      {
                        "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                        "providerNo": "2515823",
                        "ahpraNo": "BBB6789423478",
                        "medicalObject": "",
                        "defaultPractice": true
                      }
                    ],
                    "supervisingDoctorId": "",
                    "prescriberNo": "2515823",
                    "abn": "51824753556",
                    "hpiINo": "",
                    "erxId": "",
                    "preferredName": "Jane",
                    "biography": "Jane Smith is an IT Manager of a multinational company",
                    "shared": true,
                    "dob": "1995-07-18",
                    "gender": 1,
                    "supportEnabled": true,
                    "subSpecialities": [
                      {
                        "subSpecialityCode": "57"
                      }
                    ],
                    "languages": [
                      {
                        "languageCode": "123"
                      }
                    ],
                    "qualifications": [
                      {
                        "qualificationCode": "11"
                      }
                    ],
                    "metadata": [
                      {
                        "key": "employeeId",
                        "value": "12345678"
                      },
                      {
                        "key": "secondaryEmail",
                        "value": "Jane.Smith@gmail.com"
                      }
                    ]
                  }
                },
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "User id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations.",
                    "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                    "example": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                    "format": "uuid"
                  },
                  "titleCode": {
                    "type": "string",
                    "description": "Represents the user title. Call the below endpoint to get the user title code lookup\n/code-system/title-code.",
                    "example": "315890000"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "Represents user firstName. Max 30 characters in length.",
                    "minLength": 1,
                    "maxLength": 30,
                    "example": "Jane"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Represents user lastName. Max 30 characters in length.",
                    "minLength": 1,
                    "maxLength": 30,
                    "example": "Smith"
                  },
                  "email": {
                    "type": "string",
                    "description": "Represents the users email id. This should be unique.",
                    "example": "jane.smith@example.com",
                    "format": "email"
                  },
                  "officePhone": {
                    "type": "string",
                    "description": "Represents the user office phone number. Should be 10 digits in length.",
                    "example": 491570110,
                    "minLength": 10,
                    "maxLength": 10
                  },
                  "createdBy": {
                    "type": "string",
                    "title": "CreatedBy",
                    "description": "A GUID refers to User identifier who created the resource.",
                    "x-examples": {
                      "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                    },
                    "default": "UUID",
                    "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                    "x-internal": false
                  },
                  "createdDateTime": {
                    "type": "string",
                    "title": "CreatedDate",
                    "description": "Time when the resource was created.",
                    "x-internal": false
                  },
                  "updatedBy": {
                    "type": "string",
                    "title": "UpdatedBy",
                    "description": "A GUID refers to User identifier who updated the resource.",
                    "default": "UUID",
                    "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                    "x-internal": false
                  },
                  "updatedDateTime": {
                    "title": "UpdatedDate",
                    "type": "string",
                    "description": "Time when the resource was updated.",
                    "x-internal": false
                  },
                  "homePhone": {
                    "type": "string",
                    "description": "Represents the users  home phone number.",
                    "minLength": 10,
                    "maxLength": 10,
                    "example": "0211111111"
                  },
                  "mobilePhone": {
                    "type": "string",
                    "description": "Represents the users  mobile phone number",
                    "minLength": 10,
                    "maxLength": 10,
                    "example": 399999999
                  },
                  "fax": {
                    "type": "string",
                    "description": "Represents the users fax number.",
                    "minLength": 10,
                    "maxLength": 10,
                    "example": 212345678
                  },
                  "categoryCode": {
                    "type": "string",
                    "description": "Represents the category code. Call the below endpoint to get the user category code lookup\n/code-system/category-code. If there is no categoryCode  entered, then by default 'Practice Owner'category will be set.",
                    "example": "86"
                  },
                  "userCode": {
                    "type": "string",
                    "description": "Represents the user code. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be JS.",
                    "example": "JS"
                  },
                  "userName": {
                    "type": "string",
                    "description": "Represents the user name. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be John.smith.",
                    "example": "Jane.Smith"
                  },
                  "timeZone": {
                    "type": "integer",
                    "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart\n\nIf no timezone is entered, then the default timezone of Canberra, Melbourne and Sydney is applied",
                    "enum": [
                      225,
                      245,
                      250,
                      255,
                      260,
                      265
                    ],
                    "default": 255,
                    "example": 255
                  },
                  "roleCode": {
                    "type": "string",
                    "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code. If there is no roleCode  entered, then by default 'Practice Owner' role will be set.",
                    "example": "9"
                  },
                  "plan": {
                    "type": "integer",
                    "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time\n\nIf there is no plan  entered, then by default 'Full Time ' plan will be set.",
                    "example": 1,
                    "default": 1,
                    "enum": [
                      1,
                      2
                    ]
                  },
                  "moduleCode": {
                    "type": "string",
                    "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code. If there is no moduleCode  entered, then by default 'Integrated Specialist' module will be applied.",
                    "default": "INTEGRATED_SPECIALIS",
                    "example": "CLINICAL_GP"
                  },
                  "practices": {
                    "type": "array",
                    "description": "The user subscribed practices information. If no practice(s) set, then the user will only be subscribed to the primary practice and  the primary practice will be set as the default user  practice. If multiple practice(s) set, then the user will be subscribed to multiple practices. When the user is subscribed to multiple practices, the first practice added in the list will be automatically set as the default practice.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "practiceId": {
                          "type": "string",
                          "description": "A GUID that represents the practice id.",
                          "format": "uuid",
                          "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                          "example": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630"
                        },
                        "providerNo": {
                          "type": "string",
                          "description": "Represents the user provider number for the practice. If its not set then the provider number will be blank for the particular practice.",
                          "maxLength": 11,
                          "example": "2515823"
                        },
                        "ahpraNo": {
                          "type": "string",
                          "description": "Represents the users aphra no for the practice. If it's not set, then the aphra no will be blank for the practice. User must input 3 alphabets and 10 digit number",
                          "maxLength": 13,
                          "example": "BBB6789423478"
                        },
                        "medicalObject": {
                          "type": "string",
                          "description": "Represents the user medical object identifier for the practice. If it is not set, then the medical object identifier will be blank for the subscribed practice.",
                          "maxLength": 11
                        },
                        "defaultPractice": {
                          "type": "boolean",
                          "description": "Represents the user default practice. If the flag is set to true then , practice is set as user default practice."
                        }
                      }
                    }
                  },
                  "supervisingDoctorId": {
                    "type": "string",
                    "description": "A GUID that represents the user's supervising doctor user id. A supervising doctor can be a user under the same tenant. A supervising doctor must be an active user.",
                    "format": "uuid"
                  },
                  "prescriberNo": {
                    "type": "string",
                    "description": "Represents the user prescriber number. Prescriber number is requied to allow users to prescribe drugs to the patient.",
                    "maxLength": 7,
                    "example": "2515823"
                  },
                  "abn": {
                    "type": "string",
                    "description": "Represents the users abn number.",
                    "minLength": 11,
                    "maxLength": 11,
                    "example": "51824753556"
                  },
                  "hpiINo": {
                    "type": "string",
                    "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
                    "maxLength": 16
                  },
                  "erxId": {
                    "type": "string",
                    "description": "Represents the user erxId.",
                    "maxLength": 10
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "Represents the users preferred name. If the preferred name is null, then the firstName becomes the preferred name.",
                    "maxLength": 100,
                    "example": "Beckham"
                  },
                  "biography": {
                    "type": "string",
                    "description": "Represents the users biography.",
                    "maxLength": 1000,
                    "example": "biography"
                  },
                  "shared": {
                    "type": "boolean",
                    "description": "Represents  if the users profile will be shared to the community or not. If the flag is set to true add the user profile to the Medirecords community and contact list."
                  },
                  "dob": {
                    "type": "string",
                    "description": "Represents the user date of birth. Date of birth should not be in the future. Format YYYY-MM-DD.",
                    "example": "2021-06-01"
                  },
                  "gender": {
                    "type": "integer",
                    "description": "Represents the user gender.\n\n* `1` - Male\n* `2` - Female",
                    "example": 1,
                    "enum": [
                      1,
                      2
                    ]
                  },
                  "supportEnabled": {
                    "type": "boolean",
                    "description": "Represents support agent access to this record. If the flag is set to true, then the support agent can access this account."
                  },
                  "subSpecialities": {
                    "type": "array",
                    "description": "Repesents the users sub specialities information. There can may more than one sub speciality for a user.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "subSpecialityCode": {
                          "type": "string",
                          "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup\n/code-system/subspeciality-code.",
                          "example": "10"
                        }
                      }
                    }
                  },
                  "languages": {
                    "type": "array",
                    "description": "Repesents the users languages known information. There can may more than one language known for a user.",
                    "maxItems": 10,
                    "items": {
                      "type": "object",
                      "properties": {
                        "languageCode": {
                          "type": "string",
                          "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n/code-system/languages-code.",
                          "example": "1"
                        }
                      }
                    }
                  },
                  "qualifications": {
                    "type": "array",
                    "description": "Repesents the users qualifications information. There can may more than one qualification known for a user.",
                    "maxItems": 20,
                    "items": {
                      "type": "object",
                      "properties": {
                        "qualificationCode": {
                          "type": "string",
                          "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n/code-system/qualifications-code.",
                          "example": "227"
                        }
                      }
                    }
                  },
                  "metadata": {
                    "type": "array",
                    "description": "Repesents the user metadata information.  You can use this parameter to attach key-value data to these user object. Metadata is useful for storing additional, structured information on an object. As an example, you could store your user's full name, user employee identifier, user secondary email or corresponding unique identifier from your system on a MediRecords user object.",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Represents the users metadata key.",
                          "maxLength": 40,
                          "example": "employeeId"
                        },
                        "value": {
                          "type": "string",
                          "description": "Represents the users metadata value.",
                          "maxLength": 500,
                          "example": "12345678"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "titleCode",
                  "firstName",
                  "lastName",
                  "email",
                  "officePhone",
                  "createdBy",
                  "createdDateTime",
                  "updatedBy",
                  "updatedDateTime"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
                    "titleCode": "315890000",
                    "plan": 1,
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "email": "jane.smith@example.com",
                    "officePhone": 491570110,
                    "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
                    "createdDateTime": "2020-10-02T15:00:00Z",
                    "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
                    "updatedDateTime": "2020-10-02T15:00:00Z",
                    "homePhone": "0211111111",
                    "mobilePhone": 399999999,
                    "fax": 212345678,
                    "categoryCode": "86",
                    "userCode": "JS",
                    "userName": "Jane.Smith",
                    "timeZone": 255,
                    "roleCode": "9",
                    "moduleCode": "CLINICAL_GP",
                    "practices": [
                      {
                        "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                        "providerNo": "2515823",
                        "ahpraNo": "BBB6789423478",
                        "medicalObject": "",
                        "defaultPractice": false
                      }
                    ],
                    "supervisingDoctorId": "b8f5f3b0-2402-e711-817e-06c7898ff79d",
                    "prescriberNo": "123456",
                    "abn": "51824753556",
                    "hpiINo": "HP1234567890",
                    "erxId": "79FE",
                    "preferredName": "Jane",
                    "biography": "Jane Smith is an IT Manager of a multinational company",
                    "shared": true,
                    "dob": "1995-07-18",
                    "gender": 1,
                    "supportEnabled": true,
                    "subSpecialities": [
                      {
                        "subSpecialityCode": "57"
                      }
                    ],
                    "languages": [
                      {
                        "languageCode": "123"
                      }
                    ],
                    "qualifications": [
                      {
                        "qualificationCode": "11"
                      }
                    ],
                    "metadata": [
                      {
                        "key": "employeeId",
                        "value": "12345678"
                      },
                      {
                        "key": "secondaryEmail",
                        "value": "Jane.Smith@gmail.com"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Update a user for a given id."
        }
      },
      "delete": {
        "summary": "Delete a user",
        "operationId": "delete-users-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                      "description": "The user identifier"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "description": "Validation error response model.",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "invalid_request",
                      "type": "invalid_request_error",
                      "message": "Invalid request parameter",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "123",
                          "message": "Must be a valid GUID"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "example": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "description": "Unauthorized error response model",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "An Authentication object was not found in the SecurityContext"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ],
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Access is denied"
                    }
                  },
                  "description": "Forbidden error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "x-examples": {
                    "Example": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  },
                  "description": "Error response model",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "code": "unknown_error_code",
                      "type": "unknown_error_type",
                      "message": "Oops! Appears that an error has occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ],
        "description": "To permanently delete a user. This cannot be undone.\nAttempts to delete a user that is no longer exist will fail.\nYou can only delete a user that is currently active or inactive.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "header",
            "name": "Content-Type",
            "schema": {
              "type": "string"
            },
            "description": "The request content type.\n",
            "required": true
          }
        ]
      }
    },
    "/v1/custom-fields": {
      "get": {
        "summary": "Get all Custom Fields",
        "tags": [
          "Definition"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomFieldPage",
                  "x-stoplight": {
                    "id": "95v1gx9a3m7eh"
                  },
                  "description": "Paginated CustomField Response",
                  "type": "object",
                  "x-examples": {
                    "Custom Field Paginated": {
                      "data": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "fieldLabel": "Nickname",
                          "entityType": "Patient",
                          "fieldType": "TEXT_FIELD",
                          "isMandatory": false,
                          "isDisplay": true,
                          "isActive": true,
                          "defaultStringValue": "string",
                          "defaultNumberValue": 0,
                          "placeholder": "string",
                          "constraints": [
                            {
                              "constraintType": "TEXT_MAX_LENGTH",
                              "numberValue": 10
                            }
                          ],
                          "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "createdDateTime": "2022-05-24T04:21:08.660Z",
                          "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "updatedDateTime": "2022-05-24T04:21:08.661Z"
                        },
                        {
                          "id": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                          "fieldLabel": "Agree to terms",
                          "entityType": "Patient",
                          "fieldType": "CHECK_BOX",
                          "isMandatory": true,
                          "isDisplay": true,
                          "isActive": true,
                          "defaultStringValue": null,
                          "defaultNumberValue": null,
                          "placeholder": null,
                          "constraints": [
                            {
                              "constraintType": "BOOL_ALWAYS_TRUE",
                              "numberValue": null,
                              "stringValue": null,
                              "dateValue": null,
                              "boolValue": true
                            }
                          ],
                          "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "createdDateTime": "2022-05-24T04:21:08.660Z",
                          "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "updatedDateTime": "2022-05-24T04:21:08.661Z"
                        },
                        {
                          "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                          "fieldLabel": "Last consult",
                          "entityType": "Patient",
                          "fieldType": "DATE",
                          "isMandatory": false,
                          "isDisplay": true,
                          "isActive": true,
                          "defaultStringValue": null,
                          "defaultNumberValue": null,
                          "placeholder": null,
                          "constraints": [
                            {
                              "constraintType": "DATE_DEFAULT_TODAY",
                              "numberValue": null,
                              "stringValue": null,
                              "dateValue": null,
                              "boolValue": true
                            }
                          ],
                          "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "createdDateTime": "2022-05-31T15:05:34.498Z",
                          "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "updatedDateTime": "2022-05-31T15:05:34.510Z"
                        },
                        {
                          "id": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                          "fieldLabel": "Rating",
                          "entityType": "Patient",
                          "fieldType": "NUMBER",
                          "isMandatory": false,
                          "isDisplay": true,
                          "isActive": true,
                          "defaultStringValue": null,
                          "defaultNumberValue": 12,
                          "placeholder": "Intensity",
                          "constraints": [
                            {
                              "constraintType": "NUMBER_PRECISION",
                              "numberValue": 2,
                              "stringValue": null,
                              "dateValue": null,
                              "boolValue": null
                            },
                            {
                              "constraintType": "NUMBER_MINIMUM",
                              "numberValue": 0,
                              "stringValue": null,
                              "dateValue": null,
                              "boolValue": null
                            },
                            {
                              "constraintType": "NUMBER_MAXIMUM",
                              "numberValue": 5,
                              "stringValue": null,
                              "dateValue": null,
                              "boolValue": null
                            }
                          ],
                          "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "createdDateTime": "2022-05-24T04:20:59.724Z",
                          "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                          "updatedDateTime": "2022-05-24T04:20:59.741Z"
                        }
                      ],
                      "first": true,
                      "last": false,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": null,
                      "size": 0,
                      "page": 0
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "CustomFieldRead",
                        "x-stoplight": {
                          "id": "a07y99v19ynr7"
                        },
                        "description": "CustomField Response",
                        "type": "object",
                        "x-examples": {},
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier",
                            "format": "uuid"
                          },
                          "fieldLabel": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Field Definition"
                          },
                          "entityType": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Attached Entity",
                            "enum": [
                              "Patient"
                            ]
                          },
                          "fieldType": {
                            "type": "string",
                            "minLength": 1,
                            "enum": [
                              "TEXT_FIELD",
                              "CHECK_BOX",
                              "DATE",
                              "NUMBER"
                            ],
                            "description": "Custom Field Type"
                          },
                          "isMandatory": {
                            "type": "boolean",
                            "default": false,
                            "description": "Should not be null/empty validation"
                          },
                          "isDisplay": {
                            "type": "boolean",
                            "default": true,
                            "description": "Display or hide custom field when isActive false otherwise always true when isActive true"
                          },
                          "isActive": {
                            "type": "boolean",
                            "default": true,
                            "description": "Allow inserting new custom field value and Apply custom field validation"
                          },
                          "defaultStringValue": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Default string value",
                            "nullable": true
                          },
                          "defaultNumberValue": {
                            "type": "number",
                            "description": "Default number value",
                            "nullable": true
                          },
                          "placeholder": {
                            "type": "string",
                            "description": "Form hints to display in custom field",
                            "nullable": true
                          },
                          "constraints": {
                            "type": "array",
                            "description": "Attached constraints to the custom field",
                            "items": {
                              "title": "MetaFieldConstraint",
                              "x-stoplight": {
                                "id": "smd94hmjdurao"
                              },
                              "type": "object",
                              "description": "",
                              "properties": {
                                "constraintType": {
                                  "type": "string",
                                  "enum": [
                                    "TEXT_MAX_LENGTH",
                                    "NUMBER_PRECISION",
                                    "NUMBER_MINIMUM",
                                    "NUMBER_MAXIMUM",
                                    "DATE_DEFAULT_TODAY",
                                    "BOOL_ALWAYS_TRUE"
                                  ],
                                  "example": "TEXT_MAX_LENGTH",
                                  "description": "Constraint Type of the custom field"
                                },
                                "numberValue": {
                                  "type": "number",
                                  "description": "Number value"
                                },
                                "boolValue": {
                                  "type": "boolean",
                                  "description": "Bool value"
                                }
                              },
                              "required": [
                                "constraintType"
                              ],
                              "x-examples": {
                                "TEXT_MAX_LENGTH": {
                                  "constraintType": "TEXT_MAX_LENGTH",
                                  "numberValue": 10
                                },
                                "BOOL_ALWAYS_TRUE": {
                                  "constraintType": "BOOL_ALWAYS_TRUE",
                                  "boolValue": true
                                },
                                "NUMBER_PRECISION": {
                                  "constraintType": "NUMBER_PRECISION",
                                  "numberValue": 2
                                },
                                "NUMBER_MINIMUM": {
                                  "constraintType": "NUMBER_MINIMUM",
                                  "numberValue": 0
                                },
                                "NUMBER_MAXIMUM": {
                                  "constraintType": "NUMBER_MAXIMUM",
                                  "numberValue": 5
                                },
                                "DATE_DEFAULT_TODAY": {
                                  "constraintType": "DATE_DEFAULT_TODAY",
                                  "boolValue": true
                                }
                              }
                            }
                          },
                          "createdBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "updatedDateTime": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "first": {
                      "type": "boolean",
                      "description": "Indicates first page"
                    },
                    "last": {
                      "type": "boolean",
                      "description": "Indicate last page"
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "total available page"
                    },
                    "totalElements": {
                      "type": "number",
                      "description": "total available element"
                    },
                    "numberOfElements": {
                      "type": "number",
                      "description": "no of element in current page"
                    },
                    "size": {
                      "type": "number",
                      "description": "page size requested"
                    },
                    "page": {
                      "type": "number",
                      "description": "current page"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-v1-custom-fields",
        "description": "Fetch a paginated list of custom field definitions",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "enum": [
                "Patient"
              ],
              "example": "Patient"
            },
            "description": "Attached entity"
          },
          {
            "name": "fieldType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "enum": [
                "TEXT_FIELD",
                "CHECK_BOX",
                "DATE",
                "NUMBER"
              ],
              "example": "NUMBER,TEXT_FIELD"
            },
            "description": "Custom field types"
          },
          {
            "name": "fieldLabel",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
              "minLength": 1,
              "maxLength": 100
            },
            "description": "Field Name"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "enum": [
                "fieldLabel",
                "entityType",
                "fieldType",
                "mandatory",
                "display",
                "active",
                "defaultValue",
                "placeholder"
              ],
              "example": "defaultValue,ASC"
            },
            "description": "Sort direction"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ]
      }
    },
    "/v1/custom-fields/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Field Definition id"
        }
      ],
      "get": {
        "summary": "",
        "operationId": "get-v1-custom-fields-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CustomFieldRead",
                  "x-stoplight": {
                    "id": "a07y99v19ynr7"
                  },
                  "description": "CustomField Response",
                  "type": "object",
                  "x-examples": {},
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier",
                      "format": "uuid"
                    },
                    "fieldLabel": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Field Definition"
                    },
                    "entityType": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Attached Entity",
                      "enum": [
                        "Patient"
                      ]
                    },
                    "fieldType": {
                      "type": "string",
                      "minLength": 1,
                      "enum": [
                        "TEXT_FIELD",
                        "CHECK_BOX",
                        "DATE",
                        "NUMBER"
                      ],
                      "description": "Custom Field Type"
                    },
                    "isMandatory": {
                      "type": "boolean",
                      "default": false,
                      "description": "Should not be null/empty validation"
                    },
                    "isDisplay": {
                      "type": "boolean",
                      "default": true,
                      "description": "Display or hide custom field when isActive false otherwise always true when isActive true"
                    },
                    "isActive": {
                      "type": "boolean",
                      "default": true,
                      "description": "Allow inserting new custom field value and Apply custom field validation"
                    },
                    "defaultStringValue": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Default string value",
                      "nullable": true
                    },
                    "defaultNumberValue": {
                      "type": "number",
                      "description": "Default number value",
                      "nullable": true
                    },
                    "placeholder": {
                      "type": "string",
                      "description": "Form hints to display in custom field",
                      "nullable": true
                    },
                    "constraints": {
                      "type": "array",
                      "description": "Attached constraints to the custom field",
                      "items": {
                        "title": "MetaFieldConstraint",
                        "x-stoplight": {
                          "id": "smd94hmjdurao"
                        },
                        "type": "object",
                        "description": "",
                        "properties": {
                          "constraintType": {
                            "type": "string",
                            "enum": [
                              "TEXT_MAX_LENGTH",
                              "NUMBER_PRECISION",
                              "NUMBER_MINIMUM",
                              "NUMBER_MAXIMUM",
                              "DATE_DEFAULT_TODAY",
                              "BOOL_ALWAYS_TRUE"
                            ],
                            "example": "TEXT_MAX_LENGTH",
                            "description": "Constraint Type of the custom field"
                          },
                          "numberValue": {
                            "type": "number",
                            "description": "Number value"
                          },
                          "boolValue": {
                            "type": "boolean",
                            "description": "Bool value"
                          }
                        },
                        "required": [
                          "constraintType"
                        ],
                        "x-examples": {
                          "TEXT_MAX_LENGTH": {
                            "constraintType": "TEXT_MAX_LENGTH",
                            "numberValue": 10
                          },
                          "BOOL_ALWAYS_TRUE": {
                            "constraintType": "BOOL_ALWAYS_TRUE",
                            "boolValue": true
                          },
                          "NUMBER_PRECISION": {
                            "constraintType": "NUMBER_PRECISION",
                            "numberValue": 2
                          },
                          "NUMBER_MINIMUM": {
                            "constraintType": "NUMBER_MINIMUM",
                            "numberValue": 0
                          },
                          "NUMBER_MAXIMUM": {
                            "constraintType": "NUMBER_MAXIMUM",
                            "numberValue": 5
                          },
                          "DATE_DEFAULT_TODAY": {
                            "constraintType": "DATE_DEFAULT_TODAY",
                            "boolValue": true
                          }
                        }
                      }
                    },
                    "createdBy": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "createdDateTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedBy": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "updatedDateTime": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "description": "Fetch a custom field definition by id"
      }
    },
    "/v2/patients": {
      "post": {
        "summary": "Create patient",
        "operationId": "create-all-patients1",
        "description": "Create a patient",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Patient",
                "type": "object",
                "description": "The common properties that are included for a patient",
                "x-examples": {
                  "Full Patient Details the can be change": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-01-03",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2016-09-07",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsi": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 2,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever",
                    "customFields": [
                      {
                        "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                        "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "stringValue": "Timmy",
                        "numberValue": null,
                        "dateValue": null,
                        "boolValue": false
                      },
                      {
                        "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                        "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                        "stringValue": null,
                        "numberValue": null,
                        "dateValue": null,
                        "boolValue": true
                      },
                      {
                        "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                        "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                        "stringValue": null,
                        "numberValue": null,
                        "dateValue": "2022-05-05",
                        "boolValue": false
                      },
                      {
                        "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                        "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                        "stringValue": null,
                        "numberValue": 3,
                        "dateValue": null,
                        "boolValue": false
                      }
                    ]
                  }
                },
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "defaultPracticeId": {
                    "type": "string",
                    "description": "Default practice id where the patient details are created",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                    "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "format": "uuid"
                  },
                  "usualDoctorId": {
                    "type": "string",
                    "description": "A user id that represents the usual doctor for the patient",
                    "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "format": "uuid",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)"
                  },
                  "titleCode": {
                    "type": "integer",
                    "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title-code",
                    "example": 315890000
                  },
                  "firstName": {
                    "description": "Represents the patient first name. The firstName is null when oneNameOnly flag is set to true",
                    "type": "string",
                    "nullable": true
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Represents patient last name",
                    "minLength": 1,
                    "maxLength": 40,
                    "example": "Mark"
                  },
                  "middleName": {
                    "type": "string",
                    "description": "Represents the patient middle name",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "David",
                    "nullable": true
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "Tim",
                    "nullable": true
                  },
                  "previouslyKnownAs": {
                    "type": "string",
                    "description": "Represents the patient previously known name",
                    "maxLength": 40,
                    "example": "Jake",
                    "minLength": 0,
                    "nullable": true
                  },
                  "gender": {
                    "type": "integer",
                    "title": "Gender",
                    "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                    "default": 0,
                    "example": 2,
                    "x-examples": {
                      "Male": 2
                    },
                    "x-internal": false
                  },
                  "dob": {
                    "type": "string",
                    "title": "DateOfBirth",
                    "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                    "format": "date",
                    "x-examples": {
                      "Date of Birth": "1970-01-10"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "estimated": {
                    "type": "boolean",
                    "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                    "nullable": true
                  },
                  "oneNameOnly": {
                    "type": "boolean",
                    "example": false,
                    "description": "The flag is set to true, if the patient has one name only",
                    "nullable": true
                  },
                  "dateOfDeath": {
                    "type": "string",
                    "nullable": true,
                    "title": "DateOfDeath",
                    "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                    "default": "yyyy-MM-dd",
                    "example": "2018-12-01",
                    "x-examples": {
                      "Date Of Death Format": "2018-12-01"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "causeOfDeath": {
                    "type": "string",
                    "description": "Represents the patient cause of death. This field is mandatory if the date of death is entered.",
                    "example": "Cancer",
                    "maxLength": 300,
                    "nullable": true
                  },
                  "patientStatusCode": {
                    "type": "integer",
                    "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status-code",
                    "example": 2
                  },
                  "ethnicityCode": {
                    "type": "integer",
                    "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity-code",
                    "example": 55,
                    "nullable": true
                  },
                  "englishAsSecondLanguage": {
                    "type": "boolean",
                    "description": "If english is the patient second language the flag is set as true else it is set to false",
                    "nullable": true
                  },
                  "atsiStatus": {
                    "type": "integer",
                    "title": "Atsi",
                    "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                    "example": 4,
                    "nullable": true,
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "ctgCoPaymentRelief": {
                    "type": "boolean",
                    "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "placeOfBirth": {
                    "type": "string",
                    "description": "Represents the  place of birth for patient with atsi status. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": "Sydney",
                    "minLength": 0,
                    "maxLength": 100,
                    "nullable": true
                  },
                  "skinCode": {
                    "type": "integer",
                    "description": "Represents the skin code for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin-code. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": 16,
                    "nullable": true
                  },
                  "languageSpokenAtHome": {
                    "type": "integer",
                    "description": "Represents the language spoken at home for patient with atsi status\n1 - Aghu Tharrnggala\n2 - Alngith dialect.\nThis field is  only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "homePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "HomePhone",
                    "x-examples": {
                      "HomePhone Number": "0298761234"
                    },
                    "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "maxLength": 10,
                    "example": "0298761234",
                    "x-internal": false,
                    "minLength": 8
                  },
                  "mobilePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "MobilePhone",
                    "x-examples": {
                      "MobileNumber": "0413324123"
                    },
                    "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0413324123",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "workPhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "OfficePhone",
                    "x-examples": {
                      "OfficePhoneNumber": "0298671234"
                    },
                    "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0298671234",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "title": "Email",
                    "description": "Represents the patient email id.",
                    "x-examples": {
                      "Email": "Timothy.Mark@nedirecords.com"
                    },
                    "x-tags": [
                      "Common Models"
                    ],
                    "format": "email",
                    "example": "Timothy.Mark@nedirecords.com",
                    "maxLength": 100,
                    "x-internal": false
                  },
                  "contactMethod": {
                    "title": "PatientContactMethod",
                    "type": "number",
                    "nullable": true,
                    "x-examples": {
                      "example-1": 1
                    },
                    "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field",
                    "maxLength": 500,
                    "example": "Patient had a mild fever",
                    "nullable": true
                  },
                  "customFields": {
                    "type": "array",
                    "items": {
                      "title": "CustomFieldValue",
                      "x-stoplight": {
                        "id": "ofcpa9fc6qp9t"
                      },
                      "description": "Attached custom field value to an entity",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique identfier"
                        },
                        "fieldId": {
                          "type": "string",
                          "format": "uuid",
                          "description": "CustomField definition identifier"
                        },
                        "stringValue": {
                          "type": "string",
                          "description": "Value for TEXT_FIELD field type",
                          "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                        },
                        "numberValue": {
                          "type": "number",
                          "description": "Value for NUMBER field type"
                        },
                        "dateValue": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Value for DATE field type"
                        },
                        "boolValue": {
                          "type": "boolean",
                          "description": "Value for CHECK_BOX",
                          "default": false
                        }
                      },
                      "required": [
                        "fieldId"
                      ],
                      "x-examples": {
                        "Text": {
                          "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                          "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "stringValue": "Timmy",
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": false
                        },
                        "Date": {
                          "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                          "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": "2022-05-05",
                          "boolValue": false
                        },
                        "Number": {
                          "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                          "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                          "stringValue": null,
                          "numberValue": 3,
                          "dateValue": null,
                          "boolValue": false
                        },
                        "Checkbox": {
                          "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                          "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": true
                        }
                      }
                    }
                  }
                },
                "required": [
                  "defaultPracticeId",
                  "titleCode",
                  "lastName",
                  "gender",
                  "dob"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-10-12",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2014-05-08",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsiStatus": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 1,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever",
                    "customFields": []
                  }
                },
                "Request With Mandatory Fields - With FirstName": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "0076b99c-294f-11eb-80f0-077af7b65083",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "N",
                    "preferredName": "Tim",
                    "previouslyKnownAs": null,
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": null,
                    "oneNameOnly": null,
                    "dateOfDeath": null,
                    "causeOfDeath": null,
                    "patientStatusCode": 1,
                    "ethnicityCode": null,
                    "englishAsSecondLanguage": null,
                    "atsiStatus": null,
                    "ctgCoPaymentRelief": null,
                    "placeOfBirth": null,
                    "skinCode": null,
                    "languageSpokenAtHome": null,
                    "homePhone": null,
                    "mobilePhone": null,
                    "workPhone": null,
                    "email": null,
                    "contactMethod": null,
                    "notes": null,
                    "customFields": []
                  }
                },
                "Request With Mandatory Fields - Without FirstName": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "0076b99c-294f-11eb-80f0-077af7b65083",
                    "titleCode": 315890000,
                    "firstName": null,
                    "lastName": "Mark",
                    "middleName": null,
                    "preferredName": null,
                    "previouslyKnownAs": null,
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": null,
                    "oneNameOnly": true,
                    "dateOfDeath": null,
                    "causeOfDeath": null,
                    "patientStatusCode": 1,
                    "ethnicityCode": null,
                    "englishAsSecondLanguage": null,
                    "atsiStatus": null,
                    "ctgCoPaymentRelief": null,
                    "placeOfBirth": null,
                    "skinCode": null,
                    "languageSpokenAtHome": null,
                    "homePhone": null,
                    "mobilePhone": null,
                    "workPhone": null,
                    "email": null,
                    "contactMethod": null,
                    "notes": null,
                    "customFields": []
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": null,
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": null,
                    "oneNameOnly": false,
                    "dateOfDeath": "2018-12-01",
                    "causeOfDeath": null,
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": null,
                    "atsiStatus": 4,
                    "ctgCoPaymentRelief": null,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": null,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": null,
                    "notes": "Patient had a mild fever",
                    "customFields": []
                  }
                },
                "Request With Custom Fields": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "string",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2018-12-01",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsiStatus": 4,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 0,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 0,
                    "notes": "Patient had a mild fever",
                    "customFields": [
                      {
                        "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                        "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "stringValue": "Timmy"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Patient Create Request"
        },
        "responses": {
          "201": {
            "description": "Patient Create Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientResponse",
                  "description": "The Patient Response properties that are included for a patient",
                  "type": "object",
                  "x-examples": {
                    "Full Patient Response": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-12-12",
                      "estimated": true,
                      "oneNameOnly": "false",
                      "dateOfDeath": "2018-03-04",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsi": 1,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "customFields": [
                        {
                          "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                          "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "stringValue": "Timmy",
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                          "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": true,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                          "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": "2022-05-05",
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                          "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                          "stringValue": null,
                          "numberValue": 3,
                          "dateValue": null,
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "defaultPracticeId": {
                      "type": "string",
                      "description": "Default practice id where the patient details are created",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "format": "uuid",
                      "nullable": true
                    },
                    "usualDoctorId": {
                      "type": "string",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "description": "A user id that represents the usual doctor for the patient",
                      "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "format": "uuid",
                      "nullable": true
                    },
                    "titleCode": {
                      "type": "integer",
                      "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                      "example": 315890000
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Timothy",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents patient last name",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Mark"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Represents the patient middle name",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "David",
                      "nullable": true
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "Tim",
                      "nullable": true
                    },
                    "previouslyKnownAs": {
                      "type": "string",
                      "description": "Represents the patient previously known name",
                      "maxLength": 40,
                      "example": "Jake",
                      "minLength": 0,
                      "nullable": true
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Represents the patient full name",
                      "nullable": true
                    },
                    "gender": {
                      "type": "integer",
                      "title": "Gender",
                      "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                      "default": 0,
                      "example": 2,
                      "x-examples": {
                        "Male": 2
                      },
                      "x-internal": false
                    },
                    "dob": {
                      "type": "string",
                      "title": "DateOfBirth",
                      "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                      "format": "date",
                      "x-examples": {
                        "Date of Birth": "1970-01-10"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "estimated": {
                      "type": "boolean",
                      "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                      "nullable": true
                    },
                    "oneNameOnly": {
                      "type": "boolean",
                      "example": false,
                      "description": "The flag is set to true, if the patient has one name only",
                      "nullable": true
                    },
                    "dateOfDeath": {
                      "type": "string",
                      "nullable": true,
                      "title": "DateOfDeath",
                      "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                      "default": "yyyy-MM-dd",
                      "example": "2018-12-01",
                      "x-examples": {
                        "Date Of Death Format": "2018-12-01"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "causeOfDeath": {
                      "type": "string",
                      "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                      "example": "Cancer",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "patientStatusCode": {
                      "type": "integer",
                      "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                      "example": 2,
                      "nullable": true
                    },
                    "ethnicityCode": {
                      "type": "integer",
                      "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                      "example": 55,
                      "nullable": true
                    },
                    "englishAsSecondLanguage": {
                      "type": "boolean",
                      "description": "If english is the patient second language the flag is set as true else it is set to false",
                      "nullable": true
                    },
                    "atsiStatus": {
                      "type": "integer",
                      "title": "Atsi",
                      "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                      "example": 4,
                      "nullable": true,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "ctgCoPaymentRelief": {
                      "type": "boolean",
                      "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "nullable": true
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": "Sydney",
                      "maxLength": 100,
                      "nullable": true
                    },
                    "skinCode": {
                      "type": "integer",
                      "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": 16,
                      "nullable": true
                    },
                    "languageSpokenAtHome": {
                      "title": "LanguageSpokenAtHome",
                      "type": "integer",
                      "nullable": true,
                      "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "HomePhone",
                      "x-examples": {
                        "HomePhone Number": "0298761234"
                      },
                      "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "maxLength": 10,
                      "example": "0298761234",
                      "x-internal": false,
                      "minLength": 8
                    },
                    "mobilePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "MobilePhone",
                      "x-examples": {
                        "MobileNumber": "0413324123"
                      },
                      "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0413324123",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "workPhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "OfficePhone",
                      "x-examples": {
                        "OfficePhoneNumber": "0298671234"
                      },
                      "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0298671234",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "title": "Email",
                      "description": "Represents the patient email id.",
                      "x-examples": {
                        "Email": "Timothy.Mark@nedirecords.com"
                      },
                      "x-tags": [
                        "Common Models"
                      ],
                      "format": "email",
                      "example": "Timothy.Mark@nedirecords.com",
                      "maxLength": 100,
                      "x-internal": false
                    },
                    "contactMethod": {
                      "title": "PatientContactMethod",
                      "type": "number",
                      "nullable": true,
                      "x-examples": {
                        "example-1": 1
                      },
                      "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "example": "Patient had a mild fever",
                      "nullable": true
                    },
                    "customFields": {
                      "type": "array",
                      "items": {
                        "title": "CustomFieldValue",
                        "x-stoplight": {
                          "id": "ofcpa9fc6qp9t"
                        },
                        "description": "Attached custom field value to an entity",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique identfier"
                          },
                          "fieldId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "CustomField definition identifier"
                          },
                          "stringValue": {
                            "type": "string",
                            "description": "Value for TEXT_FIELD field type",
                            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                          },
                          "numberValue": {
                            "type": "number",
                            "description": "Value for NUMBER field type"
                          },
                          "dateValue": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Value for DATE field type"
                          },
                          "boolValue": {
                            "type": "boolean",
                            "description": "Value for CHECK_BOX",
                            "default": false
                          },
                          "createdBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "updatedDateTime": {
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "required": [
                          "fieldId"
                        ]
                      }
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  }
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-10-12",
                      "estimated": true,
                      "oneNameOnly": false,
                      "dateOfDeath": "2014-05-08",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsiStatus": 3,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "createdDateTime": "2020-10-28T04:55:06.766Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-10-29T15:00:40.226Z"
                    }
                  },
                  "Response With Mandatory Fields - With FirstName": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": null,
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": null,
                      "preferredName": null,
                      "previouslyKnownAs": null,
                      "gender": 2,
                      "dob": "1970-01-10",
                      "estimated": null,
                      "oneNameOnly": null,
                      "dateOfDeath": null,
                      "causeOfDeath": null,
                      "patientStatusCode": 1,
                      "ethnicityCode": null,
                      "englishAsSecondLanguage": null,
                      "atsiStatus": null,
                      "ctgCoPaymentRelief": null,
                      "placeOfBirth": null,
                      "skinCode": null,
                      "languageSpokenAtHome": null,
                      "homePhone": null,
                      "mobilePhone": null,
                      "workPhone": null,
                      "email": null,
                      "contactMethod": null,
                      "notes": null,
                      "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "createdDateTime": "2020-10-28T04:55:06.766Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-10-29T15:00:40.226Z"
                    }
                  },
                  "Response With Mandatory Fields - Without FirstName": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": null,
                      "titleCode": 315890000,
                      "firstName": null,
                      "lastName": "Mark",
                      "middleName": null,
                      "preferredName": null,
                      "previouslyKnownAs": null,
                      "gender": 2,
                      "dob": "1970-01-10",
                      "estimated": null,
                      "oneNameOnly": true,
                      "dateOfDeath": null,
                      "causeOfDeath": null,
                      "patientStatusCode": 1,
                      "ethnicityCode": null,
                      "englishAsSecondLanguage": null,
                      "atsiStatus": null,
                      "ctgCoPaymentRelief": null,
                      "placeOfBirth": null,
                      "skinCode": null,
                      "languageSpokenAtHome": null,
                      "homePhone": null,
                      "mobilePhone": null,
                      "workPhone": null,
                      "email": null,
                      "contactMethod": null,
                      "notes": null,
                      "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "createdDateTime": "2020-10-28T04:55:06.766Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2020-10-29T15:00:40.226Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "500",
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            },
            "x-examples": {
              "Example": {
                "code": "unknown_error_code",
                "type": "unknown_error_type",
                "message": "Oops! Appears that an error has occurred"
              }
            },
            "description": "Generic error response model"
          }
        },
        "tags": [
          "Demographics"
        ]
      },
      "parameters": [],
      "get": {
        "summary": "Get all patients",
        "operationId": "get-all-patients1",
        "description": "Get list of Patients",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "PatientPage",
                    "type": "object",
                    "x-examples": {
                      "Full Response with pagination": {
                        "data": [
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleId": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "genderCode": 2,
                            "dob": "8/12/1970",
                            "estimated": true,
                            "oneNameOnly": "false",
                            "dateOfDeath": "12/01/2010",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "esl": true,
                            "atsiId": 4,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 0,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "note": "Patient had a mild fever",
                            "customFields": [
                              {
                                "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                                "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                "stringValue": "Timmy",
                                "numberValue": null,
                                "dateValue": null,
                                "boolValue": false,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              },
                              {
                                "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                                "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                                "stringValue": null,
                                "numberValue": null,
                                "dateValue": null,
                                "boolValue": true,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              },
                              {
                                "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                                "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                                "stringValue": null,
                                "numberValue": null,
                                "dateValue": "2022-05-05",
                                "boolValue": false,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              },
                              {
                                "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                                "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                                "stringValue": null,
                                "numberValue": 3,
                                "dateValue": null,
                                "boolValue": false,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              }
                            ],
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          }
                        ],
                        "first": true,
                        "last": false,
                        "totalPages": 3,
                        "totalElements": 29,
                        "numberOfElements": 10,
                        "size": 10,
                        "page": 0
                      }
                    },
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "title": "PatientResponse",
                          "description": "The Patient Response properties that are included for a patient",
                          "type": "object",
                          "x-examples": {
                            "Full Patient Response": {
                              "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                              "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                              "titleCode": 315890000,
                              "firstName": "Timothy",
                              "lastName": "Mark",
                              "middleName": "David",
                              "preferredName": "Tim",
                              "previouslyKnownAs": "Jake",
                              "fullName": "Timothy Mark",
                              "gender": 2,
                              "dob": "1970-12-12",
                              "estimated": true,
                              "oneNameOnly": "false",
                              "dateOfDeath": "2018-03-04",
                              "causeOfDeath": "Cancer",
                              "patientStatusCode": 2,
                              "ethnicityCode": 55,
                              "englishAsSecondLanguage": true,
                              "atsi": 1,
                              "ctgCoPaymentRelief": true,
                              "placeOfBirth": "Sydney",
                              "skinCode": 16,
                              "languageSpokenAtHome": 1,
                              "homePhone": 298761234,
                              "mobilePhone": "0413324123",
                              "workPhone": 298671234,
                              "email": "Timothy.Mark@nedirecords.com",
                              "contactMethod": 1,
                              "notes": "Patient had a mild fever",
                              "customFields": [
                                {
                                  "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                                  "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                  "stringValue": "Timmy",
                                  "numberValue": null,
                                  "dateValue": null,
                                  "boolValue": false,
                                  "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                  "createdDateTime": "2019-08-24T14:15:22Z",
                                  "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                  "updatedDateTime": "2019-08-24T14:15:22Z"
                                },
                                {
                                  "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                                  "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                                  "stringValue": null,
                                  "numberValue": null,
                                  "dateValue": null,
                                  "boolValue": true,
                                  "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                  "createdDateTime": "2019-08-24T14:15:22Z",
                                  "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                  "updatedDateTime": "2019-08-24T14:15:22Z"
                                },
                                {
                                  "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                                  "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                                  "stringValue": null,
                                  "numberValue": null,
                                  "dateValue": "2022-05-05",
                                  "boolValue": false,
                                  "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                  "createdDateTime": "2019-08-24T14:15:22Z",
                                  "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                  "updatedDateTime": "2019-08-24T14:15:22Z"
                                },
                                {
                                  "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                                  "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                                  "stringValue": null,
                                  "numberValue": 3,
                                  "dateValue": null,
                                  "boolValue": false,
                                  "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                  "createdDateTime": "2019-08-24T14:15:22Z",
                                  "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                  "updatedDateTime": "2019-08-24T14:15:22Z"
                                }
                              ],
                              "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "createdDateTime": "2019-08-24T14:15:22Z",
                              "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                              "updatedDateTime": "2019-08-24T14:15:22Z"
                            }
                          },
                          "x-tags": [
                            "Other"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                              "format": "uuid",
                              "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                            },
                            "defaultPracticeId": {
                              "type": "string",
                              "description": "Default practice id where the patient details are created",
                              "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                              "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                              "format": "uuid",
                              "nullable": true
                            },
                            "usualDoctorId": {
                              "type": "string",
                              "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                              "description": "A user id that represents the usual doctor for the patient",
                              "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                              "format": "uuid",
                              "nullable": true
                            },
                            "titleCode": {
                              "type": "integer",
                              "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                              "example": 315890000
                            },
                            "firstName": {
                              "type": "string",
                              "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                              "minLength": 1,
                              "maxLength": 40,
                              "example": "Timothy",
                              "nullable": true
                            },
                            "lastName": {
                              "type": "string",
                              "description": "Represents patient last name",
                              "minLength": 1,
                              "maxLength": 40,
                              "example": "Mark"
                            },
                            "middleName": {
                              "type": "string",
                              "description": "Represents the patient middle name",
                              "minLength": 0,
                              "maxLength": 40,
                              "example": "David",
                              "nullable": true
                            },
                            "preferredName": {
                              "type": "string",
                              "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                              "minLength": 0,
                              "maxLength": 40,
                              "example": "Tim",
                              "nullable": true
                            },
                            "previouslyKnownAs": {
                              "type": "string",
                              "description": "Represents the patient previously known name",
                              "maxLength": 40,
                              "example": "Jake",
                              "minLength": 0,
                              "nullable": true
                            },
                            "fullName": {
                              "type": "string",
                              "description": "Represents the patient full name",
                              "nullable": true
                            },
                            "gender": {
                              "type": "integer",
                              "title": "Gender",
                              "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                              "default": 0,
                              "example": 2,
                              "x-examples": {
                                "Male": 2
                              },
                              "x-internal": false
                            },
                            "dob": {
                              "type": "string",
                              "title": "DateOfBirth",
                              "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                              "format": "date",
                              "x-examples": {
                                "Date of Birth": "1970-01-10"
                              },
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "estimated": {
                              "type": "boolean",
                              "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                              "nullable": true
                            },
                            "oneNameOnly": {
                              "type": "boolean",
                              "example": false,
                              "description": "The flag is set to true, if the patient has one name only",
                              "nullable": true
                            },
                            "dateOfDeath": {
                              "type": "string",
                              "nullable": true,
                              "title": "DateOfDeath",
                              "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                              "default": "yyyy-MM-dd",
                              "example": "2018-12-01",
                              "x-examples": {
                                "Date Of Death Format": "2018-12-01"
                              },
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "causeOfDeath": {
                              "type": "string",
                              "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                              "example": "Cancer",
                              "maxLength": 300,
                              "nullable": true
                            },
                            "patientStatusCode": {
                              "type": "integer",
                              "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                              "example": 2,
                              "nullable": true
                            },
                            "ethnicityCode": {
                              "type": "integer",
                              "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                              "example": 55,
                              "nullable": true
                            },
                            "englishAsSecondLanguage": {
                              "type": "boolean",
                              "description": "If english is the patient second language the flag is set as true else it is set to false",
                              "nullable": true
                            },
                            "atsiStatus": {
                              "type": "integer",
                              "title": "Atsi",
                              "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                              "example": 4,
                              "nullable": true,
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "ctgCoPaymentRelief": {
                              "type": "boolean",
                              "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "nullable": true
                            },
                            "placeOfBirth": {
                              "type": "string",
                              "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "example": "Sydney",
                              "maxLength": 100,
                              "nullable": true
                            },
                            "skinCode": {
                              "type": "integer",
                              "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "example": 16,
                              "nullable": true
                            },
                            "languageSpokenAtHome": {
                              "title": "LanguageSpokenAtHome",
                              "type": "integer",
                              "nullable": true,
                              "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                              "x-examples": {
                                "example-1": 1
                              },
                              "x-internal": false
                            },
                            "homePhone": {
                              "type": "string",
                              "nullable": true,
                              "title": "HomePhone",
                              "x-examples": {
                                "HomePhone Number": "0298761234"
                              },
                              "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                              "x-tags": [
                                "Common Models"
                              ],
                              "maxLength": 10,
                              "example": "0298761234",
                              "x-internal": false,
                              "minLength": 8
                            },
                            "mobilePhone": {
                              "type": "string",
                              "nullable": true,
                              "title": "MobilePhone",
                              "x-examples": {
                                "MobileNumber": "0413324123"
                              },
                              "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                              "x-tags": [
                                "Common Models"
                              ],
                              "example": "0413324123",
                              "maxLength": 10,
                              "x-internal": false,
                              "minLength": 8
                            },
                            "workPhone": {
                              "type": "string",
                              "nullable": true,
                              "title": "OfficePhone",
                              "x-examples": {
                                "OfficePhoneNumber": "0298671234"
                              },
                              "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                              "x-tags": [
                                "Common Models"
                              ],
                              "example": "0298671234",
                              "maxLength": 10,
                              "x-internal": false,
                              "minLength": 8
                            },
                            "email": {
                              "type": "string",
                              "nullable": true,
                              "title": "Email",
                              "description": "Represents the patient email id.",
                              "x-examples": {
                                "Email": "Timothy.Mark@nedirecords.com"
                              },
                              "x-tags": [
                                "Common Models"
                              ],
                              "format": "email",
                              "example": "Timothy.Mark@nedirecords.com",
                              "maxLength": 100,
                              "x-internal": false
                            },
                            "contactMethod": {
                              "title": "PatientContactMethod",
                              "type": "number",
                              "nullable": true,
                              "x-examples": {
                                "example-1": 1
                              },
                              "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                              "x-tags": [
                                "Other"
                              ]
                            },
                            "notes": {
                              "type": "string",
                              "description": "Any comments or notes can be recorded in this field",
                              "maxLength": 500,
                              "example": "Patient had a mild fever",
                              "nullable": true
                            },
                            "customFields": {
                              "type": "array",
                              "items": {
                                "title": "CustomFieldValue",
                                "x-stoplight": {
                                  "id": "ofcpa9fc6qp9t"
                                },
                                "description": "Attached custom field value to an entity",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "format": "uuid",
                                    "description": "Unique identfier"
                                  },
                                  "fieldId": {
                                    "type": "string",
                                    "format": "uuid",
                                    "description": "CustomField definition identifier"
                                  },
                                  "stringValue": {
                                    "type": "string",
                                    "description": "Value for TEXT_FIELD field type",
                                    "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                                  },
                                  "numberValue": {
                                    "type": "number",
                                    "description": "Value for NUMBER field type"
                                  },
                                  "dateValue": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "Value for DATE field type"
                                  },
                                  "boolValue": {
                                    "type": "boolean",
                                    "description": "Value for CHECK_BOX",
                                    "default": false
                                  },
                                  "createdBy": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "createdDateTime": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "updatedBy": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "updatedDateTime": {
                                    "type": "string",
                                    "format": "date-time"
                                  }
                                },
                                "required": [
                                  "fieldId"
                                ]
                              }
                            },
                            "createdBy": {
                              "type": "string",
                              "title": "CreatedBy",
                              "description": "A GUID refers to User identifier who created the resource.",
                              "x-examples": {
                                "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                              },
                              "default": "UUID",
                              "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                              "x-internal": false
                            },
                            "createdDateTime": {
                              "type": "string",
                              "title": "CreatedDate",
                              "description": "Time when the resource was created.",
                              "x-internal": false
                            },
                            "updatedBy": {
                              "type": "string",
                              "title": "UpdatedBy",
                              "description": "A GUID refers to User identifier who updated the resource.",
                              "default": "UUID",
                              "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                              "x-internal": false
                            },
                            "updatedDateTime": {
                              "title": "UpdatedDate",
                              "type": "string",
                              "description": "Time when the resource was updated.",
                              "x-internal": false
                            }
                          }
                        }
                      },
                      "first": {
                        "type": "boolean",
                        "description": "Showing the first page."
                      },
                      "last": {
                        "type": "boolean",
                        "description": "Showing the last page."
                      },
                      "totalPages": {
                        "type": "integer",
                        "description": "Total Pages"
                      },
                      "totalElements": {
                        "description": "Total records",
                        "type": "integer"
                      },
                      "numberOfElements": {
                        "type": "integer",
                        "description": "Total records"
                      },
                      "size": {
                        "description": "Number of records in a page",
                        "type": "integer"
                      },
                      "page": {
                        "type": "integer",
                        "description": "current page number"
                      }
                    },
                    "description": "Get all patients with pagination",
                    "x-tags": [
                      "Other"
                    ]
                  }
                },
                "examples": {
                  "List Of Patients With Pagination": {
                    "value": [
                      {
                        "data": [
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "genderCode": 2,
                            "dob": "1970-09-08",
                            "estimated": true,
                            "oneNameOnly": false,
                            "dateOfDeath": "2018-07-09",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsiStatus": 1,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 1,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          },
                          {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "genderCode": 2,
                            "dob": "1970-06-10",
                            "estimated": true,
                            "oneNameOnly": false,
                            "dateOfDeath": "2017-08-04",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsiStatus": 3,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 0,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          }
                        ],
                        "first": true,
                        "last": true,
                        "totalPages": 1,
                        "totalElements": 2,
                        "numberOfElements": 2,
                        "size": 10,
                        "page": 0
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "tags": [
          "Demographics"
        ]
      }
    },
    "/v2/patients/{patient_id}": {
      "parameters": [
        {
          "name": "patient_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "A GUID that represents the patient_id"
        }
      ],
      "get": {
        "summary": "Get patient",
        "tags": [
          "Demographics"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientResponse",
                  "description": "The Patient Response properties that are included for a patient",
                  "type": "object",
                  "x-examples": {
                    "Full Patient Response": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-12-12",
                      "estimated": true,
                      "oneNameOnly": "false",
                      "dateOfDeath": "2018-03-04",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsi": 1,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "customFields": [
                        {
                          "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                          "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "stringValue": "Timmy",
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                          "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": true,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                          "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": "2022-05-05",
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                          "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                          "stringValue": null,
                          "numberValue": 3,
                          "dateValue": null,
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "defaultPracticeId": {
                      "type": "string",
                      "description": "Default practice id where the patient details are created",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "format": "uuid",
                      "nullable": true
                    },
                    "usualDoctorId": {
                      "type": "string",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "description": "A user id that represents the usual doctor for the patient",
                      "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "format": "uuid",
                      "nullable": true
                    },
                    "titleCode": {
                      "type": "integer",
                      "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                      "example": 315890000
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Timothy",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents patient last name",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Mark"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Represents the patient middle name",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "David",
                      "nullable": true
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "Tim",
                      "nullable": true
                    },
                    "previouslyKnownAs": {
                      "type": "string",
                      "description": "Represents the patient previously known name",
                      "maxLength": 40,
                      "example": "Jake",
                      "minLength": 0,
                      "nullable": true
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Represents the patient full name",
                      "nullable": true
                    },
                    "gender": {
                      "type": "integer",
                      "title": "Gender",
                      "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                      "default": 0,
                      "example": 2,
                      "x-examples": {
                        "Male": 2
                      },
                      "x-internal": false
                    },
                    "dob": {
                      "type": "string",
                      "title": "DateOfBirth",
                      "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                      "format": "date",
                      "x-examples": {
                        "Date of Birth": "1970-01-10"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "estimated": {
                      "type": "boolean",
                      "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                      "nullable": true
                    },
                    "oneNameOnly": {
                      "type": "boolean",
                      "example": false,
                      "description": "The flag is set to true, if the patient has one name only",
                      "nullable": true
                    },
                    "dateOfDeath": {
                      "type": "string",
                      "nullable": true,
                      "title": "DateOfDeath",
                      "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                      "default": "yyyy-MM-dd",
                      "example": "2018-12-01",
                      "x-examples": {
                        "Date Of Death Format": "2018-12-01"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "causeOfDeath": {
                      "type": "string",
                      "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                      "example": "Cancer",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "patientStatusCode": {
                      "type": "integer",
                      "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                      "example": 2,
                      "nullable": true
                    },
                    "ethnicityCode": {
                      "type": "integer",
                      "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                      "example": 55,
                      "nullable": true
                    },
                    "englishAsSecondLanguage": {
                      "type": "boolean",
                      "description": "If english is the patient second language the flag is set as true else it is set to false",
                      "nullable": true
                    },
                    "atsiStatus": {
                      "type": "integer",
                      "title": "Atsi",
                      "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                      "example": 4,
                      "nullable": true,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "ctgCoPaymentRelief": {
                      "type": "boolean",
                      "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "nullable": true
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": "Sydney",
                      "maxLength": 100,
                      "nullable": true
                    },
                    "skinCode": {
                      "type": "integer",
                      "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": 16,
                      "nullable": true
                    },
                    "languageSpokenAtHome": {
                      "title": "LanguageSpokenAtHome",
                      "type": "integer",
                      "nullable": true,
                      "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "HomePhone",
                      "x-examples": {
                        "HomePhone Number": "0298761234"
                      },
                      "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "maxLength": 10,
                      "example": "0298761234",
                      "x-internal": false,
                      "minLength": 8
                    },
                    "mobilePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "MobilePhone",
                      "x-examples": {
                        "MobileNumber": "0413324123"
                      },
                      "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0413324123",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "workPhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "OfficePhone",
                      "x-examples": {
                        "OfficePhoneNumber": "0298671234"
                      },
                      "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0298671234",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "title": "Email",
                      "description": "Represents the patient email id.",
                      "x-examples": {
                        "Email": "Timothy.Mark@nedirecords.com"
                      },
                      "x-tags": [
                        "Common Models"
                      ],
                      "format": "email",
                      "example": "Timothy.Mark@nedirecords.com",
                      "maxLength": 100,
                      "x-internal": false
                    },
                    "contactMethod": {
                      "title": "PatientContactMethod",
                      "type": "number",
                      "nullable": true,
                      "x-examples": {
                        "example-1": 1
                      },
                      "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "example": "Patient had a mild fever",
                      "nullable": true
                    },
                    "customFields": {
                      "type": "array",
                      "items": {
                        "title": "CustomFieldValue",
                        "x-stoplight": {
                          "id": "ofcpa9fc6qp9t"
                        },
                        "description": "Attached custom field value to an entity",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique identfier"
                          },
                          "fieldId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "CustomField definition identifier"
                          },
                          "stringValue": {
                            "type": "string",
                            "description": "Value for TEXT_FIELD field type",
                            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                          },
                          "numberValue": {
                            "type": "number",
                            "description": "Value for NUMBER field type"
                          },
                          "dateValue": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Value for DATE field type"
                          },
                          "boolValue": {
                            "type": "boolean",
                            "description": "Value for CHECK_BOX",
                            "default": false
                          },
                          "createdBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "updatedDateTime": {
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "required": [
                          "fieldId"
                        ]
                      }
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  }
                },
                "examples": {
                  "Patient Search Response": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "genderCode": 2,
                      "dob": "1970-08-05",
                      "estimated": true,
                      "oneNameOnly": false,
                      "dateOfDeath": "2015-09-01",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsiStatus": 3,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patients-id1",
        "description": "Get a patient for a given patient id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update patient",
        "operationId": "put-patients-id1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientResponse",
                  "description": "The Patient Response properties that are included for a patient",
                  "type": "object",
                  "x-examples": {
                    "Full Patient Response": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-12-12",
                      "estimated": true,
                      "oneNameOnly": "false",
                      "dateOfDeath": "2018-03-04",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsi": 1,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "customFields": [
                        {
                          "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                          "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "stringValue": "Timmy",
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                          "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": true,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                          "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": "2022-05-05",
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        },
                        {
                          "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                          "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                          "stringValue": null,
                          "numberValue": 3,
                          "dateValue": null,
                          "boolValue": false,
                          "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "defaultPracticeId": {
                      "type": "string",
                      "description": "Default practice id where the patient details are created",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "format": "uuid",
                      "nullable": true
                    },
                    "usualDoctorId": {
                      "type": "string",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "description": "A user id that represents the usual doctor for the patient",
                      "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "format": "uuid",
                      "nullable": true
                    },
                    "titleCode": {
                      "type": "integer",
                      "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                      "example": 315890000
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Timothy",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents patient last name",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Mark"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Represents the patient middle name",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "David",
                      "nullable": true
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "Tim",
                      "nullable": true
                    },
                    "previouslyKnownAs": {
                      "type": "string",
                      "description": "Represents the patient previously known name",
                      "maxLength": 40,
                      "example": "Jake",
                      "minLength": 0,
                      "nullable": true
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Represents the patient full name",
                      "nullable": true
                    },
                    "gender": {
                      "type": "integer",
                      "title": "Gender",
                      "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                      "default": 0,
                      "example": 2,
                      "x-examples": {
                        "Male": 2
                      },
                      "x-internal": false
                    },
                    "dob": {
                      "type": "string",
                      "title": "DateOfBirth",
                      "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                      "format": "date",
                      "x-examples": {
                        "Date of Birth": "1970-01-10"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "estimated": {
                      "type": "boolean",
                      "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                      "nullable": true
                    },
                    "oneNameOnly": {
                      "type": "boolean",
                      "example": false,
                      "description": "The flag is set to true, if the patient has one name only",
                      "nullable": true
                    },
                    "dateOfDeath": {
                      "type": "string",
                      "nullable": true,
                      "title": "DateOfDeath",
                      "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                      "default": "yyyy-MM-dd",
                      "example": "2018-12-01",
                      "x-examples": {
                        "Date Of Death Format": "2018-12-01"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "causeOfDeath": {
                      "type": "string",
                      "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                      "example": "Cancer",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "patientStatusCode": {
                      "type": "integer",
                      "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                      "example": 2,
                      "nullable": true
                    },
                    "ethnicityCode": {
                      "type": "integer",
                      "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                      "example": 55,
                      "nullable": true
                    },
                    "englishAsSecondLanguage": {
                      "type": "boolean",
                      "description": "If english is the patient second language the flag is set as true else it is set to false",
                      "nullable": true
                    },
                    "atsiStatus": {
                      "type": "integer",
                      "title": "Atsi",
                      "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                      "example": 4,
                      "nullable": true,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "ctgCoPaymentRelief": {
                      "type": "boolean",
                      "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "nullable": true
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": "Sydney",
                      "maxLength": 100,
                      "nullable": true
                    },
                    "skinCode": {
                      "type": "integer",
                      "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": 16,
                      "nullable": true
                    },
                    "languageSpokenAtHome": {
                      "title": "LanguageSpokenAtHome",
                      "type": "integer",
                      "nullable": true,
                      "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "HomePhone",
                      "x-examples": {
                        "HomePhone Number": "0298761234"
                      },
                      "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "maxLength": 10,
                      "example": "0298761234",
                      "x-internal": false,
                      "minLength": 8
                    },
                    "mobilePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "MobilePhone",
                      "x-examples": {
                        "MobileNumber": "0413324123"
                      },
                      "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0413324123",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "workPhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "OfficePhone",
                      "x-examples": {
                        "OfficePhoneNumber": "0298671234"
                      },
                      "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0298671234",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "title": "Email",
                      "description": "Represents the patient email id.",
                      "x-examples": {
                        "Email": "Timothy.Mark@nedirecords.com"
                      },
                      "x-tags": [
                        "Common Models"
                      ],
                      "format": "email",
                      "example": "Timothy.Mark@nedirecords.com",
                      "maxLength": 100,
                      "x-internal": false
                    },
                    "contactMethod": {
                      "title": "PatientContactMethod",
                      "type": "number",
                      "nullable": true,
                      "x-examples": {
                        "example-1": 1
                      },
                      "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "example": "Patient had a mild fever",
                      "nullable": true
                    },
                    "customFields": {
                      "type": "array",
                      "items": {
                        "title": "CustomFieldValue",
                        "x-stoplight": {
                          "id": "ofcpa9fc6qp9t"
                        },
                        "description": "Attached custom field value to an entity",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique identfier"
                          },
                          "fieldId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "CustomField definition identifier"
                          },
                          "stringValue": {
                            "type": "string",
                            "description": "Value for TEXT_FIELD field type",
                            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                          },
                          "numberValue": {
                            "type": "number",
                            "description": "Value for NUMBER field type"
                          },
                          "dateValue": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Value for DATE field type"
                          },
                          "boolValue": {
                            "type": "boolean",
                            "description": "Value for CHECK_BOX",
                            "default": false
                          },
                          "createdBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "createdDateTime": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedBy": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "updatedDateTime": {
                            "type": "string",
                            "format": "date-time"
                          }
                        },
                        "required": [
                          "fieldId"
                        ]
                      }
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  }
                },
                "examples": {
                  "Response": {
                    "value": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-11-11",
                      "estimated": true,
                      "oneNameOnly": false,
                      "dateOfDeath": "2010-01-01",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsiStatus": 3,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update a patient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Patient",
                "type": "object",
                "description": "The common properties that are included for a patient",
                "x-examples": {
                  "Full Patient Details the can be change": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-01-03",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2016-09-07",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsi": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 2,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever",
                    "customFields": [
                      {
                        "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                        "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "stringValue": "Timmy",
                        "numberValue": null,
                        "dateValue": null,
                        "boolValue": false
                      },
                      {
                        "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                        "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                        "stringValue": null,
                        "numberValue": null,
                        "dateValue": null,
                        "boolValue": true
                      },
                      {
                        "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                        "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                        "stringValue": null,
                        "numberValue": null,
                        "dateValue": "2022-05-05",
                        "boolValue": false
                      },
                      {
                        "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                        "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                        "stringValue": null,
                        "numberValue": 3,
                        "dateValue": null,
                        "boolValue": false
                      }
                    ]
                  }
                },
                "x-tags": [
                  "Other"
                ],
                "properties": {
                  "defaultPracticeId": {
                    "type": "string",
                    "description": "Default practice id where the patient details are created",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                    "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "format": "uuid"
                  },
                  "usualDoctorId": {
                    "type": "string",
                    "description": "A user id that represents the usual doctor for the patient",
                    "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "format": "uuid",
                    "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)"
                  },
                  "titleCode": {
                    "type": "integer",
                    "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title-code",
                    "example": 315890000
                  },
                  "firstName": {
                    "description": "Represents the patient first name. The firstName is null when oneNameOnly flag is set to true",
                    "type": "string",
                    "nullable": true
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Represents patient last name",
                    "minLength": 1,
                    "maxLength": 40,
                    "example": "Mark"
                  },
                  "middleName": {
                    "type": "string",
                    "description": "Represents the patient middle name",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "David",
                    "nullable": true
                  },
                  "preferredName": {
                    "type": "string",
                    "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                    "minLength": 0,
                    "maxLength": 40,
                    "example": "Tim",
                    "nullable": true
                  },
                  "previouslyKnownAs": {
                    "type": "string",
                    "description": "Represents the patient previously known name",
                    "maxLength": 40,
                    "example": "Jake",
                    "minLength": 0,
                    "nullable": true
                  },
                  "gender": {
                    "type": "integer",
                    "title": "Gender",
                    "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                    "default": 0,
                    "example": 2,
                    "x-examples": {
                      "Male": 2
                    },
                    "x-internal": false
                  },
                  "dob": {
                    "type": "string",
                    "title": "DateOfBirth",
                    "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                    "format": "date",
                    "x-examples": {
                      "Date of Birth": "1970-01-10"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "estimated": {
                    "type": "boolean",
                    "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                    "nullable": true
                  },
                  "oneNameOnly": {
                    "type": "boolean",
                    "example": false,
                    "description": "The flag is set to true, if the patient has one name only",
                    "nullable": true
                  },
                  "dateOfDeath": {
                    "type": "string",
                    "nullable": true,
                    "title": "DateOfDeath",
                    "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                    "default": "yyyy-MM-dd",
                    "example": "2018-12-01",
                    "x-examples": {
                      "Date Of Death Format": "2018-12-01"
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "causeOfDeath": {
                    "type": "string",
                    "description": "Represents the patient cause of death. This field is mandatory if the date of death is entered.",
                    "example": "Cancer",
                    "maxLength": 300,
                    "nullable": true
                  },
                  "patientStatusCode": {
                    "type": "integer",
                    "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status-code",
                    "example": 2
                  },
                  "ethnicityCode": {
                    "type": "integer",
                    "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity-code",
                    "example": 55,
                    "nullable": true
                  },
                  "englishAsSecondLanguage": {
                    "type": "boolean",
                    "description": "If english is the patient second language the flag is set as true else it is set to false",
                    "nullable": true
                  },
                  "atsiStatus": {
                    "type": "integer",
                    "title": "Atsi",
                    "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                    "example": 4,
                    "nullable": true,
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "ctgCoPaymentRelief": {
                    "type": "boolean",
                    "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "placeOfBirth": {
                    "type": "string",
                    "description": "Represents the  place of birth for patient with atsi status. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": "Sydney",
                    "minLength": 0,
                    "maxLength": 100,
                    "nullable": true
                  },
                  "skinCode": {
                    "type": "integer",
                    "description": "Represents the skin code for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin-code. This field is  only set when the atsi status is 1, 2 or 3.",
                    "example": 16,
                    "nullable": true
                  },
                  "languageSpokenAtHome": {
                    "type": "integer",
                    "description": "Represents the language spoken at home for patient with atsi status\n1 - Aghu Tharrnggala\n2 - Alngith dialect.\nThis field is  only set when the atsi status is 1, 2 or 3.",
                    "nullable": true
                  },
                  "homePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "HomePhone",
                    "x-examples": {
                      "HomePhone Number": "0298761234"
                    },
                    "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "maxLength": 10,
                    "example": "0298761234",
                    "x-internal": false,
                    "minLength": 8
                  },
                  "mobilePhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "MobilePhone",
                    "x-examples": {
                      "MobileNumber": "0413324123"
                    },
                    "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0413324123",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "workPhone": {
                    "type": "string",
                    "nullable": true,
                    "title": "OfficePhone",
                    "x-examples": {
                      "OfficePhoneNumber": "0298671234"
                    },
                    "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                    "x-tags": [
                      "Common Models"
                    ],
                    "example": "0298671234",
                    "maxLength": 10,
                    "x-internal": false,
                    "minLength": 8
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "title": "Email",
                    "description": "Represents the patient email id.",
                    "x-examples": {
                      "Email": "Timothy.Mark@nedirecords.com"
                    },
                    "x-tags": [
                      "Common Models"
                    ],
                    "format": "email",
                    "example": "Timothy.Mark@nedirecords.com",
                    "maxLength": 100,
                    "x-internal": false
                  },
                  "contactMethod": {
                    "title": "PatientContactMethod",
                    "type": "number",
                    "nullable": true,
                    "x-examples": {
                      "example-1": 1
                    },
                    "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "notes": {
                    "type": "string",
                    "description": "Any comments or notes can be recorded in this field",
                    "maxLength": 500,
                    "example": "Patient had a mild fever",
                    "nullable": true
                  },
                  "customFields": {
                    "type": "array",
                    "items": {
                      "title": "CustomFieldValue",
                      "x-stoplight": {
                        "id": "ofcpa9fc6qp9t"
                      },
                      "description": "Attached custom field value to an entity",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique identfier"
                        },
                        "fieldId": {
                          "type": "string",
                          "format": "uuid",
                          "description": "CustomField definition identifier"
                        },
                        "stringValue": {
                          "type": "string",
                          "description": "Value for TEXT_FIELD field type",
                          "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                        },
                        "numberValue": {
                          "type": "number",
                          "description": "Value for NUMBER field type"
                        },
                        "dateValue": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Value for DATE field type"
                        },
                        "boolValue": {
                          "type": "boolean",
                          "description": "Value for CHECK_BOX",
                          "default": false
                        }
                      },
                      "required": [
                        "fieldId"
                      ],
                      "x-examples": {
                        "Text": {
                          "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                          "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "stringValue": "Timmy",
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": false
                        },
                        "Date": {
                          "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                          "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": "2022-05-05",
                          "boolValue": false
                        },
                        "Number": {
                          "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                          "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                          "stringValue": null,
                          "numberValue": 3,
                          "dateValue": null,
                          "boolValue": false
                        },
                        "Checkbox": {
                          "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                          "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                          "stringValue": null,
                          "numberValue": null,
                          "dateValue": null,
                          "boolValue": true
                        }
                      }
                    }
                  }
                },
                "required": [
                  "defaultPracticeId",
                  "titleCode",
                  "lastName",
                  "gender",
                  "dob"
                ]
              },
              "examples": {
                "Request": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "gender": 2,
                    "dob": "1970-11-11",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2010-01-01",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsiStatus": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 1,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "notes": "Patient had a mild fever",
                    "customFields": []
                  }
                },
                "Bad Request With Invalid Fields": {
                  "value": {
                    "defaultPracticeId": "81625c94-4a23-4049-b431-91aabaa85d3d",
                    "usualDoctorId": "0d161e1c-142f-4788-972b-5bffff44e4ee",
                    "titleCode": 315890000,
                    "firstName": null,
                    "lastName": "Deal",
                    "middleName": "C",
                    "fullName": "James Kirk",
                    "previouslyKnownAs": null,
                    "preferredName": null,
                    "gender": 1,
                    "dob": "2000-10-10",
                    "estimated": true,
                    "dateOfDeath": "2020-10-12",
                    "causeOfDeath": null,
                    "patientStatusCode": 4,
                    "ethnicityCode": 10,
                    "esl": null,
                    "atsiStatus": 3,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 24,
                    "languageSpokenAtHome": 1,
                    "homePhone": 298761234,
                    "mobilePhone": "0411111111",
                    "workPhone": 398671256,
                    "email": "test@gmail.com",
                    "contactMethodId": 1,
                    "notes": "Not feeling weel",
                    "oneNameOnly": false,
                    "customFields": []
                  }
                },
                "Request with Custom Fields": {
                  "value": {
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleCode": 315890000,
                    "firstName": "string",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "gender": 2,
                    "dob": "1970-01-10",
                    "estimated": true,
                    "oneNameOnly": false,
                    "dateOfDeath": "2018-12-01",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "englishAsSecondLanguage": true,
                    "atsiStatus": 4,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 0,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 0,
                    "notes": "Patient had a mild fever",
                    "customFields": [
                      {
                        "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                        "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "stringValue": "Timmy",
                        "numberValue": null,
                        "dateValue": null,
                        "boolValue": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Request for Patient Update"
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Demographics"
        ]
      },
      "delete": {
        "summary": "Delete patient",
        "operationId": "delete-patients-id1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Successful Delete": {
                    "value": {
                      "id": "5987afa6-2976-11eb-b53a-538b0f928ae9",
                      "message": "Successfully Deleted"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Delete a Patient by Id",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          }
        ],
        "tags": [
          "Demographics"
        ]
      }
    },
    "/v2/patients/exist": {
      "get": {
        "summary": "Check patient exists",
        "tags": [
          "Demographics"
        ],
        "responses": {
          "200": {
            "description": "A successfully checked patient.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "format": "uuid",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The patient identifier."
                      }
                    }
                  }
                },
                "examples": {
                  "Single Patient Matched": {
                    "value": [
                      {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                      }
                    ]
                  },
                  "Multiple Patients Matched": {
                    "value": [
                      {
                        "id": "197f6eca-6276-4993-bfeb-53cbbbba6f08"
                      },
                      {
                        "id": "297f6eca-6276-4993-bfeb-53cbbbba6f07"
                      },
                      {
                        "id": "397f6eca-6276-4993-bfeb-53cbbbba6f06"
                      }
                    ]
                  },
                  "No Patient Matched": {
                    "value": []
                  }
                }
              }
            }
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patients-exist1",
        "description": "To check if patient exists.",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "example": "Jane"
            },
            "in": "query",
            "name": "firstName",
            "description": "The patient firstname."
          },
          {
            "schema": {
              "type": "string",
              "example": "Smith"
            },
            "in": "query",
            "name": "lastName",
            "description": "The patient lastname."
          },
          {
            "schema": {
              "type": "string",
              "example": "16/01/1990"
            },
            "in": "query",
            "name": "dob",
            "description": "The patient date of birth. Accepted date format is dd/MM/yyyy."
          },
          {
            "schema": {
              "type": "string",
              "format": "email",
              "example": "jane@example.com"
            },
            "in": "query",
            "name": "email",
            "description": "The patient email."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "workNumber",
            "description": "The patient work contact number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "homeNumber",
            "description": "The patient home contact number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "mobileNumber",
            "description": "The patient mobile contact number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "medicareNumber",
            "description": "The patient medicare number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "medicareNumberIRN",
            "description": "The patient medicare number IRN. Mandatory if medicareNumber parameter is not empty."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "chartNumber",
            "description": "The patient chart number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "ihiNumber",
            "description": "The patient IHI number."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "address",
            "description": "The patient address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "postcode",
            "description": "The patient post code address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "suburb",
            "description": "The patient city/suburb address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "state",
            "description": "The patient state address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "country",
            "description": "The patient country address."
          }
        ]
      },
      "parameters": []
    },
    "/v2/patients/search": {
      "get": {
        "summary": "Patient search",
        "tags": [
          "Demographics"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "PatientPage",
                  "type": "object",
                  "x-examples": {
                    "Full Response with pagination": {
                      "data": [
                        {
                          "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                          "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                          "titleId": 315890000,
                          "firstName": "Timothy",
                          "lastName": "Mark",
                          "middleName": "David",
                          "preferredName": "Tim",
                          "previouslyKnownAs": "Jake",
                          "fullName": "Timothy Mark",
                          "genderCode": 2,
                          "dob": "8/12/1970",
                          "estimated": true,
                          "oneNameOnly": "false",
                          "dateOfDeath": "12/01/2010",
                          "causeOfDeath": "Cancer",
                          "patientStatusCode": 2,
                          "ethnicityCode": 55,
                          "esl": true,
                          "atsiId": 4,
                          "ctgCoPaymentRelief": true,
                          "placeOfBirth": "Sydney",
                          "skinCode": 16,
                          "languageSpokenAtHome": 0,
                          "homePhone": 298761234,
                          "mobilePhone": "0413324123",
                          "workPhone": 298671234,
                          "email": "Timothy.Mark@nedirecords.com",
                          "contactMethod": 1,
                          "note": "Patient had a mild fever",
                          "customFields": [
                            {
                              "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                              "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                              "stringValue": "Timmy",
                              "numberValue": null,
                              "dateValue": null,
                              "boolValue": false,
                              "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                              "createdDateTime": "2019-08-24T14:15:22Z",
                              "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                              "updatedDateTime": "2019-08-24T14:15:22Z"
                            },
                            {
                              "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                              "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                              "stringValue": null,
                              "numberValue": null,
                              "dateValue": null,
                              "boolValue": true,
                              "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                              "createdDateTime": "2019-08-24T14:15:22Z",
                              "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                              "updatedDateTime": "2019-08-24T14:15:22Z"
                            },
                            {
                              "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                              "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                              "stringValue": null,
                              "numberValue": null,
                              "dateValue": "2022-05-05",
                              "boolValue": false,
                              "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                              "createdDateTime": "2019-08-24T14:15:22Z",
                              "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                              "updatedDateTime": "2019-08-24T14:15:22Z"
                            },
                            {
                              "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                              "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                              "stringValue": null,
                              "numberValue": 3,
                              "dateValue": null,
                              "boolValue": false,
                              "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                              "createdDateTime": "2019-08-24T14:15:22Z",
                              "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                              "updatedDateTime": "2019-08-24T14:15:22Z"
                            }
                          ],
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "first": true,
                      "last": false,
                      "totalPages": 3,
                      "totalElements": 29,
                      "numberOfElements": 10,
                      "size": 10,
                      "page": 0
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PatientResponse",
                        "description": "The Patient Response properties that are included for a patient",
                        "type": "object",
                        "x-examples": {
                          "Full Patient Response": {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "gender": 2,
                            "dob": "1970-12-12",
                            "estimated": true,
                            "oneNameOnly": "false",
                            "dateOfDeath": "2018-03-04",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsi": 1,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 1,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "customFields": [
                              {
                                "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                                "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                                "stringValue": "Timmy",
                                "numberValue": null,
                                "dateValue": null,
                                "boolValue": false,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              },
                              {
                                "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                                "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                                "stringValue": null,
                                "numberValue": null,
                                "dateValue": null,
                                "boolValue": true,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              },
                              {
                                "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                                "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                                "stringValue": null,
                                "numberValue": null,
                                "dateValue": "2022-05-05",
                                "boolValue": false,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              },
                              {
                                "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                                "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                                "stringValue": null,
                                "numberValue": 3,
                                "dateValue": null,
                                "boolValue": false,
                                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                                "createdDateTime": "2019-08-24T14:15:22Z",
                                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                                "updatedDateTime": "2019-08-24T14:15:22Z"
                              }
                            ],
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                            "format": "uuid",
                            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                          },
                          "defaultPracticeId": {
                            "type": "string",
                            "description": "Default practice id where the patient details are created",
                            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "format": "uuid",
                            "nullable": true
                          },
                          "usualDoctorId": {
                            "type": "string",
                            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                            "description": "A user id that represents the usual doctor for the patient",
                            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "format": "uuid",
                            "nullable": true
                          },
                          "titleCode": {
                            "type": "integer",
                            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                            "example": 315890000
                          },
                          "firstName": {
                            "type": "string",
                            "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                            "minLength": 1,
                            "maxLength": 40,
                            "example": "Timothy",
                            "nullable": true
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Represents patient last name",
                            "minLength": 1,
                            "maxLength": 40,
                            "example": "Mark"
                          },
                          "middleName": {
                            "type": "string",
                            "description": "Represents the patient middle name",
                            "minLength": 0,
                            "maxLength": 40,
                            "example": "David",
                            "nullable": true
                          },
                          "preferredName": {
                            "type": "string",
                            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                            "minLength": 0,
                            "maxLength": 40,
                            "example": "Tim",
                            "nullable": true
                          },
                          "previouslyKnownAs": {
                            "type": "string",
                            "description": "Represents the patient previously known name",
                            "maxLength": 40,
                            "example": "Jake",
                            "minLength": 0,
                            "nullable": true
                          },
                          "fullName": {
                            "type": "string",
                            "description": "Represents the patient full name",
                            "nullable": true
                          },
                          "gender": {
                            "type": "integer",
                            "title": "Gender",
                            "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                            "default": 0,
                            "example": 2,
                            "x-examples": {
                              "Male": 2
                            },
                            "x-internal": false
                          },
                          "dob": {
                            "type": "string",
                            "title": "DateOfBirth",
                            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                            "format": "date",
                            "x-examples": {
                              "Date of Birth": "1970-01-10"
                            },
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "estimated": {
                            "type": "boolean",
                            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                            "nullable": true
                          },
                          "oneNameOnly": {
                            "type": "boolean",
                            "example": false,
                            "description": "The flag is set to true, if the patient has one name only",
                            "nullable": true
                          },
                          "dateOfDeath": {
                            "type": "string",
                            "nullable": true,
                            "title": "DateOfDeath",
                            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                            "default": "yyyy-MM-dd",
                            "example": "2018-12-01",
                            "x-examples": {
                              "Date Of Death Format": "2018-12-01"
                            },
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "causeOfDeath": {
                            "type": "string",
                            "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                            "example": "Cancer",
                            "maxLength": 300,
                            "nullable": true
                          },
                          "patientStatusCode": {
                            "type": "integer",
                            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                            "example": 2,
                            "nullable": true
                          },
                          "ethnicityCode": {
                            "type": "integer",
                            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                            "example": 55,
                            "nullable": true
                          },
                          "englishAsSecondLanguage": {
                            "type": "boolean",
                            "description": "If english is the patient second language the flag is set as true else it is set to false",
                            "nullable": true
                          },
                          "atsiStatus": {
                            "type": "integer",
                            "title": "Atsi",
                            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                            "example": 4,
                            "nullable": true,
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "ctgCoPaymentRelief": {
                            "type": "boolean",
                            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "nullable": true
                          },
                          "placeOfBirth": {
                            "type": "string",
                            "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "example": "Sydney",
                            "maxLength": 100,
                            "nullable": true
                          },
                          "skinCode": {
                            "type": "integer",
                            "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "example": 16,
                            "nullable": true
                          },
                          "languageSpokenAtHome": {
                            "title": "LanguageSpokenAtHome",
                            "type": "integer",
                            "nullable": true,
                            "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "x-examples": {
                              "example-1": 1
                            },
                            "x-internal": false
                          },
                          "homePhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "HomePhone",
                            "x-examples": {
                              "HomePhone Number": "0298761234"
                            },
                            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "maxLength": 10,
                            "example": "0298761234",
                            "x-internal": false,
                            "minLength": 8
                          },
                          "mobilePhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "MobilePhone",
                            "x-examples": {
                              "MobileNumber": "0413324123"
                            },
                            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "example": "0413324123",
                            "maxLength": 10,
                            "x-internal": false,
                            "minLength": 8
                          },
                          "workPhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "OfficePhone",
                            "x-examples": {
                              "OfficePhoneNumber": "0298671234"
                            },
                            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "example": "0298671234",
                            "maxLength": 10,
                            "x-internal": false,
                            "minLength": 8
                          },
                          "email": {
                            "type": "string",
                            "nullable": true,
                            "title": "Email",
                            "description": "Represents the patient email id.",
                            "x-examples": {
                              "Email": "Timothy.Mark@nedirecords.com"
                            },
                            "x-tags": [
                              "Common Models"
                            ],
                            "format": "email",
                            "example": "Timothy.Mark@nedirecords.com",
                            "maxLength": 100,
                            "x-internal": false
                          },
                          "contactMethod": {
                            "title": "PatientContactMethod",
                            "type": "number",
                            "nullable": true,
                            "x-examples": {
                              "example-1": 1
                            },
                            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "notes": {
                            "type": "string",
                            "description": "Any comments or notes can be recorded in this field",
                            "maxLength": 500,
                            "example": "Patient had a mild fever",
                            "nullable": true
                          },
                          "customFields": {
                            "type": "array",
                            "items": {
                              "title": "CustomFieldValue",
                              "x-stoplight": {
                                "id": "ofcpa9fc6qp9t"
                              },
                              "description": "Attached custom field value to an entity",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "uuid",
                                  "description": "Unique identfier"
                                },
                                "fieldId": {
                                  "type": "string",
                                  "format": "uuid",
                                  "description": "CustomField definition identifier"
                                },
                                "stringValue": {
                                  "type": "string",
                                  "description": "Value for TEXT_FIELD field type",
                                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                                },
                                "numberValue": {
                                  "type": "number",
                                  "description": "Value for NUMBER field type"
                                },
                                "dateValue": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Value for DATE field type"
                                },
                                "boolValue": {
                                  "type": "boolean",
                                  "description": "Value for CHECK_BOX",
                                  "default": false
                                },
                                "createdBy": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "createdDateTime": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "updatedBy": {
                                  "type": "string",
                                  "format": "uuid"
                                },
                                "updatedDateTime": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              },
                              "required": [
                                "fieldId"
                              ]
                            }
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        }
                      }
                    },
                    "first": {
                      "type": "boolean",
                      "description": "Showing the first page."
                    },
                    "last": {
                      "type": "boolean",
                      "description": "Showing the last page."
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total Pages"
                    },
                    "totalElements": {
                      "description": "Total records",
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer",
                      "description": "Total records"
                    },
                    "size": {
                      "description": "Number of records in a page",
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer",
                      "description": "current page number"
                    }
                  },
                  "description": "Get all patients with pagination",
                  "x-tags": [
                    "Other"
                  ]
                },
                "examples": {
                  "Patient with firstName \"Timothy\" and lastName \"Mark\"": {
                    "value": {
                      "data": [
                        {
                          "id": "c4476046-3508-11eb-adbc-a75fbd464ca9",
                          "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                          "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                          "titleCode": 315890000,
                          "firstName": "Timothy",
                          "lastName": "Mark",
                          "middleName": "David",
                          "preferredName": "Tim",
                          "previouslyKnownAs": "Jake",
                          "fullName": null,
                          "gender": 2,
                          "dob": "1970-01-10",
                          "estimated": null,
                          "oneNameOnly": false,
                          "dateOfDeath": "2018-12-01",
                          "causeOfDeath": "Cancer",
                          "patientStatusCode": 2,
                          "ethnicityCode": 55,
                          "englishAsSecondLanguage": null,
                          "atsiStatus": 4,
                          "ctgCoPaymentRelief": null,
                          "placeOfBirth": "Sydney",
                          "skinCode": 16,
                          "languageSpokenAtHome": null,
                          "homePhone": 298761234,
                          "mobilePhone": "0413324123",
                          "workPhone": 298671234,
                          "email": "Timothy.Mark@nedirecords.com",
                          "contactMethod": null,
                          "notes": "Patient had a mild fever",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "string",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "string"
                        }
                      ],
                      "first": true,
                      "last": true,
                      "totalPages": 1,
                      "totalElements": 1,
                      "numberOfElements": 1,
                      "size": 1,
                      "page": 1
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "x-examples": {
              "example": {
                "error": "bad request",
                "error_description": "Bad Request",
                "errors": [
                  {
                    "parameter": "id",
                    "value": "",
                    "message": "Input is required"
                  }
                ]
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "bad request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "title": "ErrorAttribute",
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameter",
                          "value",
                          "message"
                        ],
                        "x-examples": {
                          "example-1": {
                            "parameter": "string",
                            "value": "string",
                            "message": "string"
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      },
                      "example": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "bad request",
                      "error_description": "The request contains a malformed body",
                      "errors": [
                        {
                          "parameter": "id",
                          "value": "",
                          "message": "Input is required"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "x-examples": {
              "example": {
                "error": "unauthorized",
                "error_description": "Unauthorized"
              }
            },
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "The request does not contain authorization"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "x-examples": {
              "example": {
                "error": "forbidden",
                "error_description": "Forbidden"
              }
            },
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "forbidden"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "forbidden",
                      "error_description": "The user is not allowed to access this resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "type",
                    "message"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": 500,
                      "type": "internal server error",
                      "message": "Exception in thread \"main\" java.lang.NullPointerException"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-patients-search1",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "q",
            "description": "The RSQL syntax for patient advanced search.\n\nOnly following fields are enabled for advanced search:\n- firstName\n- lastName\n- city\n- postcode\n- stateCode\n- countryCode\n- gender\n- dob\n- homePhone\n- workPhone\n- mobilePhone\n- medicareNo\n- medicareIRN - must also provide medicareNo\n- medicareExpiry\n- activeStatus - default 1\n- defaultPracticeId\n- usualDoctorId\n- patientStatusCode"
          },
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "required": false,
            "description": "The page to be returned."
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "required": false,
            "description": "The number of items to be returned."
          }
        ],
        "description": "To perform advanced search on patient resource"
      },
      "parameters": []
    },
    "/v1/usergroup/search": {
      "get": {
        "summary": "Search UserGroup",
        "tags": [
          "usergroup"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "UserGroupSearchResponse",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "minLength": 1,
                        "description": "GUID of UserGroup",
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Name of the User Group",
                        "maxLength": 50
                      },
                      "groupTypeId": {
                        "type": "integer",
                        "description": "Type ID of the User Group. Refer to lookup UserGroupType"
                      },
                      "groupType": {
                        "type": "string",
                        "description": "The String name of the group type based on UserGroupTypeID"
                      },
                      "statusId": {
                        "description": "record's status id",
                        "type": "integer"
                      },
                      "status": {
                        "type": "string",
                        "description": "string description of record's status id"
                      },
                      "createdBy": {
                        "type": "string",
                        "description": "GUID of the creating user",
                        "format": "uuid"
                      },
                      "createdByName": {
                        "type": "string",
                        "description": "Complete Name of the creating user"
                      },
                      "createdDateTime": {
                        "type": "string",
                        "description": "Date of creation",
                        "format": "date-time",
                        "pattern": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
                      },
                      "updatedBy": {
                        "type": "string",
                        "description": "GUID of the updating user",
                        "format": "uuid"
                      },
                      "updatedByName": {
                        "type": "string",
                        "description": "Complete Name of the creating user"
                      },
                      "updatedDateTime": {
                        "type": "string",
                        "description": "Date of update",
                        "format": "date-time",
                        "pattern": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "groupTypeId",
                      "groupType",
                      "statusId",
                      "status",
                      "createdBy",
                      "createdByName",
                      "createdDateTime",
                      "updatedBy",
                      "updatedByName",
                      "updatedDateTime"
                    ]
                  }
                },
                "examples": {
                  "List of User Group": {
                    "value": [
                      {
                        "id": "0331e1f4-fb29-4756-aeaf-f0c83b353aaf",
                        "name": "Test1",
                        "groupTypeId": 1,
                        "groupType": "Activity Group",
                        "statusId": 1,
                        "status": "Active",
                        "createdBy": "0019d5a2-b722-11e8-87c8-87b52573d766",
                        "createdByName": "Dr Jamal Hamid",
                        "createdDateTime": "2023-10-17T07:11:16.396Z",
                        "updatedBy": "0019d5a2-b722-11e8-87c8-87b52573d766",
                        "updatedByName": "Dr Jamal Hamid",
                        "updatedDateTime": "2023-10-17T07:11:16.396Z"
                      },
                      {
                        "id": "94b6e00e-741a-44be-8dc9-703e0bc7d493",
                        "name": "Test1",
                        "groupTypeId": 2,
                        "groupType": "Craft Group",
                        "statusId": 1,
                        "status": "Active",
                        "createdBy": "0019d5a2-b722-11e8-87c8-87b52573d766",
                        "createdByName": "Dr Jamal Hamid",
                        "createdDateTime": "2023-10-17T08:13:06.011Z",
                        "updatedBy": "0019d5a2-b722-11e8-87c8-87b52573d766",
                        "updatedByName": "Dr Jamal Hamid",
                        "updatedDateTime": "2023-10-17T08:13:06.012Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Bad Request Error Response": {
                    "value": {
                      "message": "Missing request parameter",
                      "errors": [
                        {
                          "parameter": "name",
                          "value": "xxx",
                          "message": "Must provide value for parameter [name]"
                        }
                      ],
                      "type": "invalid_request_error",
                      "code": "invalid_request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Unauthorization Error Response": {
                    "value": {
                      "error": "invalid_token",
                      "errorDescription": "Invalid access token: AFzAWah-SfDhVZKaZxlZneBJn9k"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "Access denied": {
                    "value": {
                      "message": "Access is denied",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-stoplight": {
                    "id": "9k0ok7h8dw6bu"
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Internal Server Error Response": {
                    "value": {
                      "message": "Oops! Appears that an error has occured. Please try again.",
                      "type": "unknown_error_type",
                      "code": "unknown_error_code"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-api-usergroup-usergroup-search",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "The OAuth 2.0 bearer tokens.```Bearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2```",
            "name": "Authorization",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "required": true,
            "description": "Search for exact match of user group name"
          }
        ],
        "description": "Get a list of user groups for a tenant based on exact match of name."
      },
      "parameters": []
    },
    "/v1/usergroup": {
      "post": {
        "summary": "Create UserGroup",
        "tags": [
          "usergroup"
        ],
        "operationId": "post-api-usergroup",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UserGroupCreateResponse",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User Group Primary ID"
                    },
                    "name": {
                      "type": "string",
                      "description": "User Group Name, can not duplicate if the group type is the same"
                    },
                    "groupTypeId": {
                      "type": "number",
                      "description": "This field is user for determining group type of user group (meta.lookup UserGroupTypeID)"
                    },
                    "statusId": {
                      "type": "integer",
                      "description": "Record's status id (1=Active, 2=Inactive)"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "groupTypeId",
                    "statusId"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "a062dab6-7697-483d-87bc-4085d168250f",
                      "name": "Group 1",
                      "groupTypeId": 1,
                      "statusId": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "invalid_request",
                      "fields": [
                        {
                          "name": "Invalid GUID",
                          "message": "Bad Request"
                        }
                      ],
                      "error_message": "string",
                      "success": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-stoplight": {
                    "id": "17lb92rqpnj73"
                  },
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "error_description": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "error",
                    "error_description"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "unauthorized",
                      "error_description": "An Authentication object was not found in the SecurityContext"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseObject",
                  "type": "object",
                  "description": "Object returned for Error Responses",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "example-1": {
                      "message": "Invalid request parameter",
                      "type": "invalid_request_error",
                      "code": "invalid_request",
                      "errors": [
                        {
                          "parameter": "referred_category_id",
                          "value": "null",
                          "message": "must not be null"
                        }
                      ]
                    }
                  },
                  "x-internal": false
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "exception.general",
                      "message": "Oops! Appears that an error has occured. Please refresh the page and try again."
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "description": "Create a new user group",
        "parameters": [
          {
            "name": "OAuthAuthorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": "The OAuth 2.0 bearer tokens. ```Bearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2 ```",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UserGroupCreateRequest",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User Group Name, can not duplicate if the group type is the same"
                  },
                  "groupTypeId": {
                    "type": "number",
                    "description": "This is the user group type of the user group. Call this endpoint to get the valid values for groupTypeId:  /code-system/user-group-id"
                  }
                },
                "required": [
                  "name",
                  "groupTypeId"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "group 1",
                    "groupTypeId": 1
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "AppointmentType": {
        "title": "AppointmentType",
        "type": "object",
        "x-examples": {
          "Full Appointment Type Response": {
            "id": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7",
            "name": "Custom Consultation",
            "duration": "6 hrs",
            "colour": "#a9a9a9",
            "order": 34,
            "activeStatus": 1,
            "community": true,
            "telehealth": true,
            "description": "A Custom Consultation for patients",
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-08-24T14:15:22Z",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "2020-08-24T14:15:22Z"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Appointment Type id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
            "format": "uuid",
            "example": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7"
          },
          "name": {
            "type": "string",
            "description": "Represents the appointment type name",
            "maxLength": 500,
            "example": "Custom Consultation"
          },
          "duration": {
            "type": "string",
            "description": "Represents the appointment type duration",
            "example": "4 hrs"
          },
          "colour": {
            "type": "string",
            "description": "Represents the hex colour code set while creating the appointment type",
            "maxLength": 20,
            "example": "#a9a9a9"
          },
          "order": {
            "type": "integer",
            "description": "Represents the order in which the appointment type needs to be displayed",
            "example": 34
          },
          "activeStatus": {
            "type": "integer",
            "description": "Represents the status of the appointment type. If the status of the appt type is 1 then its active . If the status of the of the appt type is 2 , then its inactive .",
            "enum": [
              1,
              2
            ],
            "example": 1
          },
          "community": {
            "description": "Represents if the  appointment type is community or not . If the appt type is community , then ‘true’ is returned.  Else , ‘false’  is returned",
            "type": "boolean"
          },
          "telehealth": {
            "description": "Represents if the appt type is telehealth or  not . If the appointment type is telehealth , then ‘true ’is returned . Else  'false' is returned.",
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "description": "Represents the appointment type description."
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "x-internal": false,
        "x-tags": [
          "Other"
        ]
      },
      "AppointmentTypePage": {
        "title": "AppointmentTypePage",
        "type": "object",
        "properties": {
          "data": {
            "title": "AppointmentType",
            "type": "object",
            "x-examples": {
              "Full Appointment Type Response": {
                "id": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7",
                "name": "Custom Consultation",
                "duration": "6 hrs",
                "colour": "#a9a9a9",
                "order": 34,
                "activeStatus": 1,
                "community": true,
                "telehealth": true,
                "description": "A Custom Consultation for patients",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2020-08-24T14:15:22Z"
              }
            },
            "properties": {
              "id": {
                "type": "string",
                "description": "Appointment Type id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                "format": "uuid",
                "example": "ea900c5e-fa2e-434e-b766-a42e1cc65ad7"
              },
              "name": {
                "type": "string",
                "description": "Represents the appointment type name",
                "maxLength": 500,
                "example": "Custom Consultation"
              },
              "duration": {
                "type": "string",
                "description": "Represents the appointment type duration",
                "example": "4 hrs"
              },
              "colour": {
                "type": "string",
                "description": "Represents the hex colour code set while creating the appointment type",
                "maxLength": 20,
                "example": "#a9a9a9"
              },
              "order": {
                "type": "integer",
                "description": "Represents the order in which the appointment type needs to be displayed",
                "example": 34
              },
              "activeStatus": {
                "type": "integer",
                "description": "Represents the status of the appointment type. If the status of the appt type is 1 then its active . If the status of the of the appt type is 2 , then its inactive .",
                "enum": [
                  1,
                  2
                ],
                "example": 1
              },
              "community": {
                "description": "Represents if the  appointment type is community or not . If the appt type is community , then ‘true’ is returned.  Else , ‘false’  is returned",
                "type": "boolean"
              },
              "telehealth": {
                "description": "Represents if the appt type is telehealth or  not . If the appointment type is telehealth , then ‘true ’is returned . Else  'false' is returned.",
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "description": "Represents the appointment type description."
              },
              "createdBy": {
                "type": "string",
                "title": "CreatedBy",
                "description": "A GUID refers to User identifier who created the resource.",
                "x-examples": {
                  "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                },
                "default": "UUID",
                "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "x-internal": false
              },
              "createdDateTime": {
                "type": "string",
                "title": "CreatedDate",
                "description": "Time when the resource was created.",
                "x-internal": false
              },
              "updatedBy": {
                "type": "string",
                "title": "UpdatedBy",
                "description": "A GUID refers to User identifier who updated the resource.",
                "default": "UUID",
                "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "x-internal": false
              },
              "updatedDateTime": {
                "title": "UpdatedDate",
                "type": "string",
                "description": "Time when the resource was updated.",
                "x-internal": false
              }
            },
            "x-internal": false,
            "x-tags": [
              "Other"
            ]
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer"
          },
          "totalElements": {
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          }
        },
        "x-examples": {
          "Full Paged Appointment Type Response": {
            "data": {
              "id": "e79966e8-5ba4-465e-89e3-ffd5f647265c",
              "name": "Custom Consultation",
              "duration": "4 hrs",
              "colour": "#a9a9a9",
              "order": 34,
              "activeStatus": 1,
              "community": true,
              "telehealth": true,
              "description": "A Custom Consultation for Patients",
              "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
              "createdDateTime": "2019-08-24T14:15:22Z",
              "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
              "updatedDateTime": "2020-08-24T14:15:22Z"
            },
            "first": true,
            "last": true,
            "totalPages": 1,
            "totalElements": 1,
            "numberOfElements": 1,
            "size": 1,
            "page": 0
          }
        },
        "x-internal": false,
        "x-tags": [
          "Other"
        ]
      },
      "AppointmentObject": {
        "title": "AppointmentObject",
        "type": "object",
        "description": "",
        "x-examples": {
          "Full Appointment Response": {
            "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
            "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
            "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
            "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
            "scheduleTime": "2019-02-13T05:10",
            "appointmentStatus": 2,
            "appointmentIntervalCode": 6,
            "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
            "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
            "notes": "Patient injured knee",
            "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
            "walkIn": true,
            "firstAvailableDoctor": true,
            "urgency": 1,
            "cancellationReason": 1,
            "emailReminder": true,
            "reminderMethod": 1,
            "reminderType": 7,
            "confirmationLink": "https://medirecords.page.link/JLTg",
            "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
            "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-02-13 05:10:09.088",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "2019-02-14 05:10:09.088"
          }
        },
        "x-internal": false,
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
            "description": "Appointment id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
          },
          "practiceId": {
            "type": "string",
            "format": "uuid",
            "description": "A GUID that represents the  practice id , the user wants the appointment to be booked in.",
            "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
          },
          "patientId": {
            "type": "string",
            "format": "uuid",
            "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
            "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
          },
          "appointmentTypeId": {
            "type": "string",
            "format": "uuid",
            "description": "A GUID that represents the appointment type Id",
            "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
          },
          "scheduleTime": {
            "type": "string",
            "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
            "example": "2019-02-13T05:10"
          },
          "appointmentStatus": {
            "type": "number",
            "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
            "example": 2,
            "minimum": 2,
            "maximum": 8,
            "exclusiveMinimum": false
          },
          "appointmentIntervalCode": {
            "type": "number",
            "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
            "example": 6
          },
          "roomId": {
            "type": "string",
            "format": "uuid",
            "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
            "description": "A GUID that represents the roomId, the user wants to book for the appointment",
            "nullable": true
          },
          "referralId": {
            "type": "string",
            "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
            "description": "A GUID that represents the referralId ",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "example": "Patient injured knee",
            "maxLength": 500,
            "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
            "nullable": true
          },
          "providerId": {
            "type": "string",
            "format": "uuid",
            "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
            "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
            "nullable": true
          },
          "walkIn": {
            "type": "boolean",
            "nullable": true
          },
          "firstAvailableDoctor": {
            "type": "boolean",
            "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
            "nullable": true
          },
          "urgency": {
            "type": "number",
            "example": 1,
            "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
            "nullable": true
          },
          "cancellationReason": {
            "type": "number",
            "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
            "example": 1,
            "nullable": true
          },
          "emailReminder": {
            "type": "boolean",
            "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent"
          },
          "reminderMethod": {
            "type": "number",
            "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
            "example": 1,
            "nullable": true
          },
          "reminderType": {
            "type": "number",
            "example": 7,
            "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
            "nullable": true
          },
          "confirmationLink": {
            "type": "string",
            "description": "Represents the appointment confirmation link ",
            "example": "https://medirecords.page.link/JLTg",
            "nullable": true
          },
          "telehealthLinkForProvider": {
            "type": "string",
            "description": "Represents the coviu link for provider , in case of telehealth appointments",
            "example": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060"
          },
          "telehealthLinkForPatient": {
            "type": "string",
            "description": "Represents the coviu link for patient , in case of telehealth appointments",
            "example": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceId",
          "patientId",
          "appointmentTypeId",
          "scheduleTime",
          "appointmentStatus",
          "appointmentIntervalCode"
        ]
      },
      "AppointmentObjectCreate": {
        "title": "AppointmentObjectCreate",
        "type": "object",
        "description": "",
        "x-examples": {
          "Full Appointment Response": {
            "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
            "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
            "scheduleTime": "2019-02-13 05:10:09.088",
            "appointmentStatus": 2,
            "appointmentIntervalCode": 6,
            "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
            "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
            "notes": "Patient injured knee",
            "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
            "walkIn": true,
            "firstAvailableDoctor": true,
            "allowDoubleBookingForPatient": true,
            "allowDoubleBookingForProvider": false,
            "urgency": 1,
            "cancellationReason": 1,
            "emailReminder": true,
            "reminderMethod": 1,
            "reminderType": 7
          }
        },
        "x-internal": false,
        "x-tags": [
          "Other"
        ],
        "properties": {
          "patientId": {
            "type": "string",
            "format": "uuid",
            "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
            "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
          },
          "appointmentTypeId": {
            "type": "string",
            "format": "uuid",
            "description": "A GUID that represents the appointment type Id",
            "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
          },
          "scheduleTime": {
            "type": "string",
            "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
            "example": "2019-02-13 05:10:09.088"
          },
          "appointmentStatus": {
            "type": "number",
            "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
            "example": 2,
            "minimum": 2,
            "maximum": 8,
            "exclusiveMinimum": false
          },
          "appointmentIntervalCode": {
            "type": "number",
            "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
            "example": 6
          },
          "roomId": {
            "type": "string",
            "format": "uuid",
            "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
            "description": "A GUID that represents the roomId, the user wants to book for the appointment",
            "nullable": true
          },
          "referralId": {
            "type": "string",
            "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
            "description": "A GUID that represents the referralId ",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "example": "Patient injured knee",
            "maxLength": 500,
            "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
            "nullable": true
          },
          "providerId": {
            "type": "string",
            "format": "uuid",
            "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
            "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
            "nullable": true
          },
          "walkIn": {
            "type": "boolean",
            "nullable": true
          },
          "firstAvailableDoctor": {
            "type": "boolean",
            "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
            "nullable": true
          },
          "allowDoubleBookingForPatient": {
            "description": "This flag indicates if multiple appointments can to be booked for the patient with the same provider on the same day. By default the flag is set to false. If the flag is set to true and if there is any double booking made for the patient, the same is indicated to the user via notes field in the response payload.",
            "type": "boolean",
            "nullable": true
          },
          "allowDoubleBookingForProvider": {
            "description": "This flag indicates if the provider can be double booked with different patient at the same time. By default the flag is set to false. If the flag is set to true and if there is any double booking made for the provider, the same is indicated to the user via notes field in the response payload.",
            "type": "boolean",
            "nullable": true
          },
          "urgency": {
            "type": "number",
            "example": 1,
            "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
            "nullable": true
          },
          "cancellationReason": {
            "type": "number",
            "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
            "example": 1,
            "nullable": true
          },
          "emailReminder": {
            "type": "boolean",
            "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent",
            "nullable": true
          },
          "reminderMethod": {
            "type": "number",
            "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
            "example": 1,
            "nullable": true
          },
          "reminderType": {
            "type": "number",
            "example": 7,
            "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
            "nullable": true
          }
        },
        "required": [
          "patientId",
          "appointmentTypeId",
          "scheduleTime",
          "appointmentStatus",
          "appointmentIntervalCode"
        ]
      },
      "AppointmentObjectPage": {
        "title": "AppointmentObjectPage",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "AppointmentObject",
              "type": "object",
              "description": "",
              "x-examples": {
                "Full Appointment Response": {
                  "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                  "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                  "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                  "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                  "scheduleTime": "2019-02-13T05:10",
                  "appointmentStatus": 2,
                  "appointmentIntervalCode": 6,
                  "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                  "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                  "notes": "Patient injured knee",
                  "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                  "walkIn": true,
                  "firstAvailableDoctor": true,
                  "urgency": 1,
                  "cancellationReason": 1,
                  "emailReminder": true,
                  "reminderMethod": 1,
                  "reminderType": 7,
                  "confirmationLink": "https://medirecords.page.link/JLTg",
                  "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                  "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                  "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "createdDateTime": "2019-02-13 05:10:09.088",
                  "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "updatedDateTime": "2019-02-14 05:10:09.088"
                }
              },
              "x-internal": false,
              "x-tags": [
                "Other"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                  "description": "Appointment id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                },
                "practiceId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "A GUID that represents the  practice id , the user wants the appointment to be booked in.",
                  "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                },
                "patientId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "A GUID that represents the patient id , the  user wants to book the appointment for",
                  "example": "2643ada4-a175-11ea-9c20-47ffa6607fbc"
                },
                "appointmentTypeId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "A GUID that represents the appointment type Id",
                  "example": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1"
                },
                "scheduleTime": {
                  "type": "string",
                  "description": "Represents the date and time when the appointment is scheduled for in the format YYYY-MM-DDTHH:mm.",
                  "example": "2019-02-13T05:10"
                },
                "appointmentStatus": {
                  "type": "number",
                  "description": "Represents the status of the appointment.\n\n* `2` - Booked\n* `3` - Confirmed\n* `4` - Waiting Room\n* `5` - With Doctor\n* `6` - At Billing\n* `7` - Completed\n* `8` - Cancelled",
                  "example": 2,
                  "minimum": 2,
                  "maximum": 8,
                  "exclusiveMinimum": false
                },
                "appointmentIntervalCode": {
                  "type": "number",
                  "description": "Represents the duration of the appointment. Call the below endpoint to get the user appointmentIntervalCode lookup /code-system/appointment-Interval-Code",
                  "example": 6
                },
                "roomId": {
                  "type": "string",
                  "format": "uuid",
                  "example": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                  "description": "A GUID that represents the roomId, the user wants to book for the appointment",
                  "nullable": true
                },
                "referralId": {
                  "type": "string",
                  "example": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                  "description": "A GUID that represents the referralId ",
                  "nullable": true
                },
                "notes": {
                  "type": "string",
                  "example": "Patient injured knee",
                  "maxLength": 500,
                  "description": "Represents appointment notes. Any specific information related to the appointment can be keyed in here",
                  "nullable": true
                },
                "providerId": {
                  "type": "string",
                  "format": "uuid",
                  "example": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                  "description": "A GUID that represents the provider Id , the user wants to book the appointment against",
                  "nullable": true
                },
                "walkIn": {
                  "type": "boolean",
                  "nullable": true
                },
                "firstAvailableDoctor": {
                  "type": "boolean",
                  "description": "This flag is set to true , if the walk in appointment is referred to the firstAvailableDoctor. In this case, the providerId is not requred.",
                  "nullable": true
                },
                "urgency": {
                  "type": "number",
                  "example": 1,
                  "description": "Represents the nature of the appointment . If the appointment is a normal appointment or urgent appointment. By default , the value is set as 1- Normal.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Normal |\n| 2 | Urgent |\n",
                  "nullable": true
                },
                "cancellationReason": {
                  "type": "number",
                  "description": "Represents the appointment cancellation reason . This is can be set only when the appointment status is 8 (cancelled) . Cancellation reason becomes mandatory when the appointment status is cancelled.\n\n| code | type description |\n| :---: | :------- |\n| 1 | Incorrect time |\n| 2 | Incorrect patient |\n| 3 | Incorrect provider |\n| 4 | Patient feeling better |\n| 5 | No show |\n| 6 | In WR too long  |\n| 7 | Other reason |\n| 8 | Conference |\n| 9 | Patient cancelled |\n",
                  "example": 1,
                  "nullable": true
                },
                "emailReminder": {
                  "type": "boolean",
                  "description": "Indicates if instant email reminder needs to sent. If the flag is set to true , then instant email reminders are sent"
                },
                "reminderMethod": {
                  "type": "number",
                  "description": "Represents the method of sending appointment reminders.\n\n* `1` - Booked",
                  "example": 1,
                  "nullable": true
                },
                "reminderType": {
                  "type": "number",
                  "example": 7,
                  "description": "Represents the types of reminder that can be set.\n\n* `0` - SMS Instant\n* `1` - 1 Day Before\n* `2` - 2 Days Before\n* `3` - 3 Days Before\n* `4` - 4 Days Before\n* `5` - 5 Days Before\n* `6` - 6 Days Before\n* `7` - 7 Days Before\n* `8` - 8 Days Before",
                  "nullable": true
                },
                "confirmationLink": {
                  "type": "string",
                  "description": "Represents the appointment confirmation link ",
                  "example": "https://medirecords.page.link/JLTg",
                  "nullable": true
                },
                "telehealthLinkForProvider": {
                  "type": "string",
                  "description": "Represents the coviu link for provider , in case of telehealth appointments",
                  "example": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060"
                },
                "telehealthLinkForPatient": {
                  "type": "string",
                  "description": "Represents the coviu link for patient , in case of telehealth appointments",
                  "example": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                  "nullable": true
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "required": [
                "id",
                "practiceId",
                "patientId",
                "appointmentTypeId",
                "scheduleTime",
                "appointmentStatus",
                "appointmentIntervalCode"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "number"
          },
          "totalElements": {
            "type": "number"
          },
          "numberOfElements": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "x-examples": {
          "Full Practice Paged Response": {
            "data": [
              {
                "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                "scheduleTime": "2019-02-13 05:10:09.088",
                "appointmentStatus": 2,
                "appointmentIntervalCode": 6,
                "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                "notes": "Patient injured knee",
                "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                "walkIn": true,
                "firstAvailableDoctor": true,
                "urgency": 1,
                "cancellationReason": 1,
                "emailReminder": true,
                "reminderMethod": 1,
                "reminderType": 7,
                "confirmationLink": "https://medirecords.page.link/JLTg",
                "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-02-13 05:10:09.088",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-02-14 05:10:09.088"
              },
              {
                "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                "patientId": "6d5bab6a-85ff-11ea-8f14-4b1d1a625a1f",
                "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                "scheduleTime": "6d5bab6a-85ff-11ea-8f14-4b1d1a625a1f",
                "appointmentStatus": 2,
                "appointmentIntervalCode": 7,
                "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                "notes": "Patient injured hip",
                "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                "walkIn": true,
                "firstAvailableDoctor": true,
                "urgency": 1,
                "cancellationReason": 1,
                "emailReminder": true,
                "reminderMethod": 1,
                "reminderType": 7,
                "confirmationLink": "https://medirecords.page.link/JLTg",
                "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-02-13 05:10:09.088",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-02-13 05:10:09.088"
              }
            ],
            "first": true,
            "last": true,
            "totalPages": 1,
            "totalElements": 2,
            "numberOfElements": 2,
            "size": 2,
            "page": 0
          }
        },
        "x-internal": false,
        "x-tags": [
          "Other"
        ]
      },
      "formulary_user_group": {
        "title": "Formulary User Group",
        "type": "object",
        "description": "Relationship between formulary and user group",
        "x-examples": {
          "Example": {
            "id": "f2bfdaf9-dbdb-4b61-91a2-45935f9a3a74",
            "formularyId": "721b3e20-c16d-4443-9b4b-db18587f7540",
            "userGroupId": "8804a3ad-7fdb-464b-8854-31b93898b196",
            "createdBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "createdDateTime": "2022-11-29T04:25:30.329Z",
            "updatedBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "updatedDateTime": "2022-11-29T04:25:30.329Z"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "format": "uuid",
            "minLength": 36,
            "example": "f2bfdaf9-dbdb-4b61-91a2-45935f9a3a74"
          },
          "formularyId": {
            "type": "string",
            "maxLength": 36,
            "x-stoplight": {
              "id": "kcenai3tbcec5"
            },
            "minLength": 36,
            "format": "uuid",
            "example": "721b3e20-c16d-4443-9b4b-db18587f7540"
          },
          "userGroupId": {
            "type": "string",
            "maxLength": 36,
            "x-stoplight": {
              "id": "ld0vxa472yv5c"
            },
            "format": "uuid",
            "example": "8804a3ad-7fdb-464b-8854-31b93898b196",
            "minLength": 36
          },
          "createdBy": {
            "type": "string",
            "x-stoplight": {
              "id": "h5f4g6ht33cpt"
            },
            "format": "uuid",
            "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "minLength": 36,
            "maxLength": 36
          },
          "createdDateTime": {
            "type": "string",
            "minLength": 1,
            "x-stoplight": {
              "id": "h1os6un1xs72f"
            },
            "format": "date-time",
            "example": "2022-11-29T04:25:30.329Z"
          },
          "updatedBy": {
            "type": "string",
            "minLength": 36,
            "x-stoplight": {
              "id": "kqt59fhqud44d"
            },
            "format": "uuid",
            "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "maxLength": 36
          },
          "updatedDateTime": {
            "type": "string",
            "minLength": 1,
            "x-stoplight": {
              "id": "7tabed8ddm0i1"
            },
            "format": "date-time",
            "example": "2022-11-29T04:25:30.329Z"
          }
        }
      },
      "formulary": {
        "title": "Formulary",
        "type": "object",
        "description": "An object that represents a formulary list. A formulary list contains various drug products",
        "x-examples": {
          "Example": {
            "id": "65f54952-6dca-40f2-a878-8ed6995e7638",
            "name": "Fever Medications",
            "createdBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "createdDateTime": "2022-11-13T11:54:41.384Z",
            "updatedBy": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "updatedDateTime": "2022-11-13T11:54:41.384Z"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "format": "uuid",
            "example": "65f54952-6dca-40f2-a878-8ed6995e7638",
            "minLength": 36
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "createdBy": {
            "type": "string",
            "minLength": 36,
            "x-stoplight": {
              "id": "ucds5czdna518"
            },
            "format": "uuid",
            "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "maxLength": 36
          },
          "createdDateTime": {
            "type": "string",
            "minLength": 1,
            "x-stoplight": {
              "id": "y624hy3u2wbuf"
            },
            "format": "date-time",
            "example": "2022-11-13T11:54:41.384Z"
          },
          "updatedBy": {
            "type": "string",
            "minLength": 36,
            "x-stoplight": {
              "id": "z7e45whxletl7"
            },
            "format": "uuid",
            "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "maxLength": 36
          },
          "updatedDateTime": {
            "type": "string",
            "minLength": 1,
            "x-stoplight": {
              "id": "zdhq0zyrs0cp1"
            },
            "format": "date-time",
            "example": "2022-11-13T11:54:41.384Z"
          }
        }
      },
      "ReprescribeRequest": {
        "title": "ReprescribeRequest",
        "type": "object",
        "x-examples": {
          "Example": {
            "scripts": [
              {
                "scriptGuid": "0f145f1d-7d2b-4c2e-b5ca-587067a7bd1f",
                "scriptRxGuid": "0f145f1d-7d2b-4c2e-b5ca-587067a7bd1f",
                "scriptNo": 1218,
                "uniqueScript": false,
                "scid": null,
                "erxPayload": null,
                "fileName": null,
                "erxStatus": null,
                "frequencyDesc": null,
                "startDate": "2022-02-04",
                "endDate": "2022-02-12",
                "practiceGuid": "6e51199a-67c7-11e8-9b02-0b7da3283289",
                "patientGuid": "e8b0e5cc-88aa-11e8-a0ce-f35c61fb9d53",
                "originatorTypeId": 1,
                "originatorGuid": "6e51c2f0-67c7-11e8-9b03-2bc966bf4be5",
                "originatorName": "Ms Maya Muharani",
                "consultGuid": "62d4007a-c666-4b37-a8c5-5d5bea596c4d",
                "productGuid": "5721385c-3ae7-4da1-92a6-ffdf7f156aa7",
                "productName": "Paracetamol Capsule 500mg",
                "drugIngredient": null,
                "scriptDate": "2022-02-04",
                "scriptDateStr": null,
                "strength": "500mg",
                "dose": "1 ½",
                "quantity": "12",
                "frequency": "4",
                "repeat": 0,
                "routeGuid": null,
                "foodId": 4,
                "instructions": "8",
                "substitution": true,
                "prn": false,
                "complianceCheck": false,
                "allergyCheck": false,
                "scriptReasonTerm": null,
                "scriptReasonName": "",
                "prescribeAsID": 1,
                "restrictionGuid": null,
                "authorityNo": "",
                "prescriberNo": "0342055",
                "pbsIndicationAuthority": "",
                "pbsNotes": "",
                "authorityPrevious": false,
                "authorityIndication": "",
                "approvalNo": "",
                "regulation24": false,
                "pcehrConsent": false,
                "ctgCoPayment": false,
                "sendToPatient": false,
                "deletionDate": "2021-11-07",
                "deletionDateStr": null,
                "deletionReason": "",
                "confidential": false,
                "urgentSupply": false,
                "inpatientService": false,
                "facilityId": null,
                "reasonXML": "<reason><reasonTerm /><reasonName /><positionTerm /><positionName>Position</positionName><conditionTerm /><conditionName>Condition</conditionName><severityTerm /><severityName>Severity</severityName><fractureTerm /><fractureName>Fracture</fractureName><pmh>false</pmh><confidential>false</confidential><summaries>false</summaries><reason>0</reason><pcehr>false</pcehr><existingCondition>false</existingCondition></reason>",
                "authorizationId": 1,
                "authorizationDate": "2021-11-07",
                "productCategoryId": 1,
                "authorizationDateStr": null,
                "createdByFullName": "Ms Maya Muharani",
                "updatedByFullName": "Ms Maya Muharani",
                "pbsType": "Non PBS",
                "pbsRestrictionName": "Non PBS",
                "genericName": "Paracetamol",
                "createdDateTimeStamp": null,
                "updatedDateTimeStamp": null,
                "userLocalDeletionDate": "2021-11-08 05:19:16",
                "userLocalAuthorizationDate": "2021-11-08 05:19:16",
                "userLocalScriptDate": "2022-02-04 14:41:05",
                "rowVersion": 0,
                "createdBy": "6e51c2f0-67c7-11e8-9b03-2bc966bf4be5",
                "createdDate": "2022-02-04",
                "updatedBy": "6e51c2f0-67c7-11e8-9b03-2bc966bf4be5",
                "updatedDate": "2022-02-04",
                "recordStatusID": 1,
                "userLocalCreatedDate": "2022-02-04 14:41:09",
                "userLocalUpdatedDate": "2022-02-04 14:42:33",
                "prescribingTypeId": 1,
                "prescribingType": "Manual",
                "prescribingStatus": "Printed",
                "prescribingStatusId": 2,
                "abilities": null,
                "includeBrandName": false,
                "excludedMedicineItem": false,
                "originatorType": "USER",
                "createdByType": "USER",
                "updatedByType": "USER",
                "lmbcItem": false,
                "complexInstruction": false
              }
            ],
            "includeBrandName": false
          }
        },
        "properties": {
          "includeBrandName": {
            "type": "boolean"
          }
        }
      },
      "ReprescribeResponse": {
        "title": "ReprescribeResponse"
      },
      "formulary_item": {
        "title": "Formulary Item",
        "x-stoplight": {
          "id": "npl25tibv495a"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-stoplight": {
              "id": "ie6imb7bpnsqv"
            },
            "format": "uuid",
            "example": "35f2843c-6917-4b2c-9015-23717a66e6b7",
            "minLength": 36,
            "maxLength": 36
          },
          "amtCode": {
            "type": "integer",
            "x-stoplight": {
              "id": "vdpq4eiy12zpd"
            },
            "example": 27638011000036104
          },
          "createdBy": {
            "type": "string",
            "x-stoplight": {
              "id": "8w8ezcuceu6ab"
            },
            "format": "uuid",
            "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "minLength": 36,
            "maxLength": 36
          },
          "createdDateTime": {
            "type": "string",
            "x-stoplight": {
              "id": "c9nol83zf1g23"
            },
            "format": "date-time",
            "example": "2022-11-11 02:28:02.152"
          },
          "updatedBy": {
            "type": "string",
            "x-stoplight": {
              "id": "9xlx8kijvi7k0"
            },
            "format": "uuid",
            "example": "fcc4b7de-25b2-11e7-a0e4-374c2f2fe15d",
            "minLength": 36,
            "maxLength": 36
          },
          "updatedDateTime": {
            "type": "string",
            "x-stoplight": {
              "id": "a8yquedcu4h4w"
            },
            "format": "date-time",
            "example": "2022-11-11 02:28:02.152"
          }
        },
        "description": "An object representing a drug product under a formulary"
      },
      "AuthenticationError": {
        "type": "object",
        "x-examples": {
          "example-1": {
            "error": "string",
            "errorDescription": "string"
          }
        },
        "properties": {
          "error": {
            "type": "string"
          },
          "errorDescription": {
            "type": "string"
          }
        },
        "required": [
          "error",
          "errorDescription"
        ],
        "title": "",
        "description": "Error for Unauthorization",
        "x-tags": [
          "Other"
        ]
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "description": "Unexpected Error",
        "x-tags": [
          "Other"
        ]
      },
      "Patient": {
        "title": "Patient",
        "type": "object",
        "description": "The common properties that are included for a patient",
        "x-examples": {
          "Full Patient Details the can be change": {
            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "titleCode": 315890000,
            "firstName": "Timothy",
            "lastName": "Mark",
            "middleName": "David",
            "preferredName": "Tim",
            "previouslyKnownAs": "Jake",
            "fullName": "Timothy Mark",
            "gender": 2,
            "dob": "1970-01-03",
            "estimated": true,
            "oneNameOnly": false,
            "dateOfDeath": "2016-09-07",
            "causeOfDeath": "Cancer",
            "patientStatusCode": 2,
            "ethnicityCode": 55,
            "englishAsSecondLanguage": true,
            "atsi": 3,
            "ctgCoPaymentRelief": true,
            "placeOfBirth": "Sydney",
            "skinCode": 16,
            "languageSpokenAtHome": 2,
            "homePhone": 298761234,
            "mobilePhone": "0413324123",
            "workPhone": 298671234,
            "email": "Timothy.Mark@nedirecords.com",
            "contactMethod": 1,
            "notes": "Patient had a mild fever"
          }
        },
        "properties": {
          "defaultPracticeId": {
            "type": "string",
            "description": "Default practice id where the patient details are created",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
            "format": "uuid"
          },
          "usualDoctorId": {
            "type": "string",
            "description": "A user id that represents the usual doctor for the patient",
            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "format": "uuid",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)"
          },
          "titleCode": {
            "type": "integer",
            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title-code",
            "example": 315890000
          },
          "firstName": {
            "description": "Represents the patient first name. The firstName is null when oneNameOnly flag is set to true",
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Represents patient last name",
            "minLength": 1,
            "maxLength": 40,
            "example": "Mark"
          },
          "middleName": {
            "type": "string",
            "description": "Represents the patient middle name",
            "minLength": 0,
            "maxLength": 40,
            "example": "David",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
            "minLength": 0,
            "maxLength": 40,
            "example": "Tim",
            "nullable": true
          },
          "previouslyKnownAs": {
            "type": "string",
            "description": "Represents the patient previously known name",
            "maxLength": 40,
            "example": "Jake",
            "minLength": 0,
            "nullable": true
          },
          "dob": {
            "type": "string",
            "title": "DateOfBirth",
            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
            "format": "date",
            "x-examples": {
              "Date of Birth": "1970-01-10"
            },
            "x-tags": [
              "Other"
            ]
          },
          "estimated": {
            "type": "boolean",
            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
            "nullable": true
          },
          "oneNameOnly": {
            "type": "boolean",
            "example": false,
            "description": "The flag is set to true, if the patient has one name only",
            "nullable": true
          },
          "dateOfDeath": {
            "type": "string",
            "nullable": true,
            "title": "DateOfDeath",
            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
            "default": "yyyy-MM-dd",
            "example": "2018-12-01",
            "x-examples": {
              "Date Of Death Format": "2018-12-01"
            },
            "x-tags": [
              "Other"
            ]
          },
          "causeOfDeath": {
            "type": "string",
            "description": "Represents the patient cause of death. This field is mandatory if the date of death is entered.",
            "example": "Cancer",
            "maxLength": 300,
            "nullable": true
          },
          "patientStatusCode": {
            "type": "integer",
            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status-code",
            "example": 2
          },
          "ethnicityCode": {
            "type": "integer",
            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity-code",
            "example": 55,
            "nullable": true
          },
          "englishAsSecondLanguage": {
            "type": "boolean",
            "description": "If english is the patient second language the flag is set as true else it is set to false",
            "nullable": true
          },
          "atsiStatus": {
            "type": "integer",
            "title": "Atsi",
            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
            "example": 4,
            "nullable": true,
            "x-tags": [
              "Other"
            ]
          },
          "ctgCoPaymentRelief": {
            "type": "boolean",
            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is only set when the atsi status is 1, 2 or 3.",
            "nullable": true
          },
          "placeOfBirth": {
            "type": "string",
            "description": "Represents the  place of birth for patient with atsi status. This field is  only set when the atsi status is 1, 2 or 3.",
            "example": "Sydney",
            "minLength": 0,
            "maxLength": 100,
            "nullable": true
          },
          "skinCode": {
            "type": "integer",
            "description": "Represents the skin code for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin-code. This field is  only set when the atsi status is 1, 2 or 3.",
            "example": 16,
            "nullable": true
          },
          "languageSpokenAtHome": {
            "type": "integer",
            "description": "Represents the language spoken at home for patient with atsi status\n1 - Aghu Tharrnggala\n2 - Alngith dialect.\nThis field is  only set when the atsi status is 1, 2 or 3.",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "nullable": true,
            "title": "HomePhone",
            "x-examples": {
              "HomePhone Number": "0298761234"
            },
            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "maxLength": 10,
            "example": "0298761234",
            "x-internal": false,
            "minLength": 8
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true,
            "title": "MobilePhone",
            "x-examples": {
              "MobileNumber": "0413324123"
            },
            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0413324123",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "workPhone": {
            "type": "string",
            "nullable": true,
            "title": "OfficePhone",
            "x-examples": {
              "OfficePhoneNumber": "0298671234"
            },
            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0298671234",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "email": {
            "type": "string",
            "nullable": true,
            "title": "Email",
            "description": "Represents the patient email id.",
            "x-examples": {
              "Email": "Timothy.Mark@nedirecords.com"
            },
            "x-tags": [
              "Common Models"
            ],
            "format": "email",
            "example": "Timothy.Mark@nedirecords.com",
            "maxLength": 100,
            "x-internal": false
          },
          "contactMethod": {
            "title": "PatientContactMethod",
            "type": "number",
            "nullable": true,
            "x-examples": {
              "example-1": 1
            },
            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
            "x-tags": [
              "Other"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field",
            "maxLength": 500,
            "example": "Patient had a mild fever",
            "nullable": true
          }
        },
        "required": [
          "defaultPracticeId",
          "titleCode",
          "lastName",
          "gender",
          "dob"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "Referrer": {
        "title": "Referrer",
        "type": "object",
        "x-examples": {
          "example": {
            "id": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
            "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd707777",
            "referrerProviderNo": "66f73f18",
            "referralDate": "2020-11-14",
            "referredById": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
            "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd708888",
            "subject": "X-ray",
            "referralTypeCode": 1,
            "firstUsedDate": "2020-11-11",
            "validMonth": 12,
            "notes": "X-ray for knee",
            "confidential": true,
            "referredByName": "Dr Maggie Kane",
            "referredToName": "Dr Bob Brown",
            "referredByPractice": "11173f18-ad0a-11e9-92bf-cb45fd706045",
            "standardOption": 12,
            "expiryDate": "2020-11-15",
            "referredByType": 1,
            "referredToType": 2,
            "createdDateTime": "2020-11-11T14:40:44.421+0000",
            "createBy": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
            "updatedDateTime": "2020-11-11T14:40:44.421+0000",
            "updatedById": "22f73f18-ad0a-11e9-92bf-cb45fd706045"
          }
        },
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "description": "Referral id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
            "format": "uuid",
            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
          },
          "patientId": {
            "type": "string",
            "description": "A GUID that represents patient by id",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "format": "none",
            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
          },
          "referrerProviderNo": {
            "type": "string",
            "description": "Represents the referred by provier no",
            "example": "\"6f7f8\"",
            "maxLength": 8,
            "nullable": true
          },
          "referralDate": {
            "type": "string",
            "description": "Represents the referral created date. Referral created date should not be in the future and should not be after the firstUsedDate.",
            "example": "2020-11-14",
            "default": "YYYY-MM-DD"
          },
          "referredById": {
            "type": "string",
            "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
          },
          "referredToId": {
            "type": "string",
            "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "subject": {
            "type": "string",
            "description": "Represents the referral subject",
            "minLength": 1,
            "maxLength": 100,
            "example": "\"X-ray\""
          },
          "referralTypeCode": {
            "type": "integer",
            "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
          },
          "firstUsedDate": {
            "type": "string",
            "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
            "example": "2020-11-14",
            "default": "YYYY-MM-DD",
            "nullable": true
          },
          "validMonth": {
            "type": "number",
            "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.\n",
            "example": 12
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field.",
            "maxLength": 500,
            "example": "\"X-ray for knee\"",
            "nullable": true
          },
          "confidential": {
            "description": "Flag indicates whether the referral records is condifentials or not.",
            "type": "boolean"
          },
          "referredByName": {
            "type": "string",
            "description": "Represents the referred by name",
            "example": "\"Tom\""
          },
          "referredToName": {
            "type": "string",
            "description": "Represents the reffered to name.",
            "example": "\"Tim\""
          },
          "referredByPractice": {
            "type": "string",
            "description": "Represents the referred by practice id.  If the referredBy is a practice, then referredByPractice will always be null.",
            "format": "none",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
            "nullable": true
          },
          "standardOption": {
            "description": "Represents the valid month in case of standard referrals",
            "example": 1,
            "type": "number",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "description": "Represents the referral expiry date. If the validMonth is null , then expiryDate is null",
            "format": "none",
            "example": "2020-11-14",
            "default": "YYYY-MM-DD"
          },
          "referredByType": {
            "title": "ReferredByTypeEnum",
            "type": "integer",
            "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
            "x-tags": [
              "Other"
            ]
          },
          "referredToType": {
            "title": "ReferredToTypeEnum",
            "type": "integer",
            "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
            "x-tags": [
              "Other"
            ]
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "ReferrerCreateUpdate": {
        "title": "ReferrerCreateUpdate",
        "type": "object",
        "x-examples": {
          "example": {
            "referralDate": "14/11/2020",
            "referredById": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
            "referredToId": "22f73f18-ad0a-11e9-92bf-cb45fd701111",
            "subject": "X-ray",
            "referralTypeCode": 1,
            "firstUsedDate": "2020-11-14",
            "validMonth": 12,
            "notes": "X-ray for knee",
            "confidential": true,
            "referredByType": 1,
            "referredToType": 2
          }
        },
        "properties": {
          "referralDate": {
            "type": "string",
            "description": "Represents the referral created date .Referral created date should not be in the future and should not be after the firstUsedDate.",
            "example": "2020-11-14",
            "default": "YYYY-MM-DD"
          },
          "referredById": {
            "type": "string",
            "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User\n",
            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "referredToId": {
            "type": "string",
            "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
          },
          "subject": {
            "type": "string",
            "description": "Represents the referral subject",
            "minLength": 1,
            "maxLength": 100,
            "example": "\"X-ray\""
          },
          "referralTypeCode": {
            "type": "integer",
            "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
          },
          "firstUsedDate": {
            "type": "string",
            "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
            "default": "YYYY-MM-DD",
            "example": "2020-11-14",
            "nullable": true
          },
          "validMonth": {
            "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.",
            "example": 12,
            "type": "number"
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field.",
            "maxLength": 500,
            "example": "\"X-ray for knee\"",
            "nullable": true
          },
          "confidential": {
            "description": "Flag indicates whether the referral records is condifentials or not.",
            "type": "boolean",
            "nullable": true
          },
          "referredByType": {
            "title": "ReferredByTypeEnum",
            "type": "integer",
            "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
            "x-tags": [
              "Other"
            ]
          },
          "referredToType": {
            "title": "ReferredToTypeEnum",
            "type": "integer",
            "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
            "x-tags": [
              "Other"
            ]
          },
          "referredByPractice": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "referralDate",
          "referredById",
          "referredToId",
          "subject",
          "referralTypeCode",
          "referredByType",
          "referredToType"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "InterestedPartyCreate": {
        "title": "InterestedPartyCreate",
        "type": "object",
        "x-examples": {
          "Interested Party Response": {
            "contactId": "761e8650-863d-11e8-9af9-57301828b877",
            "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
            "usualGP": true,
            "notes": "Contact notes",
            "contactType": 1
          }
        },
        "description": "Interested party Create or Update model",
        "x-tags": [
          "Other"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User|",
            "format": "uuid",
            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
          },
          "contactPracticeId": {
            "type": "string",
            "description": "Represents the interested  contact practice id in the system\n",
            "format": "uuid",
            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
            "nullable": true
          },
          "usualGP": {
            "type": "boolean",
            "description": "Flag indicates whether the contact is the usual gp for the patient",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field",
            "minLength": 0,
            "maxLength": 500,
            "example": "Clinical notes",
            "nullable": true
          },
          "contactType": {
            "type": "number",
            "description": "Represents the contactType\n\n* `1` - Health Professional\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
            "example": 1
          }
        },
        "required": [
          "contactId",
          "contactType"
        ]
      },
      "InterestedPartyObject": {
        "title": "InterestedPartyObject",
        "type": "object",
        "x-examples": {
          "Full Interested Party Response": {
            "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
            "patientId": "6cf14d94-8640-11e8-be2c-3b8d4cf2c071",
            "contactId": "761e8650-863d-11e8-9af9-57301828b877",
            "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
            "usualGP": true,
            "notes": "the notes",
            "contactType": 1,
            "createdDateTime": "2019-02-13 05:10:09.088",
            "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
            "updatedDateTime": "2019-02-13 05:10:09.088",
            "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
          }
        },
        "description": "",
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "interestedParties id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
            "format": "uuid",
            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
          },
          "patientId": {
            "type": "string",
            "description": "A GUID that represents the patient id.",
            "format": "uuid",
            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
          },
          "contactId": {
            "type": "string",
            "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional (Contact) |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User |",
            "format": "uuid",
            "example": "0325aac0-bae5-11e8-85ff-c7da5962ba60"
          },
          "contactPracticeId": {
            "type": "string",
            "description": "Represents the interested  contact practice id in the system\n",
            "example": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
            "nullable": true
          },
          "usualGP": {
            "type": "boolean",
            "description": "Flag indicates whether the contact is the usual gp for the patient.There can be only one usual gp for the patiemt. Only a contact (health professional) can be a usual gp\n"
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field",
            "maxLength": 500,
            "minLength": 0,
            "example": "Clinical Notes",
            "nullable": true
          },
          "contactType": {
            "type": "number",
            "description": "Represents the contactType\n\n* `1` - Health Professional (Contact)\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
            "example": 1,
            "minimum": 1,
            "maximum": 4,
            "exclusiveMinimum": false,
            "exclusiveMaximum": false
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "patientId",
          "contactId",
          "contactType"
        ]
      },
      "InterestedPartyPage": {
        "title": "InterestedPartyPage",
        "type": "object",
        "x-examples": {
          "Full Interested Party Paged response": {
            "data": [
              {
                "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                "createdDateTime": "2020-12-15T07:43:52.529+0000",
                "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                "updatedDateTime": "2020-12-15T07:44:08.864+0000",
                "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                "contactId": "0325aac0-bae5-11e8-85ff-c7da5962ba60",
                "contactPracticeId": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                "contactType": 1,
                "usualGP": false,
                "notes": "the Latest Notes r2"
              },
              {
                "id": "62853f6c-3e50-11eb-b325-bbe9d6d9e266",
                "createdBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                "createdDateTime": "2020-12-15T08:07:33.601+0000",
                "updatedBy": "e631a806-7f91-11ea-bb79-f7a237e16625",
                "updatedDateTime": "2020-12-15T08:07:33.601+0000",
                "patientId": "022b1df2-b5d5-11ea-92f6-97db47218dc2",
                "contactId": "f792e55a-ca47-11e5-be6d-0f232d992597",
                "contactPracticeId": null,
                "contactType": 4,
                "usualGP": true,
                "notes": "the Latest Notes: Health Prof"
              }
            ],
            "first": true,
            "last": false,
            "totalPages": 4,
            "totalElements": 7,
            "numberOfElements": 2,
            "size": 2,
            "page": 0
          }
        },
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "InterestedPartyObject",
              "type": "object",
              "x-examples": {
                "Full Interested Party Response": {
                  "id": "ffd91570-85be-11e8-b3b9-103243ff777e",
                  "patientId": "6cf14d94-8640-11e8-be2c-3b8d4cf2c071",
                  "contactId": "761e8650-863d-11e8-9af9-57301828b877",
                  "contactPracticeId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                  "usualGP": true,
                  "notes": "the notes",
                  "contactType": 1,
                  "createdDateTime": "2019-02-13 05:10:09.088",
                  "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
                  "updatedDateTime": "2019-02-13 05:10:09.088",
                  "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
                }
              },
              "description": "",
              "x-tags": [
                "Other"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "interestedParties id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                  "format": "uuid",
                  "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                },
                "patientId": {
                  "type": "string",
                  "description": "A GUID that represents the patient id.",
                  "format": "uuid",
                  "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                },
                "contactId": {
                  "type": "string",
                  "description": "A GUID that represents the interested party  id in the system. Interested party can be a\n\n| code | type description |\n| :---: | :------- |\n| 1 | Health Professional (Contact) |\n| 2 | Practice |\n| 3 | Service Provider |\n| 4 | User |",
                  "format": "uuid",
                  "example": "0325aac0-bae5-11e8-85ff-c7da5962ba60"
                },
                "contactPracticeId": {
                  "type": "string",
                  "description": "Represents the interested  contact practice id in the system\n",
                  "example": "dbfbf546-390c-11e6-a77b-e7817b1bc6ee",
                  "nullable": true
                },
                "usualGP": {
                  "type": "boolean",
                  "description": "Flag indicates whether the contact is the usual gp for the patient.There can be only one usual gp for the patiemt. Only a contact (health professional) can be a usual gp\n"
                },
                "notes": {
                  "type": "string",
                  "description": "Any comments or notes can be recorded in this field",
                  "maxLength": 500,
                  "minLength": 0,
                  "example": "Clinical Notes",
                  "nullable": true
                },
                "contactType": {
                  "type": "number",
                  "description": "Represents the contactType\n\n* `1` - Health Professional (Contact)\n* `2` - Practice\n* `3` - Service Provider\n* `4` - User",
                  "example": 1,
                  "minimum": 1,
                  "maximum": 4,
                  "exclusiveMinimum": false,
                  "exclusiveMaximum": false
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "required": [
                "id",
                "patientId",
                "contactId",
                "contactType"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "number"
          },
          "totalElements": {
            "type": "number"
          },
          "numberOfElements": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "Address": {
        "description": "Sample Address Response",
        "type": "object",
        "title": "Address",
        "x-examples": {
          "Address Response": {
            "id": "0033bcc4-251d-11e9-b4a5-577333eac455",
            "patientId": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9",
            "addressType": 1,
            "addressLine1": "Suite 402",
            "addressLine2": "200 George St",
            "addressLine3": "CBD",
            "cityCode": "Sydney",
            "postcode": "2000",
            "stateCode": "NSW",
            "countryCode": "AU",
            "createdBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
            "createdDateTime": "2020-09-29T00:59:16Z",
            "updatedBy": "0033bcc4-251d-11e9-b4a5-577333eac455",
            "updatedDateTime": "2020-09-30T00:59:16Z"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Address id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
            "format": "uuid",
            "example": "0033bcc4-251d-11e9-b4a5-577333eac455"
          },
          "patientId": {
            "type": "string",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "A GUID that represents the patient id.",
            "format": "none",
            "example": "5d2763ca-24a0-11eb-9efa-b78fd4aeb6e9"
          },
          "addressType": {
            "title": "AddressType",
            "type": "integer",
            "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
            "x-tags": [
              "Other"
            ]
          },
          "addressLine1": {
            "type": "string",
            "description": "Represents the address line 1",
            "minLength": 1,
            "maxLength": 50,
            "example": "\"Unit 30, 200 George St\""
          },
          "addressLine2": {
            "type": "string",
            "description": "Represents the address line 2",
            "minLength": 0,
            "maxLength": 50,
            "example": "\"George St\"",
            "nullable": true
          },
          "addressLine3": {
            "type": "string",
            "description": "Represents the address line 3",
            "example": "\"CBD\"",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "cityCode": {
            "type": "string",
            "description": "Represents the address city or suburb.",
            "minLength": 1,
            "maxLength": 60,
            "example": "\"Sydney\""
          },
          "postcode": {
            "type": "string",
            "description": "Represents the address postcode",
            "minLength": 1,
            "maxLength": 10,
            "example": "\"2000\""
          },
          "stateCode": {
            "type": "string",
            "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
            "minLength": 1,
            "maxLength": 20,
            "example": "\"NSW\""
          },
          "countryCode": {
            "type": "string",
            "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
            "minLength": 1,
            "maxLength": 2,
            "example": "AU"
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "patientId",
          "addressType",
          "addressLine1",
          "cityCode",
          "postcode",
          "stateCode",
          "countryCode",
          "createdBy",
          "createdDateTime",
          "updatedBy",
          "updatedDateTime"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "AddressRequest": {
        "description": "Address Request",
        "type": "object",
        "title": "AddressRequestBody",
        "x-examples": {
          "Address Request": {
            "addressType": 1,
            "addressLine1": "Suite 402",
            "addressLine2": "200 George St",
            "addressLine3": "CBD",
            "cityCode": "Sydney",
            "postcode": "2000",
            "stateCode": "NSW",
            "countryCode": "AU"
          }
        },
        "properties": {
          "addressType": {
            "title": "AddressType",
            "type": "integer",
            "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
            "x-tags": [
              "Other"
            ]
          },
          "addressLine1": {
            "type": "string",
            "description": "Represents the address line 1",
            "example": "\"Unit 30, 200 George St\"",
            "minLength": 1,
            "maxLength": 50
          },
          "addressLine2": {
            "type": "string",
            "description": "Represents the address line 2",
            "maxLength": 50,
            "example": "\"200 George St\"",
            "minLength": 0,
            "nullable": true
          },
          "addressLine3": {
            "type": "string",
            "description": "Represents the address line 3",
            "example": "\"CBD\"",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "cityCode": {
            "type": "string",
            "description": "Represents the address city or suburb.",
            "maxLength": 60,
            "minLength": 1,
            "example": "\"Sydney\""
          },
          "postcode": {
            "type": "string",
            "description": "Represents the address postcode",
            "minLength": 1,
            "maxLength": 10,
            "example": "\"2000\""
          },
          "stateCode": {
            "type": "string",
            "description": "Represents the address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code",
            "minLength": 1,
            "maxLength": 20,
            "example": "\"NSW\""
          },
          "countryCode": {
            "type": "string",
            "description": "Represents the address country.Call the below endpoint to get the countryCode\n/code-system/country-code",
            "minLength": 1,
            "maxLength": 2,
            "example": "AU"
          }
        },
        "required": [
          "addressType",
          "addressLine1",
          "cityCode",
          "postcode",
          "stateCode",
          "countryCode"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "PatientRelationship": {
        "title": "PatientRelationship",
        "x-examples": {
          "example": {
            "id": "d24b0a03-bb9b-434b-9fa1-b676529f0a65",
            "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65",
            "contactName": "Jim Sterling",
            "relationshipCode": 1,
            "contactMethod": 1,
            "mobilePhone": "1234567890",
            "homePhone": "2234567890",
            "workPhone": "323456790",
            "email": "user@example.com",
            "isEmergency": true,
            "isNOK": true,
            "isFamily": true,
            "isHeadOfFamily": true,
            "createdDateTime": "2019-02-13 05:10:09.088",
            "createdBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e",
            "updatedDateTime": "2019-02-13 05:10:09.088",
            "updatedBy": "dd191570-85be-11e8-b3b9-93e227a5ae7e"
          }
        },
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Patient Relationship id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                "format": "uuid",
                "example": "ffe6bd4a-56ff-11eb-bafd-fbdeb734a320"
              }
            }
          },
          {
            "title": "PatientRelationshipCreate",
            "type": "object",
            "x-examples": {
              "Adding a family": {
                "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                "relationshipCode": 1,
                "isEmergency": false,
                "isNOK": false,
                "isFamily": true,
                "isHeadOfFamily": true,
                "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
              },
              "Adding a emergency contact who is not in the system": {
                "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
                "contactName": "Jim Sterling",
                "relationshipCode": 1,
                "contactMethod": 1,
                "mobilePhone": "1234567890",
                "homePhone": "2234567890",
                "workPhone": "323456790",
                "email": "user@example.com",
                "isEmergency": true,
                "isNOK": true,
                "isFamily": false,
                "isHeadOfFamily": false
              }
            },
            "properties": {
              "relatedPersonId": {
                "type": "string",
                "nullable": true,
                "format": "uuid",
                "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
              },
              "contactName": {
                "type": "string",
                "maxLength": 100,
                "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
              },
              "relationshipCode": {
                "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
                "type": "integer"
              },
              "contactMethod": {
                "type": "integer",
                "nullable": true,
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6
                ],
                "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
                "title": "ContactMethod"
              },
              "mobilePhone": {
                "type": "string",
                "nullable": true,
                "minLength": 10,
                "maxLength": 10,
                "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                "example": "2234567890"
              },
              "homePhone": {
                "type": "string",
                "nullable": true,
                "pattern": "^\\d+$",
                "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                "minLength": 10,
                "maxLength": 10,
                "example": 434782347
              },
              "workPhone": {
                "type": "string",
                "nullable": true,
                "pattern": "^\\d+$",
                "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
                "minLength": 10,
                "maxLength": 10,
                "example": 297876436
              },
              "email": {
                "type": "string",
                "nullable": true,
                "format": "email",
                "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
                "example": "xyz@abc.com"
              },
              "isEmergency": {
                "type": "boolean",
                "description": "Flag indicates whether the contact added is an emergency contact or not"
              },
              "isNok": {
                "type": "boolean",
                "description": "Flag indicates whether the contact added is a next of kin"
              },
              "isFamily": {
                "type": "boolean",
                "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
              },
              "isHeadOfFamily": {
                "type": "boolean",
                "description": "Flag indicates whether the family added is a head of family or not"
              }
            },
            "required": [
              "relationshipCode"
            ],
            "x-tags": [
              "Other"
            ]
          },
          {
            "properties": {
              "createdBy": {
                "type": "string",
                "title": "CreatedBy",
                "description": "A GUID refers to User identifier who created the resource.",
                "x-examples": {
                  "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                },
                "default": "UUID",
                "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "x-internal": false
              },
              "createdDateTime": {
                "type": "string",
                "title": "CreatedDate",
                "description": "Time when the resource was created.",
                "x-internal": false
              },
              "updatedBy": {
                "type": "string",
                "title": "UpdatedBy",
                "description": "A GUID refers to User identifier who updated the resource.",
                "default": "UUID",
                "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "x-internal": false
              },
              "updatedDateTime": {
                "title": "UpdatedDate",
                "type": "string",
                "description": "Time when the resource was updated.",
                "x-internal": false
              }
            }
          }
        ],
        "type": "object",
        "x-tags": [
          "Other"
        ]
      },
      "PatientRelationshipCreate": {
        "title": "PatientRelationshipCreate",
        "type": "object",
        "x-examples": {
          "Adding a family": {
            "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
            "relationshipCode": 1,
            "isEmergency": false,
            "isNOK": false,
            "isFamily": true,
            "isHeadOfFamily": true,
            "relatedPersonId": "c34b0a03-bb9b-434b-9fa1-b676529f0a65"
          },
          "Adding a emergency contact who is not in the system": {
            "patientId": "a7514085-a4d9-4901-83a0-92e4e84b2c3d",
            "contactName": "Jim Sterling",
            "relationshipCode": 1,
            "contactMethod": 1,
            "mobilePhone": "1234567890",
            "homePhone": "2234567890",
            "workPhone": "323456790",
            "email": "user@example.com",
            "isEmergency": true,
            "isNOK": true,
            "isFamily": false,
            "isHeadOfFamily": false
          }
        },
        "properties": {
          "relatedPersonId": {
            "type": "string",
            "nullable": true,
            "format": "uuid",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "A GUID that represents the related patient id. relatedPersonId is mandatory when the contactName field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
          },
          "contactName": {
            "type": "string",
            "maxLength": 100,
            "description": "Represents the related person name. The contactName becomes mandatory when the relatedPersonId field is null.\nIf the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored."
          },
          "relationshipCode": {
            "description": "Represents the patient relationship. Call the below endpoint to get the patient title lookup\n/code-system/relationship-code.",
            "type": "integer"
          },
          "contactMethod": {
            "type": "integer",
            "nullable": true,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "description": "The contact method Id.\n- 1 = Email\n- 2 = Home Phone\n- 3 = Mobile Phone\n- 4 = Work Phone\n- 5 = SMS\n- 6 = Letter\n\nThe contactMethod becomes mandatory when the relatedPersonId field is null. If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored\n",
            "title": "ContactMethod"
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true,
            "minLength": 10,
            "maxLength": 10,
            "description": "Represents the related person mobile phone number. The mobilePhone becomes mandatory when the contactMethod field is filled with 3(Mobile Phone) or 5(SMS). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
            "example": "2234567890"
          },
          "homePhone": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d+$",
            "description": "Represents the related person home phone number. The homePhone becomes mandatory when the contactMethod field is filled with 2(Home Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
            "minLength": 10,
            "maxLength": 10,
            "example": 434782347
          },
          "workPhone": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d+$",
            "description": "Represents the related person work phone number. The workPhone becomes mandatory when the contactMethod field is filled with 4(Work Phone). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored.",
            "minLength": 10,
            "maxLength": 10,
            "example": 297876436
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email",
            "description": "Represents the related person email id. The email becomes mandatory when the contactMethod field is filled with 1(Email). If the relatedPersonId and other details like the contactName, contactMethod, etc are given, then the relatedPersonId takes precedence. Other fields are ignored",
            "example": "xyz@abc.com"
          },
          "isEmergency": {
            "type": "boolean",
            "description": "Flag indicates whether the contact added is an emergency contact or not"
          },
          "isNok": {
            "type": "boolean",
            "description": "Flag indicates whether the contact added is a next of kin"
          },
          "isFamily": {
            "type": "boolean",
            "description": "Flag indicates whether the contact added is a family. Family member added should have a patient id in the system. relatedPersonId field is mandatory if isFamily flag is set"
          },
          "isHeadOfFamily": {
            "type": "boolean",
            "description": "Flag indicates whether the family added is a head of family or not"
          }
        },
        "required": [
          "relationshipCode"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "PatientSettings": {
        "title": "PatientSettings",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Patient Setting id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                "format": "uuid",
                "example": "c4476046-3508-11eb-adbc-a75fbd464ca9"
              }
            },
            "required": [
              "id"
            ]
          },
          {
            "title": "PatientSettingsCreate",
            "type": "object",
            "description": "PatientSettings Model",
            "x-examples": {
              "PatientSettings Request": {
                "chartNo": "string",
                "accountPayerCode": 1,
                "accountTypeId": "string",
                "medicareAlias": true,
                "medicareFirstNameAlias": "string",
                "medicareSurNameAlias": "string",
                "medicareAddress": 1,
                "medicareNo": "stringstri",
                "medicareIRN": "s",
                "medicareExpiry": "2021-04",
                "pensionCardtype": 1,
                "pensionCardno": "string",
                "pensionCardExpiry": "2021-04",
                "dvaNo": "string",
                "dvaConditions": "string",
                "dvaCardType": 1,
                "safetyNetNo": "string",
                "ihiNo": "string",
                "ihiNoStatusCode": 0,
                "ihiRecordStatusCode": 0,
                "eprescribing": true,
                "research": 1,
                "racfId": "string",
                "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
                "healthFundNo": "string",
                "healthFundUPI": "st",
                "healthFundExpiryDate": "2023-04",
                "appointmentIntervalCode": 0,
                "appointmentNotes": "string"
              }
            },
            "x-tags": [
              "Other"
            ],
            "properties": {
              "patientId": {
                "type": "string",
                "description": "A GUID that represents the patient id.",
                "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                "nullable": false
              },
              "chartNo": {
                "type": "string",
                "maxLength": 20,
                "description": "Represents the chart no.",
                "nullable": true
              },
              "accountTypeId": {
                "type": "string",
                "description": "A GUID that represents the schedule id.",
                "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                "nullable": true
              },
              "accountPayerCode": {
                "title": "AccountPayer",
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "description": "Represents the account payer information. Call the below endpoint to get the patient title lookup\n/code-system/accountPayerCode\n",
                "nullable": true
              },
              "medicareAlias": {
                "type": "boolean",
                "description": "Flag indicates whether to use alias for medicare purpose",
                "nullable": true
              },
              "medicareFirstNameAlias": {
                "type": "string",
                "maxLength": 40,
                "description": "Represents the first name alias for medicare purpose.",
                "nullable": true
              },
              "medicareSurNameAlias": {
                "type": "string",
                "maxLength": 40,
                "description": "Represents the sur name alias for medicare purpose.",
                "nullable": true
              },
              "medicareAddress": {
                "type": "integer",
                "enum": [
                  1,
                  2
                ],
                "description": "Represents the address to be used for medicare purpose.\n\n* `1` - Primary\n* `2` - Secondary",
                "nullable": true
              },
              "medicareNo": {
                "type": "string",
                "description": "Represents the patient medicare no.",
                "minLength": 10,
                "maxLength": 10,
                "nullable": true
              },
              "medicareIRN": {
                "type": "string",
                "description": "Represents the patient medicare no IRN.Medicare no should be 10 digits in length",
                "minLength": 1,
                "maxLength": 1,
                "nullable": true
              },
              "medicareExpiry": {
                "type": "string",
                "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                "description": "Represents the patient medicare card expiry date.Expiry date should not be in the past",
                "default": "YYYY-MM",
                "example": "2021-04",
                "nullable": true
              },
              "pensionCardtype": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3,
                  4
                ],
                "description": "Represents the patient pension card type\n\n* `1` - Pensioner Concession Card\n* `2` - Health Care Card\n* `3` - Commonwealth Seniors Card\n* `4` - Other",
                "nullable": true
              },
              "pensionCardno": {
                "type": "string",
                "maxLength": 15,
                "description": "Represents the patient pension card no.",
                "nullable": true
              },
              "pensionCardExpiry": {
                "type": "string",
                "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
                "description": "Repesents the patient pension card expiry date.Expiry date should not be in the past",
                "default": "YYYY-MM",
                "example": "2021-04",
                "nullable": true
              },
              "dvaNo": {
                "type": "string",
                "maxLength": 9,
                "description": "Repesents the patient DVA no.",
                "nullable": true
              },
              "dvaConditions": {
                "type": "string",
                "description": "Repesents the patient DVA conditions.",
                "maxLength": 300,
                "nullable": true
              },
              "dvaCardType": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "description": "Repesents the patient DVA card type.\n\n* `1` - Gold\n* `2` - White\n* `3` - Lilac\n* `4` - Orange\n* `5` - Blue",
                "nullable": true
              },
              "safetyNetNo": {
                "type": "string",
                "maxLength": 14,
                "description": "Repesents the patient safety net no.",
                "nullable": true
              },
              "ihiNo": {
                "type": "string",
                "description": "Repesents the patient ihi no.",
                "maxLength": 16,
                "nullable": true
              },
              "ihiNoStatusCode": {
                "type": "integer",
                "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                "nullable": true
              },
              "ihiRecordStatusCode": {
                "type": "integer",
                "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
                "nullable": true
              },
              "eprescribing": {
                "type": "boolean",
                "description": "Flag indicates whether to set eprescribing.",
                "nullable": true
              },
              "research": {
                "type": "integer",
                "enum": [
                  1,
                  2,
                  3
                ],
                "description": "* `1` - No\n* `2` - Conditional\n* `3` - Yes",
                "nullable": true
              },
              "racfId": {
                "type": "string",
                "maxLength": 10,
                "description": "Represents Aged care id.",
                "nullable": true
              },
              "providerId": {
                "type": "string",
                "description": "A GUID that represents the health insurance provider id",
                "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                "format": "uuid",
                "nullable": true
              },
              "healthFundNo": {
                "type": "string",
                "maxLength": 15,
                "description": "Represents the health fund no.",
                "nullable": true
              },
              "healthFundUPI": {
                "type": "string",
                "maxLength": 2,
                "description": "Represents the health fund no upi.",
                "nullable": true
              },
              "healthFundExpiryDate": {
                "type": "string",
                "description": "Represents the health fund expiry date.Expiry date should not be in the past",
                "default": "YYYY-MM",
                "nullable": true
              },
              "appointmentIntervalCode": {
                "type": "integer",
                "description": "Represents the appointment interval duration .Call the below endpoint to get the patient title lookup\n/code-system/appointmentIntervalCode"
              },
              "appointmentNotes": {
                "type": "string",
                "maxLength": 500,
                "description": "Appointment note or description."
              }
            }
          },
          {
            "properties": {
              "createdBy": {
                "type": "string",
                "title": "CreatedBy",
                "description": "A GUID refers to User identifier who created the resource.",
                "x-examples": {
                  "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                },
                "default": "UUID",
                "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "x-internal": false
              },
              "createdDateTime": {
                "type": "string",
                "title": "CreatedDate",
                "description": "Time when the resource was created.",
                "x-internal": false
              },
              "updatedBy": {
                "type": "string",
                "title": "UpdatedBy",
                "description": "A GUID refers to User identifier who updated the resource.",
                "default": "UUID",
                "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "x-internal": false
              },
              "updatedDateTime": {
                "title": "UpdatedDate",
                "type": "string",
                "description": "Time when the resource was updated.",
                "x-internal": false
              }
            },
            "required": [
              "createdBy",
              "createdDateTime",
              "updatedBy",
              "updatedDateTime"
            ]
          }
        ],
        "x-examples": {
          "example-1": {
            "id": "string",
            "patientId": "7ce1bf10-1084-4820-9112-0bff5b89ca64",
            "chartNo": "string",
            "accountTypeId": "string",
            "accountPayerCode": 1,
            "medicareAlias": true,
            "medicareFirstNameAlias": "string",
            "medicareSurNameAlias": "string",
            "medicareAddress": 1,
            "medicareNo": "stringstri",
            "medicareIRN": "s",
            "medicareExpiry": "04/2021",
            "pensionCardtype": 1,
            "pensionCardno": "string",
            "pensionCardExpiry": "04/2021",
            "dvaNo": "string",
            "dvaConditions": "string",
            "dvaCardtype": 1,
            "safetyNetNo": "string",
            "ihiNo": "string",
            "ihiNoStatusCode": 0,
            "ihiRecordStatusCode": 0,
            "eprescribing": true,
            "research": 1,
            "racfid": "string",
            "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
            "healthFundNo": "string",
            "healthFundUPI": "st",
            "healthFundExpiryDate": "MM/YYYY",
            "appointmentIntervalCode": 0,
            "appointmentNotes": "string",
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-08-24T14:15:22Z",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "string"
          }
        },
        "x-tags": [
          "Other"
        ],
        "type": "object"
      },
      "PatientSettingsCreate": {
        "title": "PatientSettingsCreate",
        "type": "object",
        "description": "PatientSettings Model",
        "x-examples": {
          "PatientSettings Request": {
            "chartNo": "string",
            "accountPayerCode": 1,
            "accountTypeId": "string",
            "medicareAlias": true,
            "medicareFirstNameAlias": "string",
            "medicareSurNameAlias": "string",
            "medicareAddress": 1,
            "medicareNo": "stringstri",
            "medicareIRN": "s",
            "medicareExpiry": "2021-04",
            "pensionCardtype": 1,
            "pensionCardno": "string",
            "pensionCardExpiry": "2021-04",
            "dvaNo": "string",
            "dvaConditions": "string",
            "dvaCardType": 1,
            "safetyNetNo": "string",
            "ihiNo": "string",
            "ihiNoStatusCode": 0,
            "ihiRecordStatusCode": 0,
            "eprescribing": true,
            "research": 1,
            "racfId": "string",
            "providerId": "4834bcdc-4a64-444d-966b-1a6fe381da24",
            "healthFundNo": "string",
            "healthFundUPI": "st",
            "healthFundExpiryDate": "2023-04",
            "appointmentIntervalCode": 0,
            "appointmentNotes": "string"
          }
        },
        "x-tags": [
          "Other"
        ],
        "properties": {
          "patientId": {
            "type": "string",
            "description": "A GUID that represents the patient id.",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "nullable": false
          },
          "chartNo": {
            "type": "string",
            "maxLength": 20,
            "description": "Represents the chart no.",
            "nullable": true
          },
          "accountTypeId": {
            "type": "string",
            "description": "A GUID that represents the schedule id.",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "nullable": true
          },
          "accountPayerCode": {
            "title": "AccountPayer",
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "description": "Represents the account payer information. Call the below endpoint to get the patient title lookup\n/code-system/accountPayerCode\n",
            "nullable": true
          },
          "medicareAlias": {
            "type": "boolean",
            "description": "Flag indicates whether to use alias for medicare purpose",
            "nullable": true
          },
          "medicareFirstNameAlias": {
            "type": "string",
            "maxLength": 40,
            "description": "Represents the first name alias for medicare purpose.",
            "nullable": true
          },
          "medicareSurNameAlias": {
            "type": "string",
            "maxLength": 40,
            "description": "Represents the sur name alias for medicare purpose.",
            "nullable": true
          },
          "medicareAddress": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "Represents the address to be used for medicare purpose.\n\n* `1` - Primary\n* `2` - Secondary",
            "nullable": true
          },
          "medicareNo": {
            "type": "string",
            "description": "Represents the patient medicare no.",
            "minLength": 10,
            "maxLength": 10,
            "nullable": true
          },
          "medicareIRN": {
            "type": "string",
            "description": "Represents the patient medicare no IRN.Medicare no should be 10 digits in length",
            "minLength": 1,
            "maxLength": 1,
            "nullable": true
          },
          "medicareExpiry": {
            "type": "string",
            "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
            "description": "Represents the patient medicare card expiry date.Expiry date should not be in the past",
            "default": "YYYY-MM",
            "example": "2021-04",
            "nullable": true
          },
          "pensionCardtype": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "description": "Represents the patient pension card type\n\n* `1` - Pensioner Concession Card\n* `2` - Health Care Card\n* `3` - Commonwealth Seniors Card\n* `4` - Other",
            "nullable": true
          },
          "pensionCardno": {
            "type": "string",
            "maxLength": 15,
            "description": "Represents the patient pension card no.",
            "nullable": true
          },
          "pensionCardExpiry": {
            "type": "string",
            "pattern": "^(20[1-9][0-9])-(0[1-9]|1[0-2])$",
            "description": "Repesents the patient pension card expiry date.Expiry date should not be in the past",
            "default": "YYYY-MM",
            "example": "2021-04",
            "nullable": true
          },
          "dvaNo": {
            "type": "string",
            "maxLength": 9,
            "description": "Repesents the patient DVA no.",
            "nullable": true
          },
          "dvaConditions": {
            "type": "string",
            "description": "Repesents the patient DVA conditions.",
            "maxLength": 300,
            "nullable": true
          },
          "dvaCardType": {
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "description": "Repesents the patient DVA card type.\n\n* `1` - Gold\n* `2` - White\n* `3` - Lilac\n* `4` - Orange\n* `5` - Blue",
            "nullable": true
          },
          "safetyNetNo": {
            "type": "string",
            "maxLength": 14,
            "description": "Repesents the patient safety net no.",
            "nullable": true
          },
          "ihiNo": {
            "type": "string",
            "description": "Repesents the patient ihi no.",
            "maxLength": 16,
            "nullable": true
          },
          "ihiNoStatusCode": {
            "type": "integer",
            "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
            "nullable": true
          },
          "ihiRecordStatusCode": {
            "type": "integer",
            "description": "Repesents the patient ihi record status.Call the below endpoint to get the patient title lookup\n/code-system/ihiRecordStatusCode",
            "nullable": true
          },
          "eprescribing": {
            "type": "boolean",
            "description": "Flag indicates whether to set eprescribing.",
            "nullable": true
          },
          "research": {
            "type": "integer",
            "enum": [
              1,
              2,
              3
            ],
            "description": "* `1` - No\n* `2` - Conditional\n* `3` - Yes",
            "nullable": true
          },
          "racfId": {
            "type": "string",
            "maxLength": 10,
            "description": "Represents Aged care id.",
            "nullable": true
          },
          "providerId": {
            "type": "string",
            "description": "A GUID that represents the health insurance provider id",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "format": "uuid",
            "nullable": true
          },
          "healthFundNo": {
            "type": "string",
            "maxLength": 15,
            "description": "Represents the health fund no.",
            "nullable": true
          },
          "healthFundUPI": {
            "type": "string",
            "maxLength": 2,
            "description": "Represents the health fund no upi.",
            "nullable": true
          },
          "healthFundExpiryDate": {
            "type": "string",
            "description": "Represents the health fund expiry date.Expiry date should not be in the past",
            "default": "YYYY-MM",
            "nullable": true
          },
          "appointmentIntervalCode": {
            "type": "integer",
            "description": "Represents the appointment interval duration .Call the below endpoint to get the patient title lookup\n/code-system/appointmentIntervalCode"
          },
          "appointmentNotes": {
            "type": "string",
            "maxLength": 500,
            "description": "Appointment note or description."
          }
        }
      },
      "PatientResponse": {
        "title": "PatientResponse",
        "description": "The Patient Response properties that are included for a patient",
        "type": "object",
        "x-examples": {
          "Full Patient Response": {
            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "titleCode": 315890000,
            "firstName": "Timothy",
            "lastName": "Mark",
            "middleName": "David",
            "preferredName": "Tim",
            "previouslyKnownAs": "Jake",
            "fullName": "Timothy Mark",
            "gender": 2,
            "dob": "1970-12-12",
            "estimated": true,
            "oneNameOnly": "false",
            "dateOfDeath": "2018-03-04",
            "causeOfDeath": "Cancer",
            "patientStatusCode": 2,
            "ethnicityCode": 55,
            "englishAsSecondLanguage": true,
            "atsi": 1,
            "ctgCoPaymentRelief": true,
            "placeOfBirth": "Sydney",
            "skinCode": 16,
            "languageSpokenAtHome": 1,
            "homePhone": 298761234,
            "mobilePhone": "0413324123",
            "workPhone": 298671234,
            "email": "Timothy.Mark@nedirecords.com",
            "contactMethod": 1,
            "notes": "Patient had a mild fever",
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-08-24T14:15:22Z",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "2019-08-24T14:15:22Z"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
            "format": "uuid",
            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
          },
          "defaultPracticeId": {
            "type": "string",
            "description": "Default practice id where the patient details are created",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
            "format": "uuid",
            "nullable": true
          },
          "usualDoctorId": {
            "type": "string",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "description": "A user id that represents the usual doctor for the patient",
            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "format": "uuid",
            "nullable": true
          },
          "titleCode": {
            "type": "integer",
            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
            "example": 315890000
          },
          "firstName": {
            "type": "string",
            "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
            "minLength": 1,
            "maxLength": 40,
            "example": "Timothy",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Represents patient last name",
            "minLength": 1,
            "maxLength": 40,
            "example": "Mark"
          },
          "middleName": {
            "type": "string",
            "description": "Represents the patient middle name",
            "minLength": 0,
            "maxLength": 40,
            "example": "David",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
            "minLength": 0,
            "maxLength": 40,
            "example": "Tim",
            "nullable": true
          },
          "previouslyKnownAs": {
            "type": "string",
            "description": "Represents the patient previously known name",
            "maxLength": 40,
            "example": "Jake",
            "minLength": 0,
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "Represents the patient full name",
            "nullable": true
          },
          "dob": {
            "type": "string",
            "title": "DateOfBirth",
            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
            "format": "date",
            "x-examples": {
              "Date of Birth": "1970-01-10"
            },
            "x-tags": [
              "Other"
            ]
          },
          "estimated": {
            "type": "boolean",
            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
            "nullable": true
          },
          "oneNameOnly": {
            "type": "boolean",
            "example": false,
            "description": "The flag is set to true, if the patient has one name only",
            "nullable": true
          },
          "dateOfDeath": {
            "type": "string",
            "nullable": true,
            "title": "DateOfDeath",
            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
            "default": "yyyy-MM-dd",
            "example": "2018-12-01",
            "x-examples": {
              "Date Of Death Format": "2018-12-01"
            },
            "x-tags": [
              "Other"
            ]
          },
          "causeOfDeath": {
            "type": "string",
            "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
            "example": "Cancer",
            "maxLength": 300,
            "nullable": true
          },
          "patientStatusCode": {
            "type": "integer",
            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
            "example": 2,
            "nullable": true
          },
          "ethnicityCode": {
            "type": "integer",
            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
            "example": 55,
            "nullable": true
          },
          "englishAsSecondLanguage": {
            "type": "boolean",
            "description": "If english is the patient second language the flag is set as true else it is set to false",
            "nullable": true
          },
          "atsiStatus": {
            "type": "integer",
            "title": "Atsi",
            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
            "example": 4,
            "nullable": true,
            "x-tags": [
              "Other"
            ]
          },
          "ctgCoPaymentRelief": {
            "type": "boolean",
            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
            "nullable": true
          },
          "placeOfBirth": {
            "type": "string",
            "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
            "example": "Sydney",
            "maxLength": 100,
            "nullable": true
          },
          "skinCode": {
            "type": "integer",
            "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
            "example": 16,
            "nullable": true
          },
          "languageSpokenAtHome": {
            "title": "LanguageSpokenAtHome",
            "type": "integer",
            "nullable": true,
            "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
            "x-examples": {
              "example-1": 1
            },
            "x-internal": false
          },
          "homePhone": {
            "type": "string",
            "nullable": true,
            "title": "HomePhone",
            "x-examples": {
              "HomePhone Number": "0298761234"
            },
            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "maxLength": 10,
            "example": "0298761234",
            "x-internal": false,
            "minLength": 8
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true,
            "title": "MobilePhone",
            "x-examples": {
              "MobileNumber": "0413324123"
            },
            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0413324123",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "workPhone": {
            "type": "string",
            "nullable": true,
            "title": "OfficePhone",
            "x-examples": {
              "OfficePhoneNumber": "0298671234"
            },
            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0298671234",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "email": {
            "type": "string",
            "nullable": true,
            "title": "Email",
            "description": "Represents the patient email id.",
            "x-examples": {
              "Email": "Timothy.Mark@nedirecords.com"
            },
            "x-tags": [
              "Common Models"
            ],
            "format": "email",
            "example": "Timothy.Mark@nedirecords.com",
            "maxLength": 100,
            "x-internal": false
          },
          "contactMethod": {
            "title": "PatientContactMethod",
            "type": "number",
            "nullable": true,
            "x-examples": {
              "example-1": 1
            },
            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
            "x-tags": [
              "Other"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field",
            "maxLength": 500,
            "example": "Patient had a mild fever",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "PatientPage": {
        "title": "PatientPage",
        "type": "object",
        "x-examples": {
          "Full Response with pagination": {
            "data": [
              {
                "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                "titleId": 315890000,
                "firstName": "Timothy",
                "lastName": "Mark",
                "middleName": "David",
                "preferredName": "Tim",
                "previouslyKnownAs": "Jake",
                "fullName": "Timothy Mark",
                "genderCode": 2,
                "dob": "8/12/1970",
                "estimated": true,
                "oneNameOnly": "false",
                "dateOfDeath": "12/01/2010",
                "causeOfDeath": "Cancer",
                "patientStatusCode": 2,
                "ethnicityCode": 55,
                "esl": true,
                "atsiId": 4,
                "ctgCoPaymentRelief": true,
                "placeOfBirth": "Sydney",
                "skinCode": 16,
                "languageSpokenAtHome": 0,
                "homePhone": 298761234,
                "mobilePhone": "0413324123",
                "workPhone": 298671234,
                "email": "Timothy.Mark@nedirecords.com",
                "contactMethod": 1,
                "note": "Patient had a mild fever",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-08-24T14:15:22Z"
              }
            ],
            "first": true,
            "last": false,
            "totalPages": 3,
            "totalElements": 29,
            "numberOfElements": 10,
            "size": 10,
            "page": 0
          }
        },
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "PatientResponse",
              "description": "The Patient Response properties that are included for a patient",
              "type": "object",
              "x-examples": {
                "Full Patient Response": {
                  "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "titleCode": 315890000,
                  "firstName": "Timothy",
                  "lastName": "Mark",
                  "middleName": "David",
                  "preferredName": "Tim",
                  "previouslyKnownAs": "Jake",
                  "fullName": "Timothy Mark",
                  "gender": 2,
                  "dob": "1970-12-12",
                  "estimated": true,
                  "oneNameOnly": "false",
                  "dateOfDeath": "2018-03-04",
                  "causeOfDeath": "Cancer",
                  "patientStatusCode": 2,
                  "ethnicityCode": 55,
                  "englishAsSecondLanguage": true,
                  "atsi": 1,
                  "ctgCoPaymentRelief": true,
                  "placeOfBirth": "Sydney",
                  "skinCode": 16,
                  "languageSpokenAtHome": 1,
                  "homePhone": 298761234,
                  "mobilePhone": "0413324123",
                  "workPhone": 298671234,
                  "email": "Timothy.Mark@nedirecords.com",
                  "contactMethod": 1,
                  "notes": "Patient had a mild fever",
                  "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "createdDateTime": "2019-08-24T14:15:22Z",
                  "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "updatedDateTime": "2019-08-24T14:15:22Z"
                }
              },
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                  "format": "uuid",
                  "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                },
                "defaultPracticeId": {
                  "type": "string",
                  "description": "Default practice id where the patient details are created",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                  "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "format": "uuid",
                  "nullable": true
                },
                "usualDoctorId": {
                  "type": "string",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                  "description": "A user id that represents the usual doctor for the patient",
                  "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "format": "uuid",
                  "nullable": true
                },
                "titleCode": {
                  "type": "integer",
                  "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                  "example": 315890000
                },
                "firstName": {
                  "type": "string",
                  "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                  "minLength": 1,
                  "maxLength": 40,
                  "example": "Timothy",
                  "nullable": true
                },
                "lastName": {
                  "type": "string",
                  "description": "Represents patient last name",
                  "minLength": 1,
                  "maxLength": 40,
                  "example": "Mark"
                },
                "middleName": {
                  "type": "string",
                  "description": "Represents the patient middle name",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "David",
                  "nullable": true
                },
                "preferredName": {
                  "type": "string",
                  "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "Tim",
                  "nullable": true
                },
                "previouslyKnownAs": {
                  "type": "string",
                  "description": "Represents the patient previously known name",
                  "maxLength": 40,
                  "example": "Jake",
                  "minLength": 0,
                  "nullable": true
                },
                "fullName": {
                  "type": "string",
                  "description": "Represents the patient full name",
                  "nullable": true
                },
                "dob": {
                  "type": "string",
                  "title": "DateOfBirth",
                  "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                  "format": "date",
                  "x-examples": {
                    "Date of Birth": "1970-01-10"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "estimated": {
                  "type": "boolean",
                  "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                  "nullable": true
                },
                "oneNameOnly": {
                  "type": "boolean",
                  "example": false,
                  "description": "The flag is set to true, if the patient has one name only",
                  "nullable": true
                },
                "dateOfDeath": {
                  "type": "string",
                  "nullable": true,
                  "title": "DateOfDeath",
                  "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                  "default": "yyyy-MM-dd",
                  "example": "2018-12-01",
                  "x-examples": {
                    "Date Of Death Format": "2018-12-01"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "causeOfDeath": {
                  "type": "string",
                  "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                  "example": "Cancer",
                  "maxLength": 300,
                  "nullable": true
                },
                "patientStatusCode": {
                  "type": "integer",
                  "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                  "example": 2,
                  "nullable": true
                },
                "ethnicityCode": {
                  "type": "integer",
                  "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                  "example": 55,
                  "nullable": true
                },
                "englishAsSecondLanguage": {
                  "type": "boolean",
                  "description": "If english is the patient second language the flag is set as true else it is set to false",
                  "nullable": true
                },
                "atsiStatus": {
                  "type": "integer",
                  "title": "Atsi",
                  "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                  "example": 4,
                  "nullable": true,
                  "x-tags": [
                    "Other"
                  ]
                },
                "ctgCoPaymentRelief": {
                  "type": "boolean",
                  "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "nullable": true
                },
                "placeOfBirth": {
                  "type": "string",
                  "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "example": "Sydney",
                  "maxLength": 100,
                  "nullable": true
                },
                "skinCode": {
                  "type": "integer",
                  "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "example": 16,
                  "nullable": true
                },
                "languageSpokenAtHome": {
                  "title": "LanguageSpokenAtHome",
                  "type": "integer",
                  "nullable": true,
                  "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "x-examples": {
                    "example-1": 1
                  },
                  "x-internal": false
                },
                "homePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "HomePhone",
                  "x-examples": {
                    "HomePhone Number": "0298761234"
                  },
                  "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "maxLength": 10,
                  "example": "0298761234",
                  "x-internal": false,
                  "minLength": 8
                },
                "mobilePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "MobilePhone",
                  "x-examples": {
                    "MobileNumber": "0413324123"
                  },
                  "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0413324123",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "workPhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "OfficePhone",
                  "x-examples": {
                    "OfficePhoneNumber": "0298671234"
                  },
                  "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0298671234",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "email": {
                  "type": "string",
                  "nullable": true,
                  "title": "Email",
                  "description": "Represents the patient email id.",
                  "x-examples": {
                    "Email": "Timothy.Mark@nedirecords.com"
                  },
                  "x-tags": [
                    "Common Models"
                  ],
                  "format": "email",
                  "example": "Timothy.Mark@nedirecords.com",
                  "maxLength": 100,
                  "x-internal": false
                },
                "contactMethod": {
                  "title": "PatientContactMethod",
                  "type": "number",
                  "nullable": true,
                  "x-examples": {
                    "example-1": 1
                  },
                  "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                  "x-tags": [
                    "Other"
                  ]
                },
                "notes": {
                  "type": "string",
                  "description": "Any comments or notes can be recorded in this field",
                  "maxLength": 500,
                  "example": "Patient had a mild fever",
                  "nullable": true
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "x-tags": [
                "Other"
              ]
            }
          },
          "first": {
            "type": "boolean",
            "description": "Showing the first page."
          },
          "last": {
            "type": "boolean",
            "description": "Showing the last page."
          },
          "totalPages": {
            "type": "integer",
            "description": "Total Pages"
          },
          "totalElements": {
            "description": "Total records",
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer",
            "description": "Total records"
          },
          "size": {
            "description": "Number of records in a page",
            "type": "integer"
          },
          "page": {
            "type": "integer",
            "description": "current page number"
          }
        },
        "description": "Get all patients with pagination",
        "x-tags": [
          "Other"
        ]
      },
      "ReferrerPage": {
        "title": "ReferrerPage",
        "type": "object",
        "x-examples": {
          "example-1": {
            "data": [
              {
                "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                "referrerProviderNo": "66f73f18",
                "referralDate": "14/11/2020",
                "referredById": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                "subject": "X-ray",
                "referralTypeCode": 0,
                "firstUsedDate": "14/11/2020",
                "validMonth": 12,
                "notes": "X-ray for knee",
                "confidential": true,
                "referredByName": "Tom",
                "referredToName": "Tim",
                "referredByPractice": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                "standardOption": "1",
                "expiryDate": "15/11/2020",
                "referredByType": 0,
                "referredToType": 0,
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "string",
                "updatedDateTime": "string"
              }
            ],
            "first": true,
            "last": true,
            "totalPages": 0,
            "numberOfElements": 0,
            "size": 0,
            "page": 0
          }
        },
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "Referrer",
              "type": "object",
              "x-examples": {
                "example": {
                  "id": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                  "patientId": "31f73f18-ad0a-11e9-92bf-cb45fd707777",
                  "referrerProviderNo": "66f73f18",
                  "referralDate": "2020-11-14",
                  "referredById": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                  "referredToId": "31f73f18-ad0a-11e9-92bf-cb45fd708888",
                  "subject": "X-ray",
                  "referralTypeCode": 1,
                  "firstUsedDate": "2020-11-11",
                  "validMonth": 12,
                  "notes": "X-ray for knee",
                  "confidential": true,
                  "referredByName": "Dr Maggie Kane",
                  "referredToName": "Dr Bob Brown",
                  "referredByPractice": "11173f18-ad0a-11e9-92bf-cb45fd706045",
                  "standardOption": 12,
                  "expiryDate": "2020-11-15",
                  "referredByType": 1,
                  "referredToType": 2,
                  "createdDateTime": "2020-11-11T14:40:44.421+0000",
                  "createBy": "22f73f18-ad0a-11e9-92bf-cb45fd706045",
                  "updatedDateTime": "2020-11-11T14:40:44.421+0000",
                  "updatedById": "22f73f18-ad0a-11e9-92bf-cb45fd706045"
                }
              },
              "description": "",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Referral id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                  "format": "uuid",
                  "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                },
                "patientId": {
                  "type": "string",
                  "description": "A GUID that represents patient by id",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "format": "none",
                  "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                },
                "referrerProviderNo": {
                  "type": "string",
                  "description": "Represents the referred by provier no",
                  "example": "\"6f7f8\"",
                  "maxLength": 8,
                  "nullable": true
                },
                "referralDate": {
                  "type": "string",
                  "description": "Represents the referral created date. Referral created date should not be in the future and should not be after the firstUsedDate.",
                  "example": "2020-11-14",
                  "default": "YYYY-MM-DD"
                },
                "referredById": {
                  "type": "string",
                  "description": "A GUID that represents the referred by id. A referredById can be\n1 - Health Professional(Contact)\n2 - Practice\n3 - Service Provider\n4- User",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999"
                },
                "referredToId": {
                  "type": "string",
                  "description": "A GUID that represents the referred to id. A referredToId can be a\n2- Practice\n4- User",
                  "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                },
                "subject": {
                  "type": "string",
                  "description": "Represents the referral subject",
                  "minLength": 1,
                  "maxLength": 100,
                  "example": "\"X-ray\""
                },
                "referralTypeCode": {
                  "type": "integer",
                  "description": "Represents the type of referral. Call the below endpoint to get the patient title lookup\n/code-system/referral-type-code"
                },
                "firstUsedDate": {
                  "type": "string",
                  "description": "Represents the date the referral was first used. firstUsedDate should not be in future.",
                  "example": "2020-11-14",
                  "default": "YYYY-MM-DD",
                  "nullable": true
                },
                "validMonth": {
                  "type": "number",
                  "description": "Represents the duration the referral is valid for.If the referral type is standard , then the referral can be vaild only for 3 or 12 months. Other than standard or non-standard referral types , the validMonth is always null.\n",
                  "example": 12
                },
                "notes": {
                  "type": "string",
                  "description": "Any comments or notes can be recorded in this field.",
                  "maxLength": 500,
                  "example": "\"X-ray for knee\"",
                  "nullable": true
                },
                "confidential": {
                  "description": "Flag indicates whether the referral records is condifentials or not.",
                  "type": "boolean"
                },
                "referredByName": {
                  "type": "string",
                  "description": "Represents the referred by name",
                  "example": "\"Tom\""
                },
                "referredToName": {
                  "type": "string",
                  "description": "Represents the reffered to name.",
                  "example": "\"Tim\""
                },
                "referredByPractice": {
                  "type": "string",
                  "description": "Represents the referred by practice id.  If the referredBy is a practice, then referredByPractice will always be null.",
                  "format": "none",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "example": "31f73f18-ad0a-11e9-92bf-cb45fd709999",
                  "nullable": true
                },
                "standardOption": {
                  "description": "Represents the valid month in case of standard referrals",
                  "example": 1,
                  "type": "number",
                  "nullable": true
                },
                "expiryDate": {
                  "type": "string",
                  "description": "Represents the referral expiry date. If the validMonth is null , then expiryDate is null",
                  "format": "none",
                  "example": "2020-11-14",
                  "default": "YYYY-MM-DD"
                },
                "referredByType": {
                  "title": "ReferredByTypeEnum",
                  "type": "integer",
                  "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
                  "x-tags": [
                    "Other"
                  ]
                },
                "referredToType": {
                  "title": "ReferredToTypeEnum",
                  "type": "integer",
                  "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
                  "x-tags": [
                    "Other"
                  ]
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "x-tags": [
                "Other"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "number"
          },
          "numberOfElements": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "DateOfBirth": {
        "type": "string",
        "title": "DateOfBirth",
        "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
        "format": "date",
        "x-examples": {
          "Date of Birth": "1970-01-10"
        },
        "x-tags": [
          "Other"
        ]
      },
      "DateOfDeath": {
        "type": "string",
        "nullable": true,
        "title": "DateOfDeath",
        "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
        "default": "yyyy-MM-dd",
        "example": "2018-12-01",
        "x-examples": {
          "Date Of Death Format": "2018-12-01"
        },
        "x-tags": [
          "Other"
        ]
      },
      "PatientContactMethod": {
        "title": "PatientContactMethod",
        "type": "number",
        "nullable": true,
        "x-examples": {
          "example-1": 1
        },
        "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
        "x-tags": [
          "Other"
        ]
      },
      "AddressType": {
        "title": "AddressType",
        "type": "integer",
        "description": "Represents the address type of the patient.\n\n* `1` - Primary Address\n* `2` - Secondary Address",
        "x-tags": [
          "Other"
        ]
      },
      "AtsiId": {
        "type": "integer",
        "title": "Atsi",
        "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
        "example": 4,
        "nullable": true,
        "x-tags": [
          "Other"
        ]
      },
      "ReferredByTypeEnum": {
        "title": "ReferredByTypeEnum",
        "type": "integer",
        "description": "Represents the Referred by type . \n* `1` - Health Professionals (\nContact)\n* `2` - Practice\n* `3` - Service Providers\n* `4` - User",
        "x-tags": [
          "Other"
        ]
      },
      "ReferredToTypeEnum": {
        "title": "ReferredToTypeEnum",
        "type": "integer",
        "description": "Represents the Referred to type . \n* `2` - Practice\n* `4` - User",
        "x-tags": [
          "Other"
        ]
      },
      "CorrespondenceInboundPage": {
        "title": "CorrespondenceInboundPage",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "CorrespondenceInbound",
              "type": "object",
              "x-tags": [
                "Other"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1,
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "description": "Inbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                },
                "practiceId": {
                  "type": "string",
                  "minLength": 1,
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "description": "Represents the practice Id."
                },
                "patientId": {
                  "type": "string",
                  "minLength": 1,
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "description": "Represents the patient Id."
                },
                "importDate": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the correspondence import date",
                  "format": "date",
                  "pattern": "YYYY-MM-DD"
                },
                "category": {
                  "type": "integer",
                  "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                  "enum": [
                    1,
                    2,
                    3,
                    4,
                    5
                  ]
                },
                "subject": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the subject of the correspondence",
                  "maxLength": 100
                },
                "senderType": {
                  "type": "integer",
                  "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                  "enum": [
                    1,
                    2,
                    3,
                    4
                  ]
                },
                "senderId": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                },
                "recipientId": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the user Id.",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                },
                "letterStatus": {
                  "type": "integer",
                  "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                  "enum": [
                    1,
                    2
                  ],
                  "nullable": true
                },
                "checkedDate": {
                  "type": "string",
                  "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
                  "format": "date",
                  "pattern": "YYYY-MM-DD",
                  "nullable": true
                },
                "checkedById": {
                  "type": "string",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
                  "nullable": true
                },
                "attachmentUrl": {
                  "type": "string",
                  "description": "Represents the file url.",
                  "nullable": true
                },
                "notes": {
                  "type": "string",
                  "description": "Represents any additional details on the correpondence.",
                  "maxLength": 500,
                  "nullable": true
                },
                "originatorName": {
                  "type": "string",
                  "description": "Represents the correspondence originator name.",
                  "nullable": true
                },
                "senderName": {
                  "type": "string",
                  "description": "Represents the correspondence sender name.",
                  "nullable": true
                },
                "recipientName": {
                  "type": "string",
                  "description": "Represents the correspondence recipient name.",
                  "nullable": true
                },
                "checkedByName": {
                  "type": "string",
                  "description": "Represents the user who has checked the correspondence.",
                  "nullable": true
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "required": [
                "id",
                "practiceId",
                "patientId",
                "importDate",
                "category",
                "subject",
                "senderType",
                "senderId",
                "recipientId",
                "createdBy",
                "createdDateTime",
                "updatedBy",
                "updatedDateTime"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer"
          },
          "totalElements": {
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "CorrespondenceInboundCreate": {
        "title": "CorrespondenceInboundCreate",
        "type": "object",
        "x-tags": [
          "Other"
        ],
        "properties": {
          "practiceId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the practice Id."
          },
          "patientId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the patient Id."
          },
          "importDate": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the correspondence import date",
            "pattern": "YYYY-MM-DD"
          },
          "category": {
            "type": "integer",
            "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results\n",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the subject of the correspondence"
          },
          "senderType": {
            "type": "integer",
            "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
            "enum": [
              1,
              2,
              3,
              4
            ]
          },
          "senderId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "recipientId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user Id",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "letterStatus": {
            "type": "integer",
            "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
            "enum": [
              1,
              2
            ],
            "nullable": true
          },
          "checkedDate": {
            "type": "string",
            "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
            "pattern": "YYYY-MM-DD",
            "nullable": true
          },
          "checkedById": {
            "type": "string",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
            "nullable": true
          },
          "attachment": {
            "type": "string",
            "description": "Represents the actual file to be imported. File types could be jpg,png or pdf. Max file size is 20 MB.",
            "format": "binary",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Represents any additional details on the correpondence.",
            "nullable": true
          }
        },
        "required": [
          "practiceId",
          "patientId",
          "importDate",
          "category",
          "subject",
          "senderType",
          "senderId",
          "recipientId"
        ]
      },
      "CorrespondenceInbound": {
        "title": "CorrespondenceInbound",
        "type": "object",
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Inbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
          },
          "practiceId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the practice Id."
          },
          "patientId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the patient Id."
          },
          "importDate": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the correspondence import date",
            "format": "date",
            "pattern": "YYYY-MM-DD"
          },
          "category": {
            "type": "integer",
            "description": "Represents the category of the inbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the subject of the correspondence",
            "maxLength": 100
          },
          "senderType": {
            "type": "integer",
            "description": "Represents the correspondence sender type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
            "enum": [
              1,
              2,
              3,
              4
            ]
          },
          "senderId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "recipientId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user Id.",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "letterStatus": {
            "type": "integer",
            "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
            "enum": [
              1,
              2
            ],
            "nullable": true
          },
          "checkedDate": {
            "type": "string",
            "description": "Represents the date the correspondence was checked.If the letterStatus = 1 (checked) and if there is no checkedDate received, then the date the request is being sent is stored as the checkedDate.",
            "format": "date",
            "pattern": "YYYY-MM-DD",
            "nullable": true
          },
          "checkedById": {
            "type": "string",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the user Id who has checked the correspondence. If the letterStatus = 1 (checked) and if there is no checkedById received, then the API user who sent the request is stored as the checkedById.",
            "nullable": true
          },
          "attachmentUrl": {
            "type": "string",
            "description": "Represents the file url.",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Represents any additional details on the correpondence.",
            "maxLength": 500,
            "nullable": true
          },
          "originatorName": {
            "type": "string",
            "description": "Represents the correspondence originator name.",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "description": "Represents the correspondence sender name.",
            "nullable": true
          },
          "recipientName": {
            "type": "string",
            "description": "Represents the correspondence recipient name.",
            "nullable": true
          },
          "checkedByName": {
            "type": "string",
            "description": "Represents the user who has checked the correspondence.",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceId",
          "patientId",
          "importDate",
          "category",
          "subject",
          "senderType",
          "senderId",
          "recipientId",
          "createdBy",
          "createdDateTime",
          "updatedBy",
          "updatedDateTime"
        ]
      },
      "CorrespondenceOutboundPage": {
        "title": "CorrespondenceOutboundPage",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "CorrespondenceOutbound",
              "type": "object",
              "x-tags": [
                "Other"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "minLength": 1,
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "description": "Outbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
                },
                "practiceId": {
                  "type": "string",
                  "minLength": 1,
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "description": "Represents the practice Id."
                },
                "patientId": {
                  "type": "string",
                  "minLength": 1,
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "description": "Represents the patient Id."
                },
                "importDate": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the correspondence import date",
                  "format": "date"
                },
                "category": {
                  "type": "integer",
                  "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
                  "enum": [
                    1,
                    2,
                    3,
                    4,
                    5
                  ]
                },
                "subject": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the subject of the correspondence",
                  "maxLength": 100
                },
                "senderId": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the user Id.\n",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                },
                "letterStatus": {
                  "type": "integer",
                  "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
                  "enum": [
                    1,
                    2
                  ],
                  "nullable": true
                },
                "attachmentUrl": {
                  "type": "string",
                  "description": "Represents the file url.",
                  "nullable": true
                },
                "recipientType": {
                  "type": "integer",
                  "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
                  "enum": [
                    1,
                    2,
                    3,
                    4
                  ]
                },
                "recipientId": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
                },
                "notes": {
                  "type": "string",
                  "description": "Represents any additional details on the correpondence.",
                  "maxLength": 500,
                  "nullable": true
                },
                "htmlContent": {
                  "type": "string",
                  "description": "Represents the correspondence html content.",
                  "nullable": true
                },
                "originatorName": {
                  "type": "string",
                  "description": "Represents the correspondence originator name.",
                  "nullable": true
                },
                "senderName": {
                  "type": "string",
                  "description": "Represents the correspondence sender name.",
                  "nullable": true
                },
                "recipientName": {
                  "type": "string",
                  "description": "Represents the correspondence recipient name.",
                  "nullable": true
                },
                "outboundStatus": {
                  "type": "string",
                  "description": "Represents the outbound correspondence status like Pending, Sent, Delivered etc.",
                  "nullable": true
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "required": [
                "id",
                "practiceId",
                "patientId",
                "importDate",
                "category",
                "subject",
                "senderId",
                "createdBy",
                "createdDateTime",
                "updatedBy",
                "updatedDateTime"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer"
          },
          "totalElements": {
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "CorrespondenceOutboundCreate": {
        "title": "CorrespondenceOutboundCreate",
        "type": "object",
        "x-tags": [
          "Other"
        ],
        "properties": {
          "practiceId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the practice Id."
          },
          "patientId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the patient Id."
          },
          "importDate": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the correspondence import date",
            "format": "date"
          },
          "category": {
            "type": "integer",
            "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the subject of the correspondence"
          },
          "senderId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user Id.\n",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "letterStatus": {
            "type": "integer",
            "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
            "enum": [
              1,
              2
            ],
            "nullable": true
          },
          "attachment": {
            "type": "string",
            "description": "Represents the actual file to be imported. File types could be jpg,png or pdf. Max file size is 20 MB.",
            "nullable": true
          },
          "recipientType": {
            "type": "integer",
            "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
            "enum": [
              1,
              2,
              3,
              4
            ]
          },
          "recipientId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "notes": {
            "type": "string",
            "description": "Represents any additional details on the correpondence.",
            "nullable": true
          },
          "htmlContent": {
            "type": "string",
            "description": "Represents the correspondence html content.",
            "nullable": true
          }
        },
        "required": [
          "practiceId",
          "patientId",
          "importDate",
          "category",
          "subject",
          "senderId"
        ]
      },
      "CorrespondenceOutbound": {
        "title": "CorrespondenceOutbound",
        "type": "object",
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Outbound id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations"
          },
          "practiceId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the practice Id."
          },
          "patientId": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "description": "Represents the patient Id."
          },
          "importDate": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the correspondence import date",
            "format": "date"
          },
          "category": {
            "type": "integer",
            "description": "Represents the category of the outbound correspondence\n\n* `1` - Letter\n* `2` - Care Plan\n* `3` - Billing\n* `4` - Migrated Clinical Images\n* `5` - Results",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the subject of the correspondence",
            "maxLength": 100
          },
          "senderId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user Id.\n",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "letterStatus": {
            "type": "integer",
            "description": "Represents the correspondence status.\n\n* `1` - Draft\n* `2` - Final",
            "enum": [
              1,
              2
            ],
            "nullable": true
          },
          "attachmentUrl": {
            "type": "string",
            "description": "Represents the file url.",
            "nullable": true
          },
          "recipientType": {
            "type": "integer",
            "description": "Represents the correspondence recipient type\n\n* `1` - User\n* `2` - Practice\n* `3` - Health Professional\n* `4` - Service Provider",
            "enum": [
              1,
              2,
              3,
              4
            ]
          },
          "recipientId": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the\n\n* `1` - User Id , if the senderType is 1\n* `2` - Practice Id , if the senderType is 2\n* `3` - Health Professional Id, if the senderType is 3\n* `4` - Service Provider Id, if the senderType is 4",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "notes": {
            "type": "string",
            "description": "Represents any additional details on the correpondence.",
            "maxLength": 500,
            "nullable": true
          },
          "htmlContent": {
            "type": "string",
            "description": "Represents the correspondence html content.",
            "nullable": true
          },
          "originatorName": {
            "type": "string",
            "description": "Represents the correspondence originator name.",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "description": "Represents the correspondence sender name.",
            "nullable": true
          },
          "recipientName": {
            "type": "string",
            "description": "Represents the correspondence recipient name.",
            "nullable": true
          },
          "outboundStatus": {
            "type": "string",
            "description": "Represents the outbound correspondence status like Pending, Sent, Delivered etc.",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceId",
          "patientId",
          "importDate",
          "category",
          "subject",
          "senderId",
          "createdBy",
          "createdDateTime",
          "updatedBy",
          "updatedDateTime"
        ]
      },
      "WebhooksPage": {
        "title": "WebhooksPage",
        "type": "object",
        "x-examples": {
          "example": {
            "data": [
              {
                "id": "138262b2-3e4d-11eb-9747-372b406ed24f",
                "status": "enabled",
                "createdDate": "2020-09-29T00:59:16Z",
                "url": "https://example.com/customer/webhook",
                "updatedDate": "2020-09-29T00:59:16Z"
              }
            ],
            "first": true,
            "last": true,
            "totalPages": 1,
            "numberOfElements": 1,
            "size": 20,
            "page": 10
          }
        },
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "WebhookObject",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "138262b2-3e4d-11eb-9747-372b406ed24f",
                  "format": "uuid",
                  "description": "Webhook id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
                },
                "status": {
                  "type": "string",
                  "description": "Webhook Status"
                },
                "url": {
                  "type": "string",
                  "description": "Webhook URL"
                },
                "createdDate": {
                  "type": "string",
                  "description": "Time when the resource was created"
                },
                "updatedDate": {
                  "type": "string",
                  "description": "Time when the resource was updated"
                }
              },
              "x-tags": [
                "Other"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "number"
          },
          "numberOfElements": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "CodeSystem": {
        "title": "CodeSystem",
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "x-examples": {
          "example": {
            "code": "AU",
            "value": "Australia"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "WebhookObject": {
        "title": "WebhookObject",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "138262b2-3e4d-11eb-9747-372b406ed24f",
            "format": "uuid",
            "description": "Webhook id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations."
          },
          "status": {
            "type": "string",
            "description": "Webhook Status"
          },
          "url": {
            "type": "string",
            "description": "Webhook URL"
          },
          "createdDate": {
            "type": "string",
            "description": "Time when the resource was created"
          },
          "updatedDate": {
            "type": "string",
            "description": "Time when the resource was updated"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "PracticeObject": {
        "title": "PracticeObject",
        "type": "object",
        "x-examples": {
          "Full Practice Response": {
            "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
            "practiceName": "EastCorePractice",
            "mainPhone": 298761234,
            "addressLine1": "50 East Core",
            "addressLine2": "Block 2",
            "postcode": "4000",
            "city": "Brisbane",
            "stateCode": "QLD",
            "countryCode": "AU",
            "email": "test_practice@medirecords.com",
            "serviceTypeText": "string",
            "primaryPractice": true,
            "fax": 491148223,
            "lspNo": "14",
            "abn": "91905419459",
            "pipNo": "1241414",
            "acirClinicCode": "1234",
            "acirCommunityCode": "12345",
            "status": "Active",
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-02-13 05:10:09.088",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "2019-02-14 05:10:09.088"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Practice id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
            "format": "uuid",
            "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
          },
          "practiceName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Represents the practice name.",
            "example": "EastCorePractice"
          },
          "mainPhone": {
            "type": "string",
            "example": 298761234,
            "maxLength": 10,
            "description": "Represents the practice main phone number"
          },
          "addressLine1": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "description": "Represents the practice address line 1. ",
            "example": "50 East Core"
          },
          "addressLine2": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "description": "Represents the practice address line 2. ",
            "example": "Block 2"
          },
          "postcode": {
            "type": "string",
            "description": "Represents the practice address postcode.",
            "minLength": 1,
            "maxLength": 10,
            "example": "4000"
          },
          "city": {
            "type": "string",
            "description": "Represents the practice address city or suburb.",
            "example": "Brisbane",
            "minLength": 1,
            "maxLength": 60
          },
          "stateCode": {
            "type": "string",
            "description": "Represents the practice address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code.",
            "minLength": 1,
            "maxLength": 20,
            "example": "QLD"
          },
          "countryCode": {
            "type": "string",
            "description": "Represents the practice address country.Call the below endpoint to get the countryCode\n/code-system/country-code .",
            "maxLength": 2,
            "example": "AU"
          },
          "email": {
            "type": "string",
            "description": "Represents the practice email.",
            "example": "test_practice@medirecords.com",
            "maxLength": 100
          },
          "serviceTypeText": {
            "type": "string",
            "description": "Represents the practice service type text (e.g Aged care , Community health etc)."
          },
          "primaryPractice": {
            "type": "boolean",
            "description": "Represents the practice type . If the practice type is primary , then the flag is set to true else its false."
          },
          "fax": {
            "type": "string",
            "description": "Represents the practice fax number . ",
            "maxLength": 10,
            "example": 491148223
          },
          "lspNo": {
            "type": "string",
            "description": "Represents the lsp number.",
            "maxLength": 6,
            "example": "14"
          },
          "abn": {
            "type": "string",
            "description": "Represents the users abn number",
            "example": "91905419459",
            "maxLength": 14
          },
          "pipNo": {
            "type": "string",
            "description": "Represents the practice fax number. ",
            "example": "1241414",
            "maxLength": 12
          },
          "acirClinicCode": {
            "type": "string",
            "example": "1234",
            "description": "Represents the practice acir clinic code."
          },
          "acirCommunityCode": {
            "type": "string",
            "example": "12345",
            "description": "Represents the practice acir community code."
          },
          "status": {
            "type": "string",
            "description": "Represents the practice status. ",
            "example": "Active"
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceName",
          "mainPhone",
          "addressLine1",
          "postcode",
          "city",
          "stateCode",
          "countryCode",
          "email",
          "primaryPractice"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "PracticePage": {
        "title": "PracticePage",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "PracticeObject",
              "type": "object",
              "x-examples": {
                "Full Practice Response": {
                  "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                  "practiceName": "EastCorePractice",
                  "mainPhone": 298761234,
                  "addressLine1": "50 East Core",
                  "addressLine2": "Block 2",
                  "postcode": "4000",
                  "city": "Brisbane",
                  "stateCode": "QLD",
                  "countryCode": "AU",
                  "email": "test_practice@medirecords.com",
                  "serviceTypeText": "string",
                  "primaryPractice": true,
                  "fax": 491148223,
                  "lspNo": "14",
                  "abn": "91905419459",
                  "pipNo": "1241414",
                  "acirClinicCode": "1234",
                  "acirCommunityCode": "12345",
                  "status": "Active",
                  "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "createdDateTime": "2019-02-13 05:10:09.088",
                  "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "updatedDateTime": "2019-02-14 05:10:09.088"
                }
              },
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Practice id.This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                  "format": "uuid",
                  "example": "575d619c-38eb-11eb-a7bc-dfe94a17d427"
                },
                "practiceName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 200,
                  "description": "Represents the practice name.",
                  "example": "EastCorePractice"
                },
                "mainPhone": {
                  "type": "string",
                  "example": 298761234,
                  "maxLength": 10,
                  "description": "Represents the practice main phone number"
                },
                "addressLine1": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 30,
                  "description": "Represents the practice address line 1. ",
                  "example": "50 East Core"
                },
                "addressLine2": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 30,
                  "description": "Represents the practice address line 2. ",
                  "example": "Block 2"
                },
                "postcode": {
                  "type": "string",
                  "description": "Represents the practice address postcode.",
                  "minLength": 1,
                  "maxLength": 10,
                  "example": "4000"
                },
                "city": {
                  "type": "string",
                  "description": "Represents the practice address city or suburb.",
                  "example": "Brisbane",
                  "minLength": 1,
                  "maxLength": 60
                },
                "stateCode": {
                  "type": "string",
                  "description": "Represents the practice address state.If the country is AU , then call the endpoint to get the stateCode\n/code-system/state-code.",
                  "minLength": 1,
                  "maxLength": 20,
                  "example": "QLD"
                },
                "countryCode": {
                  "type": "string",
                  "description": "Represents the practice address country.Call the below endpoint to get the countryCode\n/code-system/country-code .",
                  "maxLength": 2,
                  "example": "AU"
                },
                "email": {
                  "type": "string",
                  "description": "Represents the practice email.",
                  "example": "test_practice@medirecords.com",
                  "maxLength": 100
                },
                "serviceTypeText": {
                  "type": "string",
                  "description": "Represents the practice service type text (e.g Aged care , Community health etc)."
                },
                "primaryPractice": {
                  "type": "boolean",
                  "description": "Represents the practice type . If the practice type is primary , then the flag is set to true else its false."
                },
                "fax": {
                  "type": "string",
                  "description": "Represents the practice fax number . ",
                  "maxLength": 10,
                  "example": 491148223
                },
                "lspNo": {
                  "type": "string",
                  "description": "Represents the lsp number.",
                  "maxLength": 6,
                  "example": "14"
                },
                "abn": {
                  "type": "string",
                  "description": "Represents the users abn number",
                  "example": "91905419459",
                  "maxLength": 14
                },
                "pipNo": {
                  "type": "string",
                  "description": "Represents the practice fax number. ",
                  "example": "1241414",
                  "maxLength": 12
                },
                "acirClinicCode": {
                  "type": "string",
                  "example": "1234",
                  "description": "Represents the practice acir clinic code."
                },
                "acirCommunityCode": {
                  "type": "string",
                  "example": "12345",
                  "description": "Represents the practice acir community code."
                },
                "status": {
                  "type": "string",
                  "description": "Represents the practice status. ",
                  "example": "Active"
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "required": [
                "id",
                "practiceName",
                "mainPhone",
                "addressLine1",
                "postcode",
                "city",
                "stateCode",
                "countryCode",
                "email",
                "primaryPractice"
              ],
              "x-tags": [
                "Other"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "number"
          },
          "totalElements": {
            "type": "number"
          },
          "numberOfElements": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "x-examples": {
          "Full Practice Paged Response": {
            "data": [
              {
                "id": "575d619c-38eb-11eb-a7bc-dfe94a17d427",
                "practiceName": "EastCorePractice",
                "mainPhone": 298761234,
                "addressLine1": "50 East Core",
                "addressLine2": "Block 2",
                "postcode": "4000",
                "city": "Brisbane",
                "stateCode": "QLD",
                "countryCode": "AU",
                "email": "test_practice@medirecords.com",
                "serviceTypeText": "Aged Care Facility",
                "primaryPractice": true,
                "fax": 491148223,
                "lspNo": "14",
                "abn": "91905419459",
                "pipNo": "1241414",
                "acirClinicCode": "1234",
                "acirCommunityCode": "12345",
                "status": "Active",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-02-13 05:10:09.088",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-02-13 05:10:09.088"
              },
              {
                "id": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630",
                "practiceName": "Dodo Medical",
                "mainPhone": 987654321,
                "addressLine1": "30 Grandis Road",
                "addressLine2": "Block 3",
                "postcode": "4000",
                "city": "Dondingalong",
                "stateCode": "NSW",
                "countryCode": "AU",
                "email": "test_practice@medirecords.com",
                "serviceTypeText": "Aged Care Facility",
                "primaryPractice": true,
                "fax": 491148299,
                "lspNo": "14",
                "abn": "91905419459",
                "pipNo": "1241414",
                "acirClinicCode": "1234",
                "acirCommunityCode": "12345",
                "status": "Active",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-02-13 05:10:09.088",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-02-13 05:10:09.088"
              }
            ],
            "first": true,
            "last": true,
            "totalPages": 1,
            "totalElements": 2,
            "numberOfElements": 2,
            "size": 2,
            "page": 0
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "SubSpeciality": {
        "title": "SubSpeciality",
        "type": "object",
        "properties": {
          "subSpecialityName": {
            "type": "string",
            "description": "Represents the sub speciality name.\n",
            "maxLength": 200,
            "example": "Workplace Wellbeing"
          }
        },
        "required": [
          "subSpecialityName"
        ],
        "x-examples": {
          "example": {
            "subSpecialityName": "Workplace Wellbeing"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "PracticeBiography": {
        "title": "PracticeBiographyObject",
        "type": "object",
        "x-examples": {
          "Full Practice Biography Response": {
            "id": "88b33b1a-a2b8-11e9-8fc8-c71be0152285",
            "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
            "biography": "test biography for Pearl Harbour Hospital",
            "communityList": true,
            "bulkBilling": true,
            "afterHours": true,
            "practiceWebsite": "www.practice.com",
            "subSpecialities": {
              "subSpecialityName": "Workplace Wellbeing"
            }
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Practice biograpy id .This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
            "format": "uuid",
            "example": "88b33b1a-a2b8-11e9-8fc8-c71be0152285"
          },
          "practiceId": {
            "type": "string",
            "format": "uuid",
            "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
            "description": "A GUID that reprsents the practice id "
          },
          "biography": {
            "type": "string",
            "description": "Represents the practice biography. This will be included in the practice profile in Medirecords app.",
            "example": "test biography for Pearl Harbour Hospital",
            "maxLength": 1000
          },
          "communityList": {
            "type": "boolean",
            "description": "Repesents the community and contact list. When this is set to true, the practice and user profiles are shared across the medirecords community and contact list and will also be included in the medirecords app."
          },
          "bulkBilling": {
            "type": "boolean",
            "description": "Represents the bulk billing service. If the practice offers bulk billing service, then this value is set to true."
          },
          "afterHours": {
            "type": "boolean",
            "description": "Represents the after hour service. If the practice offers after hours service (open before 8am or  after 6pm), then this value is set to true."
          },
          "practiceWebsite": {
            "type": "string",
            "description": "Represents the practice website url.",
            "example": "www.practice.com",
            "maxLength": 2000
          },
          "subSpecialities": {
            "title": "SubSpeciality",
            "type": "object",
            "properties": {
              "subSpecialityName": {
                "type": "string",
                "description": "Represents the sub speciality name.\n",
                "maxLength": 200,
                "example": "Workplace Wellbeing"
              }
            },
            "required": [
              "subSpecialityName"
            ],
            "x-examples": {
              "example": {
                "subSpecialityName": "Workplace Wellbeing"
              }
            },
            "x-tags": [
              "Other"
            ]
          }
        },
        "required": [
          "id",
          "practiceId",
          "biography"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "PracticeRoomObject": {
        "title": "PracticeRoomObject",
        "type": "object",
        "x-examples": {
          "Full Practice Room Response": {
            "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
            "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
            "roomName": "Langit Biru",
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-02-13 05:10:09.088",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "2019-02-13 05:10:09.088"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "room id .This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
            "example": "9ccc3c50-55ef-11eb-a494-6f52f912607e"
          },
          "practiceId": {
            "type": "string",
            "description": "A GUID that reprsents the practice id ",
            "format": "uuid",
            "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
          },
          "roomName": {
            "type": "string",
            "description": "Represents the practice room name.",
            "example": "Langit Biru",
            "maxLength": 100
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceId",
          "roomName"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "PracticeRoomPage": {
        "title": "PracticeRoomPage",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "PracticeRoomObject",
              "type": "object",
              "x-examples": {
                "Full Practice Room Response": {
                  "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
                  "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                  "roomName": "Langit Biru",
                  "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "createdDateTime": "2019-02-13 05:10:09.088",
                  "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "updatedDateTime": "2019-02-13 05:10:09.088"
                }
              },
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "room id .This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                  "example": "9ccc3c50-55ef-11eb-a494-6f52f912607e"
                },
                "practiceId": {
                  "type": "string",
                  "description": "A GUID that reprsents the practice id ",
                  "format": "uuid",
                  "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43"
                },
                "roomName": {
                  "type": "string",
                  "description": "Represents the practice room name.",
                  "example": "Langit Biru",
                  "maxLength": 100
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "required": [
                "id",
                "practiceId",
                "roomName"
              ],
              "x-tags": [
                "Other"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "number"
          },
          "totalElements": {
            "type": "number"
          },
          "numberOfElements": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "x-examples": {
          "Full Paged Practice Room Response": {
            "data": [
              {
                "id": "9ccc3c50-55ef-11eb-a494-6f52f912607e",
                "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                "roomName": "Langit Biru",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-02-13 05:10:09.088",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-02-14 05:10:09.088"
              },
              {
                "id": "ba4b4e20-88b9-11e8-9bbe-9369fe5be7f6",
                "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                "roomName": "Public Room",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-02-13 05:10:09.088",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-02-14 05:10:09.088"
              }
            ],
            "first": true,
            "last": true,
            "totalPages": 1,
            "totalElements": 2,
            "numberOfElements": 2,
            "size": 2,
            "page": 0
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "PracticeBiographyPage": {
        "title": "PracticeBiographyPage",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "PracticeBiographyObject",
              "type": "object",
              "x-examples": {
                "Full Practice Biography Response": {
                  "id": "88b33b1a-a2b8-11e9-8fc8-c71be0152285",
                  "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                  "biography": "test biography for Pearl Harbour Hospital",
                  "communityList": true,
                  "bulkBilling": true,
                  "afterHours": true,
                  "practiceWebsite": "www.practice.com",
                  "subSpecialities": {
                    "subSpecialityName": "Workplace Wellbeing"
                  }
                }
              },
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Practice biograpy id .This is a unique identifier for this resource . This is a mandatory field in case of a PUT/UPDATE,GETand DELETE operations",
                  "format": "uuid",
                  "example": "88b33b1a-a2b8-11e9-8fc8-c71be0152285"
                },
                "practiceId": {
                  "type": "string",
                  "format": "uuid",
                  "example": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                  "description": "A GUID that reprsents the practice id "
                },
                "biography": {
                  "type": "string",
                  "description": "Represents the practice biography. This will be included in the practice profile in Medirecords app.",
                  "example": "test biography for Pearl Harbour Hospital",
                  "maxLength": 1000
                },
                "communityList": {
                  "type": "boolean",
                  "description": "Repesents the community and contact list. When this is set to true, the practice and user profiles are shared across the medirecords community and contact list and will also be included in the medirecords app."
                },
                "bulkBilling": {
                  "type": "boolean",
                  "description": "Represents the bulk billing service. If the practice offers bulk billing service, then this value is set to true."
                },
                "afterHours": {
                  "type": "boolean",
                  "description": "Represents the after hour service. If the practice offers after hours service (open before 8am or  after 6pm), then this value is set to true."
                },
                "practiceWebsite": {
                  "type": "string",
                  "description": "Represents the practice website url.",
                  "example": "www.practice.com",
                  "maxLength": 2000
                },
                "subSpecialities": {
                  "title": "SubSpeciality",
                  "type": "object",
                  "properties": {
                    "subSpecialityName": {
                      "type": "string",
                      "description": "Represents the sub speciality name.\n",
                      "maxLength": 200,
                      "example": "Workplace Wellbeing"
                    }
                  },
                  "required": [
                    "subSpecialityName"
                  ],
                  "x-examples": {
                    "example": {
                      "subSpecialityName": "Workplace Wellbeing"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                }
              },
              "required": [
                "id",
                "practiceId",
                "biography"
              ],
              "x-tags": [
                "Other"
              ]
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "number"
          },
          "totalElements": {
            "type": "number"
          },
          "numberOfElements": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "x-examples": {
          "Full Paged Practice Biography Response": {
            "data": [
              {
                "id": "88b33b1a-a2b8-11e9-8fc8-c71be0152285",
                "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                "biography": "test biography for Pearl Harbour Hospital",
                "communityList": true,
                "bulkBilling": true,
                "afterHours": true,
                "practiceWebsite": "www.practice.com",
                "subSpecialities": {
                  "subSpecialityName": "Workplace Wellbeing"
                }
              },
              {
                "id": "499909b6-c9b6-11e5-80e2-afba8bd47e5d",
                "practiceId": "0c506efa-c9b6-11e5-bd95-33414b5372a6",
                "biography": "Allied Health Clinic",
                "communityList": true,
                "bulkBilling": true,
                "afterHours": true,
                "practiceWebsite": "www.allied-practice.com",
                "subSpecialities": {
                  "subSpecialityName": "Neurosurgery"
                }
              }
            ],
            "first": true,
            "last": true,
            "totalPages": 1,
            "totalElements": 2,
            "numberOfElements": 2,
            "size": 2,
            "page": 0
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "RegularSessionRequestType": {
        "title": "RegularSessionRequestType",
        "type": "object",
        "description": "Update regular session request model",
        "x-internal": false,
        "properties": {
          "calendar": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
          },
          "userId": {
            "type": "string",
            "description": "A GUID represents the practitioner ID.",
            "format": "uuid",
            "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
          },
          "sessionName": {
            "type": "string",
            "description": "The session name.",
            "example": "Regular session"
          },
          "dayOfWeek": {
            "type": "integer",
            "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
            "example": 1,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ]
          },
          "cycleWeek": {
            "type": "integer",
            "description": "The cycle week.",
            "example": 1
          },
          "cycleNoOfWeeks": {
            "type": "integer",
            "description": "The cycle number of week.",
            "example": 1
          },
          "cycleStartDate": {
            "type": "string",
            "description": "The cycle start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "startDate": {
            "type": "string",
            "description": "The session start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The session start time with format `HH:MM`",
            "example": "08:00"
          },
          "endDate": {
            "type": "string",
            "description": "The session end date with format `YYYY-MM-DD`",
            "example": "2026-08-18",
            "format": "date"
          },
          "endTime": {
            "type": "string",
            "description": "The session end time with format `HH:MM`",
            "example": "18:00"
          },
          "colorCode": {
            "type": "string",
            "description": "The session color code in hexadecimal.",
            "example": "#ff0000"
          },
          "excludedTypes": {
            "type": "array",
            "description": "The list of excluded appointment type id.",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A GUID represents the appointment type ID.",
                  "format": "uuid",
                  "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                }
              }
            }
          }
        },
        "required": [
          "calendar",
          "userId",
          "sessionName",
          "startDate",
          "startTime",
          "endDate",
          "endTime"
        ]
      },
      "RegularSessionResponseType": {
        "title": "RegularSessionResponseType",
        "type": "object",
        "description": "Regular session response model",
        "properties": {
          "id": {
            "type": "string",
            "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
            "format": "uuid",
            "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
          },
          "practiceId": {
            "type": "string",
            "description": "A GUID represents the practice ID.",
            "format": "uuid",
            "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
          },
          "calendar": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
          },
          "userId": {
            "type": "string",
            "description": "A GUID represents the practitioner ID.",
            "format": "uuid",
            "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
          },
          "sessionName": {
            "type": "string",
            "description": "The session name.",
            "example": "Regular session"
          },
          "dayOfWeek": {
            "type": "integer",
            "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
            "example": 1,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ]
          },
          "cycleWeek": {
            "type": "integer",
            "description": "The cycle week.",
            "example": 1
          },
          "cycleNoOfWeeks": {
            "type": "integer",
            "description": "The cycle number of week.",
            "example": 1
          },
          "cycleStartDate": {
            "type": "string",
            "description": "The cycle start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "startDate": {
            "type": "string",
            "description": "The session start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The session start time with format `HH:MM`",
            "example": "08:00"
          },
          "endDate": {
            "type": "string",
            "description": "The session end date with format `YYYY-MM-DD`",
            "example": "2026-08-18",
            "format": "date"
          },
          "endTime": {
            "type": "string",
            "description": "The session end time with format `HH:MM`",
            "example": "18:00"
          },
          "colorCode": {
            "type": "string",
            "description": "The session color code in hexadecimal.",
            "example": "#ff0000"
          },
          "excludedTypes": {
            "type": "array",
            "description": "The list of excluded appointment type id.",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A GUID represents the appointment type ID.",
                  "format": "uuid",
                  "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                }
              }
            }
          },
          "userName": {
            "type": "string",
            "description": "The practitioner name.",
            "example": "Mr John Smith"
          },
          "dayOfWeekName": {
            "type": "string",
            "description": "The name of day of week.",
            "example": "Sunday"
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceId",
          "calendar",
          "userId",
          "sessionName"
        ],
        "x-internal": false
      },
      "RegularSessionResponseTypeBundle": {
        "title": "RegularSessionResponseTypeBundle",
        "type": "object",
        "properties": {
          "data": {
            "title": "RegularSessionResponseType",
            "type": "object",
            "description": "Regular session response model",
            "properties": {
              "id": {
                "type": "string",
                "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                "format": "uuid",
                "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
              },
              "practiceId": {
                "type": "string",
                "description": "A GUID represents the practice ID.",
                "format": "uuid",
                "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
              },
              "calendar": {
                "type": "integer",
                "enum": [
                  1,
                  2
                ],
                "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
              },
              "userId": {
                "type": "string",
                "description": "A GUID represents the practitioner ID.",
                "format": "uuid",
                "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
              },
              "sessionName": {
                "type": "string",
                "description": "The session name.",
                "example": "Regular session"
              },
              "dayOfWeek": {
                "type": "integer",
                "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
                "example": 1,
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8
                ]
              },
              "cycleWeek": {
                "type": "integer",
                "description": "The cycle week.",
                "example": 1
              },
              "cycleNoOfWeeks": {
                "type": "integer",
                "description": "The cycle number of week.",
                "example": 1
              },
              "cycleStartDate": {
                "type": "string",
                "description": "The cycle start date with format `YYYY-MM-DD`",
                "example": "2021-08-18",
                "format": "date"
              },
              "startDate": {
                "type": "string",
                "description": "The session start date with format `YYYY-MM-DD`",
                "example": "2021-08-18",
                "format": "date"
              },
              "startTime": {
                "type": "string",
                "description": "The session start time with format `HH:MM`",
                "example": "08:00"
              },
              "endDate": {
                "type": "string",
                "description": "The session end date with format `YYYY-MM-DD`",
                "example": "2026-08-18",
                "format": "date"
              },
              "endTime": {
                "type": "string",
                "description": "The session end time with format `HH:MM`",
                "example": "18:00"
              },
              "colorCode": {
                "type": "string",
                "description": "The session color code in hexadecimal.",
                "example": "#ff0000"
              },
              "excludedTypes": {
                "type": "array",
                "description": "The list of excluded appointment type id.",
                "nullable": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A GUID represents the appointment type ID.",
                      "format": "uuid",
                      "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                    }
                  }
                }
              },
              "userName": {
                "type": "string",
                "description": "The practitioner name.",
                "example": "Mr John Smith"
              },
              "dayOfWeekName": {
                "type": "string",
                "description": "The name of day of week.",
                "example": "Sunday"
              },
              "createdBy": {
                "type": "string",
                "title": "CreatedBy",
                "description": "A GUID refers to User identifier who created the resource.",
                "x-examples": {
                  "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                },
                "default": "UUID",
                "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "x-internal": false
              },
              "createdDateTime": {
                "type": "string",
                "title": "CreatedDate",
                "description": "Time when the resource was created.",
                "x-internal": false
              },
              "updatedBy": {
                "type": "string",
                "title": "UpdatedBy",
                "description": "A GUID refers to User identifier who updated the resource.",
                "default": "UUID",
                "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "x-internal": false
              },
              "updatedDateTime": {
                "title": "UpdatedDate",
                "type": "string",
                "description": "Time when the resource was updated.",
                "x-internal": false
              }
            },
            "required": [
              "id",
              "practiceId",
              "calendar",
              "userId",
              "sessionName"
            ],
            "x-internal": false
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer"
          },
          "totalElements": {
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          }
        },
        "x-internal": false
      },
      "AvailableSessionResponseType": {
        "title": "AvailableSessionResponseType",
        "type": "object",
        "description": "Available session response model",
        "properties": {
          "id": {
            "type": "string",
            "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
            "format": "uuid",
            "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
          },
          "practiceId": {
            "type": "string",
            "description": "A GUID represents the practice ID.",
            "format": "uuid",
            "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
          },
          "calendar": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "The selected calendar.\n\n`1`=Practice\n`2`=Community"
          },
          "userId": {
            "type": "string",
            "description": "A GUID represents the practitioner ID.",
            "format": "uuid",
            "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
          },
          "sessionName": {
            "type": "string",
            "description": "The session name.",
            "example": "Regular session"
          },
          "dayOfWeek": {
            "type": "integer",
            "description": "The selected day of week.\n\n`1`=Sunday\n`2`=Monday\n`3`=Tuesday\n`4`=Wednesday\n`5`=Thursday\n`6`=Friday\n`7`=Saturday\n`8`=Mon-Sat",
            "example": 1,
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ]
          },
          "cycleWeek": {
            "type": "integer",
            "description": "The cycle week.",
            "example": 1
          },
          "cycleNoOfWeeks": {
            "type": "integer",
            "description": "The cycle number of week.",
            "example": 1
          },
          "cycleStartDate": {
            "type": "string",
            "description": "The cycle start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "startDate": {
            "type": "string",
            "description": "The session start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The session start time with format `HH:MM`",
            "example": "08:00"
          },
          "endDate": {
            "type": "string",
            "description": "The session end date with format `YYYY-MM-DD`",
            "example": "2026-08-18",
            "format": "date"
          },
          "endTime": {
            "type": "string",
            "description": "The session end time with format `HH:MM`",
            "example": "18:00"
          },
          "colorCode": {
            "type": "string",
            "description": "The session color code in hexadecimal.",
            "example": "#ff0000"
          },
          "excludedTypes": {
            "type": "array",
            "description": "The list of excluded appointment type id.",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A GUID represents the appointment type ID.",
                  "format": "uuid",
                  "example": "48ebeb92-c5de-11e8-b518-7b792dd3467c"
                }
              }
            }
          },
          "userName": {
            "type": "string",
            "description": "The practitioner name.",
            "example": "Mr John Smith"
          },
          "dayOfWeekName": {
            "type": "string",
            "description": "The name of day of week.",
            "example": "Sunday"
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceId",
          "calendar",
          "userId",
          "sessionName"
        ],
        "x-internal": false
      },
      "HolidaySessionRequestType": {
        "title": "HolidaySessionRequestType",
        "type": "object",
        "description": "Update holiday session request model",
        "x-internal": false,
        "properties": {
          "userId": {
            "type": "string",
            "description": "A GUID represents the practitioner ID.",
            "format": "uuid",
            "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
          },
          "sessionName": {
            "type": "string",
            "description": "The session name.",
            "example": "Holiday session"
          },
          "startDate": {
            "type": "string",
            "description": "The session start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The session end date with format `YYYY-MM-DD`",
            "example": "2026-08-18",
            "format": "date"
          }
        },
        "required": [
          "userId",
          "sessionName",
          "startDate",
          "endDate"
        ]
      },
      "HolidaySessionResponseType": {
        "title": "HolidaySessionResponseType",
        "type": "object",
        "description": "Holiday session response model",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
            "format": "uuid",
            "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
          },
          "practiceId": {
            "type": "string",
            "description": "A GUID represents the practice ID.",
            "format": "uuid",
            "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
          },
          "userId": {
            "type": "string",
            "description": "A GUID represents the practitioner ID.",
            "format": "uuid",
            "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
          },
          "sessionName": {
            "type": "string",
            "description": "The session name.",
            "example": "Holiday session"
          },
          "startDate": {
            "type": "string",
            "description": "The session start date with format `YYYY-MM-DD`",
            "example": "2021-08-18",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The session end date with format `YYYY-MM-DD`",
            "example": "2026-08-18",
            "format": "date"
          },
          "userName": {
            "type": "string",
            "description": "The practitioner name.",
            "example": "Mr John Smith"
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "required": [
          "id",
          "practiceId",
          "userId",
          "sessionName"
        ]
      },
      "HolidaySessionResponseTypeBundle": {
        "title": "HolidaySessionResponseTypeBundle",
        "type": "object",
        "properties": {
          "data": {
            "title": "HolidaySessionResponseType",
            "type": "object",
            "description": "Holiday session response model",
            "x-internal": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "A GUID represents the session ID. This is a unique identifier for this resource.",
                "format": "uuid",
                "example": "01e608e4-c5d0-11e8-b262-377cdf40a37d"
              },
              "practiceId": {
                "type": "string",
                "description": "A GUID represents the practice ID.",
                "format": "uuid",
                "example": "05a3f314-5964-4ccb-8e7f-d35db22c15be"
              },
              "userId": {
                "type": "string",
                "description": "A GUID represents the practitioner ID.",
                "format": "uuid",
                "example": "3e74c2e6-c5d5-11e8-8d9f-f35ce2fa4214"
              },
              "sessionName": {
                "type": "string",
                "description": "The session name.",
                "example": "Holiday session"
              },
              "startDate": {
                "type": "string",
                "description": "The session start date with format `YYYY-MM-DD`",
                "example": "2021-08-18",
                "format": "date"
              },
              "endDate": {
                "type": "string",
                "description": "The session end date with format `YYYY-MM-DD`",
                "example": "2026-08-18",
                "format": "date"
              },
              "userName": {
                "type": "string",
                "description": "The practitioner name.",
                "example": "Mr John Smith"
              },
              "createdBy": {
                "type": "string",
                "title": "CreatedBy",
                "description": "A GUID refers to User identifier who created the resource.",
                "x-examples": {
                  "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                },
                "default": "UUID",
                "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "x-internal": false
              },
              "createdDateTime": {
                "type": "string",
                "title": "CreatedDate",
                "description": "Time when the resource was created.",
                "x-internal": false
              },
              "updatedBy": {
                "type": "string",
                "title": "UpdatedBy",
                "description": "A GUID refers to User identifier who updated the resource.",
                "default": "UUID",
                "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "x-internal": false
              },
              "updatedDateTime": {
                "title": "UpdatedDate",
                "type": "string",
                "description": "Time when the resource was updated.",
                "x-internal": false
              }
            },
            "required": [
              "id",
              "practiceId",
              "userId",
              "sessionName"
            ]
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer"
          },
          "totalElements": {
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          }
        },
        "x-internal": false
      },
      "Tag": {
        "title": "Tag",
        "type": "object",
        "description": "A model of Tag",
        "properties": {
          "id": {
            "type": "string",
            "description": "A GUID for tag identifier. It has unique value for identify this resource and it is mandatory",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Represents tag name. It has limit for no more than 40 characters, can not use space between each words and it is mandatory",
            "pattern": "^[a-zA-Z0-9]+$",
            "maxLength": 40
          },
          "parentTagId": {
            "type": [
              "string"
            ],
            "maxLength": 36,
            "description": "A GUID to represents parent tag identifier, it is taken from the parent tag to identify whether this resource has parents or not. It has unique value"
          },
          "code": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "description": "Represents tag code. It has limit for no more than 50 characters, can not use space between each words",
            "pattern": "^[a-zA-Z0-9]+$"
          },
          "colour": {
            "type": "string",
            "pattern": "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
            "maxLength": 7,
            "default": "#000000",
            "description": "Represents tag colour in hex code format. It is mandatory and need to be filled with hex code pattern, for example `#000` or `#000000`. It has default value to `#000000`"
          },
          "description": {
            "type": [
              "string"
            ],
            "maxLength": 500,
            "description": "Represents tag description. It can be filled with long string and has limit for no more than 500 characters"
          },
          "used": {
            "type": "boolean",
            "description": "A flag that signifies whether the tag has been linked to any entities"
          },
          "createdBy": {
            "type": "string",
            "description": "A GUID refers to User identifier who created the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
          },
          "createdDateTime": {
            "type": "string",
            "description": "Time when the resource was created. See [Timezone](../../#Timezones) for the format"
          },
          "updatedBy": {
            "type": "string",
            "description": "A GUID refers to User identifier who updated the resource. see [Resource Identifier](../../#Resource-Identifier) format.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70"
          },
          "updatedDateTime": {
            "type": "string",
            "description": "Time when the resource was updated. See [Timezone](../../#Timezones) for the format"
          }
        },
        "required": [
          "name",
          "colour",
          "used",
          "createdBy",
          "createdDateTime",
          "updatedBy",
          "updatedDateTime"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "TagId": {
        "type": "string",
        "title": "TagId",
        "maxLength": 36,
        "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
        "format": "uuid",
        "x-examples": {
          "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
        },
        "x-tags": [
          "Other"
        ]
      },
      "EntityId": {
        "type": "string",
        "title": "EntityId",
        "maxLength": 36,
        "description": "A globally unique identifier (GUID) for an entity being linked to a tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
        "format": "uuid",
        "x-examples": {
          "example-1": "6e0a119d-04ee-4bad-b848-5371638d6450"
        },
        "x-tags": [
          "Other"
        ]
      },
      "EntityType": {
        "title": "EntityType",
        "type": "number",
        "description": "A type identifier for an entity being linked to a tag. This a mandatory field.",
        "x-examples": {
          "example-1": 1
        },
        "x-tags": [
          "Other"
        ]
      },
      "TagEntity": {
        "title": "TagEntity",
        "type": "object",
        "description": "A model representing a relationship between a tag and an entity.",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "description": "A globally unique identifier (GUID) for tag record. This field has maximum limit of no more than 36 characters, and is mandatory field.",
            "example": "2b0f7904-3bee-4214-89a4-a5b682e6204b",
            "format": "uuid"
          },
          "tagId": {
            "type": "string",
            "title": "TagId",
            "maxLength": 36,
            "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
            "format": "uuid",
            "x-examples": {
              "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
            },
            "x-tags": [
              "Other"
            ]
          },
          "entityId": {
            "type": "string",
            "title": "EntityId",
            "maxLength": 36,
            "description": "A globally unique identifier (GUID) for an entity being linked to a tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
            "format": "uuid",
            "x-examples": {
              "example-1": "6e0a119d-04ee-4bad-b848-5371638d6450"
            },
            "x-tags": [
              "Other"
            ]
          },
          "entityType": {
            "title": "EntityType",
            "type": "number",
            "description": "A type identifier for an entity being linked to a tag. This a mandatory field.",
            "x-examples": {
              "example-1": 1
            },
            "x-tags": [
              "Other"
            ]
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDateTime",
            "description": "A date and time for when the resource is created. This a mandatory field.",
            "format": "date-time",
            "x-examples": {
              "example-1": "2018-08-30 05:26:16.338"
            },
            "x-tags": [
              "Other"
            ]
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A globally unique identifier (GUID) for the user who created the resource. This a mandatory field.",
            "format": "uuid",
            "x-examples": {
              "example-1": "3eafe8b8-5a60-4019-acdf-50397a220dfe"
            },
            "x-tags": [
              "Other"
            ]
          },
          "updatedDateTime": {
            "type": "string",
            "title": "UpdatedDateTime",
            "description": "A date and time for when the resource is last updated. This a mandatory field.",
            "format": "date-time",
            "x-examples": {
              "example-1": "2018-08-30 05:26:16.338"
            },
            "x-tags": [
              "Other"
            ]
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A globally unique identifier (GUID) for the user who updated the resource. This a mandatory field.",
            "format": "uuid",
            "x-examples": {
              "example-1": "75f87ad1-d7be-47df-a3a3-b4e591abb0b3"
            },
            "x-tags": [
              "Other"
            ]
          }
        },
        "required": [
          "id",
          "tagId",
          "entityId",
          "entityType",
          "createdDateTime",
          "createdBy",
          "updatedDateTime",
          "updatedBy"
        ],
        "x-examples": {
          "example-1": {
            "id": "2b0f7904-3bee-4214-89a4-a5b682e6204b",
            "tagId": "eab7aa24-56f0-11eb-9499-0b1199252fc0",
            "entityId": "6e0a119d-04ee-4bad-b848-5371638d6450",
            "entityType": 1,
            "createdDateTime": "2018-08-30 05:26:16.338",
            "createdBy": "3eafe8b8-5a60-4019-acdf-50397a220dfe",
            "updatedDateTime": "2018-08-30 05:26:16.338",
            "updatedBy": "75f87ad1-d7be-47df-a3a3-b4e591abb0b3"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "ErrorAttribute": {
        "type": "object",
        "properties": {
          "parameter": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "parameter",
          "value",
          "message"
        ],
        "x-examples": {
          "example-1": {
            "parameter": "string",
            "value": "string",
            "message": "string"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "CreatedBy": {
        "type": "string",
        "title": "CreatedBy",
        "description": "A globally unique identifier (GUID) for the user who created the resource. This a mandatory field.",
        "format": "uuid",
        "x-examples": {
          "example-1": "3eafe8b8-5a60-4019-acdf-50397a220dfe"
        },
        "x-tags": [
          "Other"
        ]
      },
      "CreatedDateTime": {
        "type": "string",
        "title": "CreatedDateTime",
        "description": "A date and time for when the resource is created. This a mandatory field.",
        "format": "date-time",
        "x-examples": {
          "example-1": "2018-08-30 05:26:16.338"
        },
        "x-tags": [
          "Other"
        ]
      },
      "UpdatedBy": {
        "type": "string",
        "title": "UpdatedBy",
        "description": "A globally unique identifier (GUID) for the user who updated the resource. This a mandatory field.",
        "format": "uuid",
        "x-examples": {
          "example-1": "75f87ad1-d7be-47df-a3a3-b4e591abb0b3"
        },
        "x-tags": [
          "Other"
        ]
      },
      "UpdatedDateTime": {
        "type": "string",
        "title": "UpdatedDateTime",
        "description": "A date and time for when the resource is last updated. This a mandatory field.",
        "format": "date-time",
        "x-examples": {
          "example-1": "2018-08-30 05:26:16.338"
        },
        "x-tags": [
          "Other"
        ]
      },
      "TagEntityResult": {
        "title": "TagEntityResult",
        "type": "object",
        "properties": {
          "patients": {
            "title": "PatientPage",
            "type": "object",
            "x-examples": {
              "Full Response with pagination": {
                "data": [
                  {
                    "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                    "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                    "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                    "titleId": 315890000,
                    "firstName": "Timothy",
                    "lastName": "Mark",
                    "middleName": "David",
                    "preferredName": "Tim",
                    "previouslyKnownAs": "Jake",
                    "fullName": "Timothy Mark",
                    "genderCode": 2,
                    "dob": "1970-12-08",
                    "estimated": true,
                    "oneNameOnly": "false",
                    "dateOfDeath": "12/01/2010",
                    "causeOfDeath": "Cancer",
                    "patientStatusCode": 2,
                    "ethnicityCode": 55,
                    "esl": true,
                    "atsiId": 4,
                    "ctgCoPaymentRelief": true,
                    "placeOfBirth": "Sydney",
                    "skinCode": 16,
                    "languageSpokenAtHome": 0,
                    "homePhone": 298761234,
                    "mobilePhone": "0413324123",
                    "workPhone": 298671234,
                    "email": "Timothy.Mark@nedirecords.com",
                    "contactMethod": 1,
                    "note": "Patient had a mild fever",
                    "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                    "createdDateTime": "2019-08-24T14:15:22Z",
                    "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                    "updatedDateTime": "2019-08-24T14:15:22Z"
                  }
                ],
                "first": true,
                "last": false,
                "totalPages": 3,
                "totalElements": 29,
                "numberOfElements": 10,
                "size": 10,
                "page": 0
              }
            },
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "title": "PatientResponse",
                  "description": "The Patient Response properties that are included for a patient",
                  "type": "object",
                  "x-examples": {
                    "Full Patient Response": {
                      "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "titleCode": 315890000,
                      "firstName": "Timothy",
                      "lastName": "Mark",
                      "middleName": "David",
                      "preferredName": "Tim",
                      "previouslyKnownAs": "Jake",
                      "fullName": "Timothy Mark",
                      "gender": 2,
                      "dob": "1970-12-12",
                      "estimated": true,
                      "oneNameOnly": "false",
                      "dateOfDeath": "2018-03-04",
                      "causeOfDeath": "Cancer",
                      "patientStatusCode": 2,
                      "ethnicityCode": 55,
                      "englishAsSecondLanguage": true,
                      "atsi": 1,
                      "ctgCoPaymentRelief": true,
                      "placeOfBirth": "Sydney",
                      "skinCode": 16,
                      "languageSpokenAtHome": 1,
                      "homePhone": 298761234,
                      "mobilePhone": "0413324123",
                      "workPhone": 298671234,
                      "email": "Timothy.Mark@nedirecords.com",
                      "contactMethod": 1,
                      "notes": "Patient had a mild fever",
                      "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  },
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                      "format": "uuid",
                      "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                    },
                    "defaultPracticeId": {
                      "type": "string",
                      "description": "Default practice id where the patient details are created",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                      "format": "uuid",
                      "nullable": true
                    },
                    "usualDoctorId": {
                      "type": "string",
                      "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                      "description": "A user id that represents the usual doctor for the patient",
                      "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                      "format": "uuid",
                      "nullable": true
                    },
                    "titleCode": {
                      "type": "integer",
                      "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                      "example": 315890000
                    },
                    "firstName": {
                      "type": "string",
                      "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Timothy",
                      "nullable": true
                    },
                    "lastName": {
                      "type": "string",
                      "description": "Represents patient last name",
                      "minLength": 1,
                      "maxLength": 40,
                      "example": "Mark"
                    },
                    "middleName": {
                      "type": "string",
                      "description": "Represents the patient middle name",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "David",
                      "nullable": true
                    },
                    "preferredName": {
                      "type": "string",
                      "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                      "minLength": 0,
                      "maxLength": 40,
                      "example": "Tim",
                      "nullable": true
                    },
                    "previouslyKnownAs": {
                      "type": "string",
                      "description": "Represents the patient previously known name",
                      "maxLength": 40,
                      "example": "Jake",
                      "minLength": 0,
                      "nullable": true
                    },
                    "fullName": {
                      "type": "string",
                      "description": "Represents the patient full name",
                      "nullable": true
                    },
                    "gender": {
                      "type": "integer",
                      "title": "Gender",
                      "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                      "default": 0,
                      "example": 2,
                      "x-examples": {
                        "Male": 2
                      },
                      "x-internal": false
                    },
                    "dob": {
                      "type": "string",
                      "title": "DateOfBirth",
                      "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                      "format": "date",
                      "default": "1970-01-10",
                      "example": "1970-01-10",
                      "x-examples": {
                        "Date of Birth": "1970-01-10"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "estimated": {
                      "type": "boolean",
                      "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                      "nullable": true
                    },
                    "oneNameOnly": {
                      "type": "boolean",
                      "example": false,
                      "description": "The flag is set to true, if the patient has one name only",
                      "nullable": true
                    },
                    "dateOfDeath": {
                      "type": "string",
                      "nullable": true,
                      "title": "DateOfDeath",
                      "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                      "default": "yyyy-MM-dd",
                      "example": "2018-12-01",
                      "x-examples": {
                        "Date Of Death Format": "2018-12-01"
                      },
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "causeOfDeath": {
                      "type": "string",
                      "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                      "example": "Cancer",
                      "maxLength": 300,
                      "nullable": true
                    },
                    "patientStatusCode": {
                      "type": "integer",
                      "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                      "example": 2,
                      "nullable": true
                    },
                    "ethnicityCode": {
                      "type": "integer",
                      "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                      "example": 55,
                      "nullable": true
                    },
                    "englishAsSecondLanguage": {
                      "type": "boolean",
                      "description": "If english is the patient second language the flag is set as true else it is set to false",
                      "nullable": true
                    },
                    "atsiStatus": {
                      "type": "integer",
                      "title": "Atsi",
                      "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                      "example": 4,
                      "nullable": true,
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "ctgCoPaymentRelief": {
                      "type": "boolean",
                      "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "nullable": true
                    },
                    "placeOfBirth": {
                      "type": "string",
                      "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": "Sydney",
                      "maxLength": 100,
                      "nullable": true
                    },
                    "skinCode": {
                      "type": "integer",
                      "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "example": 16,
                      "nullable": true
                    },
                    "languageSpokenAtHome": {
                      "title": "LanguageSpokenAtHome",
                      "type": "integer",
                      "nullable": true,
                      "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                      "x-examples": {
                        "example-1": 1
                      },
                      "x-internal": false
                    },
                    "homePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "HomePhone",
                      "x-examples": {
                        "HomePhone Number": "0298761234"
                      },
                      "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "maxLength": 10,
                      "example": "0298761234",
                      "x-internal": false,
                      "minLength": 8
                    },
                    "mobilePhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "MobilePhone",
                      "x-examples": {
                        "MobileNumber": "0413324123"
                      },
                      "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0413324123",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "workPhone": {
                      "type": "string",
                      "nullable": true,
                      "title": "OfficePhone",
                      "x-examples": {
                        "OfficePhoneNumber": "0298671234"
                      },
                      "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                      "x-tags": [
                        "Common Models"
                      ],
                      "example": "0298671234",
                      "maxLength": 10,
                      "x-internal": false,
                      "minLength": 8
                    },
                    "email": {
                      "type": "string",
                      "nullable": true,
                      "title": "Email",
                      "description": "Represents the patient email id.",
                      "x-examples": {
                        "Email": "Timothy.Mark@nedirecords.com"
                      },
                      "x-tags": [
                        "Common Models"
                      ],
                      "format": "email",
                      "example": "Timothy.Mark@nedirecords.com",
                      "maxLength": 100,
                      "x-internal": false
                    },
                    "contactMethod": {
                      "title": "PatientContactMethod",
                      "type": "number",
                      "nullable": true,
                      "x-examples": {
                        "example-1": 1
                      },
                      "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                      "x-tags": [
                        "Other"
                      ]
                    },
                    "notes": {
                      "type": "string",
                      "description": "Any comments or notes can be recorded in this field",
                      "maxLength": 500,
                      "example": "Patient had a mild fever",
                      "nullable": true
                    },
                    "createdBy": {
                      "type": "string",
                      "title": "CreatedBy",
                      "description": "A GUID refers to User identifier who created the resource.",
                      "x-examples": {
                        "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                      },
                      "default": "UUID",
                      "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                      "x-internal": false
                    },
                    "createdDateTime": {
                      "type": "string",
                      "title": "CreatedDate",
                      "description": "Time when the resource was created.",
                      "x-internal": false
                    },
                    "updatedBy": {
                      "type": "string",
                      "title": "UpdatedBy",
                      "description": "A GUID refers to User identifier who updated the resource.",
                      "default": "UUID",
                      "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                      "x-internal": false
                    },
                    "updatedDateTime": {
                      "title": "UpdatedDate",
                      "type": "string",
                      "description": "Time when the resource was updated.",
                      "x-internal": false
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                }
              },
              "first": {
                "type": "boolean",
                "description": "Showing the first page."
              },
              "last": {
                "type": "boolean",
                "description": "Showing the last page."
              },
              "totalPages": {
                "type": "integer",
                "description": "Total Pages"
              },
              "totalElements": {
                "description": "Total records",
                "type": "integer"
              },
              "numberOfElements": {
                "type": "integer",
                "description": "Total records"
              },
              "size": {
                "description": "Number of records in a page",
                "type": "integer"
              },
              "page": {
                "type": "integer",
                "description": "current page number"
              }
            },
            "x-tags": [
              "Other"
            ]
          },
          "appointments": {
            "type": "object"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "PatientPage1": {
        "title": "PatientPage",
        "type": "object",
        "x-examples": {
          "Full Response with pagination": {
            "data": [
              {
                "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                "titleId": 315890000,
                "firstName": "Timothy",
                "lastName": "Mark",
                "middleName": "David",
                "preferredName": "Tim",
                "previouslyKnownAs": "Jake",
                "fullName": "Timothy Mark",
                "genderCode": 2,
                "dob": "1970-12-08",
                "estimated": true,
                "oneNameOnly": "false",
                "dateOfDeath": "12/01/2010",
                "causeOfDeath": "Cancer",
                "patientStatusCode": 2,
                "ethnicityCode": 55,
                "esl": true,
                "atsiId": 4,
                "ctgCoPaymentRelief": true,
                "placeOfBirth": "Sydney",
                "skinCode": 16,
                "languageSpokenAtHome": 0,
                "homePhone": 298761234,
                "mobilePhone": "0413324123",
                "workPhone": 298671234,
                "email": "Timothy.Mark@nedirecords.com",
                "contactMethod": 1,
                "note": "Patient had a mild fever",
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-08-24T14:15:22Z"
              }
            ],
            "first": true,
            "last": false,
            "totalPages": 3,
            "totalElements": 29,
            "numberOfElements": 10,
            "size": 10,
            "page": 0
          }
        },
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "PatientResponse",
              "description": "The Patient Response properties that are included for a patient",
              "type": "object",
              "x-examples": {
                "Full Patient Response": {
                  "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "titleCode": 315890000,
                  "firstName": "Timothy",
                  "lastName": "Mark",
                  "middleName": "David",
                  "preferredName": "Tim",
                  "previouslyKnownAs": "Jake",
                  "fullName": "Timothy Mark",
                  "gender": 2,
                  "dob": "1970-12-12",
                  "estimated": true,
                  "oneNameOnly": "false",
                  "dateOfDeath": "2018-03-04",
                  "causeOfDeath": "Cancer",
                  "patientStatusCode": 2,
                  "ethnicityCode": 55,
                  "englishAsSecondLanguage": true,
                  "atsi": 1,
                  "ctgCoPaymentRelief": true,
                  "placeOfBirth": "Sydney",
                  "skinCode": 16,
                  "languageSpokenAtHome": 1,
                  "homePhone": 298761234,
                  "mobilePhone": "0413324123",
                  "workPhone": 298671234,
                  "email": "Timothy.Mark@nedirecords.com",
                  "contactMethod": 1,
                  "notes": "Patient had a mild fever",
                  "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "createdDateTime": "2019-08-24T14:15:22Z",
                  "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "updatedDateTime": "2019-08-24T14:15:22Z"
                }
              },
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                  "format": "uuid",
                  "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                },
                "defaultPracticeId": {
                  "type": "string",
                  "description": "Default practice id where the patient details are created",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                  "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "format": "uuid",
                  "nullable": true
                },
                "usualDoctorId": {
                  "type": "string",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                  "description": "A user id that represents the usual doctor for the patient",
                  "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "format": "uuid",
                  "nullable": true
                },
                "titleCode": {
                  "type": "integer",
                  "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                  "example": 315890000
                },
                "firstName": {
                  "type": "string",
                  "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                  "minLength": 1,
                  "maxLength": 40,
                  "example": "Timothy",
                  "nullable": true
                },
                "lastName": {
                  "type": "string",
                  "description": "Represents patient last name",
                  "minLength": 1,
                  "maxLength": 40,
                  "example": "Mark"
                },
                "middleName": {
                  "type": "string",
                  "description": "Represents the patient middle name",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "David",
                  "nullable": true
                },
                "preferredName": {
                  "type": "string",
                  "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "Tim",
                  "nullable": true
                },
                "previouslyKnownAs": {
                  "type": "string",
                  "description": "Represents the patient previously known name",
                  "maxLength": 40,
                  "example": "Jake",
                  "minLength": 0,
                  "nullable": true
                },
                "fullName": {
                  "type": "string",
                  "description": "Represents the patient full name",
                  "nullable": true
                },
                "gender": {
                  "type": "integer",
                  "title": "Gender",
                  "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                  "default": 0,
                  "example": 2,
                  "x-examples": {
                    "Male": 2
                  },
                  "x-internal": false
                },
                "dob": {
                  "type": "string",
                  "title": "DateOfBirth",
                  "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                  "format": "date",
                  "default": "1970-01-10",
                  "example": "1970-01-10",
                  "x-examples": {
                    "Date of Birth": "1970-01-10"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "estimated": {
                  "type": "boolean",
                  "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                  "nullable": true
                },
                "oneNameOnly": {
                  "type": "boolean",
                  "example": false,
                  "description": "The flag is set to true, if the patient has one name only",
                  "nullable": true
                },
                "dateOfDeath": {
                  "type": "string",
                  "nullable": true,
                  "title": "DateOfDeath",
                  "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                  "default": "yyyy-MM-dd",
                  "example": "2018-12-01",
                  "x-examples": {
                    "Date Of Death Format": "2018-12-01"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "causeOfDeath": {
                  "type": "string",
                  "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                  "example": "Cancer",
                  "maxLength": 300,
                  "nullable": true
                },
                "patientStatusCode": {
                  "type": "integer",
                  "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                  "example": 2,
                  "nullable": true
                },
                "ethnicityCode": {
                  "type": "integer",
                  "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                  "example": 55,
                  "nullable": true
                },
                "englishAsSecondLanguage": {
                  "type": "boolean",
                  "description": "If english is the patient second language the flag is set as true else it is set to false",
                  "nullable": true
                },
                "atsiStatus": {
                  "type": "integer",
                  "title": "Atsi",
                  "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                  "example": 4,
                  "nullable": true,
                  "x-tags": [
                    "Other"
                  ]
                },
                "ctgCoPaymentRelief": {
                  "type": "boolean",
                  "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "nullable": true
                },
                "placeOfBirth": {
                  "type": "string",
                  "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "example": "Sydney",
                  "maxLength": 100,
                  "nullable": true
                },
                "skinCode": {
                  "type": "integer",
                  "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "example": 16,
                  "nullable": true
                },
                "languageSpokenAtHome": {
                  "title": "LanguageSpokenAtHome",
                  "type": "integer",
                  "nullable": true,
                  "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "x-examples": {
                    "example-1": 1
                  },
                  "x-internal": false
                },
                "homePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "HomePhone",
                  "x-examples": {
                    "HomePhone Number": "0298761234"
                  },
                  "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "maxLength": 10,
                  "example": "0298761234",
                  "x-internal": false,
                  "minLength": 8
                },
                "mobilePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "MobilePhone",
                  "x-examples": {
                    "MobileNumber": "0413324123"
                  },
                  "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0413324123",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "workPhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "OfficePhone",
                  "x-examples": {
                    "OfficePhoneNumber": "0298671234"
                  },
                  "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0298671234",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "email": {
                  "type": "string",
                  "nullable": true,
                  "title": "Email",
                  "description": "Represents the patient email id.",
                  "x-examples": {
                    "Email": "Timothy.Mark@nedirecords.com"
                  },
                  "x-tags": [
                    "Common Models"
                  ],
                  "format": "email",
                  "example": "Timothy.Mark@nedirecords.com",
                  "maxLength": 100,
                  "x-internal": false
                },
                "contactMethod": {
                  "title": "PatientContactMethod",
                  "type": "number",
                  "nullable": true,
                  "x-examples": {
                    "example-1": 1
                  },
                  "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                  "x-tags": [
                    "Other"
                  ]
                },
                "notes": {
                  "type": "string",
                  "description": "Any comments or notes can be recorded in this field",
                  "maxLength": 500,
                  "example": "Patient had a mild fever",
                  "nullable": true
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              },
              "x-tags": [
                "Other"
              ]
            }
          },
          "first": {
            "type": "boolean",
            "description": "Showing the first page."
          },
          "last": {
            "type": "boolean",
            "description": "Showing the last page."
          },
          "totalPages": {
            "type": "integer",
            "description": "Total Pages"
          },
          "totalElements": {
            "description": "Total records",
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer",
            "description": "Total records"
          },
          "size": {
            "description": "Number of records in a page",
            "type": "integer"
          },
          "page": {
            "type": "integer",
            "description": "current page number"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "DateOfBirth1": {
        "type": "string",
        "title": "DateOfBirth",
        "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
        "format": "date",
        "default": "1970-01-10",
        "example": "1970-01-10",
        "x-examples": {
          "Date of Birth": "1970-01-10"
        },
        "x-tags": [
          "Other"
        ]
      },
      "PatientResponse1": {
        "title": "PatientResponse",
        "description": "The Patient Response properties that are included for a patient",
        "type": "object",
        "x-examples": {
          "Full Patient Response": {
            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "titleCode": 315890000,
            "firstName": "Timothy",
            "lastName": "Mark",
            "middleName": "David",
            "preferredName": "Tim",
            "previouslyKnownAs": "Jake",
            "fullName": "Timothy Mark",
            "gender": 2,
            "dob": "1970-12-12",
            "estimated": true,
            "oneNameOnly": "false",
            "dateOfDeath": "2018-03-04",
            "causeOfDeath": "Cancer",
            "patientStatusCode": 2,
            "ethnicityCode": 55,
            "englishAsSecondLanguage": true,
            "atsi": 1,
            "ctgCoPaymentRelief": true,
            "placeOfBirth": "Sydney",
            "skinCode": 16,
            "languageSpokenAtHome": 1,
            "homePhone": 298761234,
            "mobilePhone": "0413324123",
            "workPhone": 298671234,
            "email": "Timothy.Mark@nedirecords.com",
            "contactMethod": 1,
            "notes": "Patient had a mild fever",
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-08-24T14:15:22Z",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "2019-08-24T14:15:22Z"
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
            "format": "uuid",
            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
          },
          "defaultPracticeId": {
            "type": "string",
            "description": "Default practice id where the patient details are created",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
            "format": "uuid",
            "nullable": true
          },
          "usualDoctorId": {
            "type": "string",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "description": "A user id that represents the usual doctor for the patient",
            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "format": "uuid",
            "nullable": true
          },
          "titleCode": {
            "type": "integer",
            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
            "example": 315890000
          },
          "firstName": {
            "type": "string",
            "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
            "minLength": 1,
            "maxLength": 40,
            "example": "Timothy",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Represents patient last name",
            "minLength": 1,
            "maxLength": 40,
            "example": "Mark"
          },
          "middleName": {
            "type": "string",
            "description": "Represents the patient middle name",
            "minLength": 0,
            "maxLength": 40,
            "example": "David",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
            "minLength": 0,
            "maxLength": 40,
            "example": "Tim",
            "nullable": true
          },
          "previouslyKnownAs": {
            "type": "string",
            "description": "Represents the patient previously known name",
            "maxLength": 40,
            "example": "Jake",
            "minLength": 0,
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "Represents the patient full name",
            "nullable": true
          },
          "gender": {
            "type": "integer",
            "title": "Gender",
            "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
            "default": 0,
            "example": 2,
            "x-examples": {
              "Male": 2
            },
            "x-internal": false
          },
          "dob": {
            "type": "string",
            "title": "DateOfBirth",
            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
            "format": "date",
            "default": "1970-01-10",
            "example": "1970-01-10",
            "x-examples": {
              "Date of Birth": "1970-01-10"
            },
            "x-tags": [
              "Other"
            ]
          },
          "estimated": {
            "type": "boolean",
            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
            "nullable": true
          },
          "oneNameOnly": {
            "type": "boolean",
            "example": false,
            "description": "The flag is set to true, if the patient has one name only",
            "nullable": true
          },
          "dateOfDeath": {
            "type": "string",
            "nullable": true,
            "title": "DateOfDeath",
            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
            "default": "yyyy-MM-dd",
            "example": "2018-12-01",
            "x-examples": {
              "Date Of Death Format": "2018-12-01"
            },
            "x-tags": [
              "Other"
            ]
          },
          "causeOfDeath": {
            "type": "string",
            "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
            "example": "Cancer",
            "maxLength": 300,
            "nullable": true
          },
          "patientStatusCode": {
            "type": "integer",
            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
            "example": 2,
            "nullable": true
          },
          "ethnicityCode": {
            "type": "integer",
            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
            "example": 55,
            "nullable": true
          },
          "englishAsSecondLanguage": {
            "type": "boolean",
            "description": "If english is the patient second language the flag is set as true else it is set to false",
            "nullable": true
          },
          "atsiStatus": {
            "type": "integer",
            "title": "Atsi",
            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
            "example": 4,
            "nullable": true,
            "x-tags": [
              "Other"
            ]
          },
          "ctgCoPaymentRelief": {
            "type": "boolean",
            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
            "nullable": true
          },
          "placeOfBirth": {
            "type": "string",
            "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
            "example": "Sydney",
            "maxLength": 100,
            "nullable": true
          },
          "skinCode": {
            "type": "integer",
            "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
            "example": 16,
            "nullable": true
          },
          "languageSpokenAtHome": {
            "title": "LanguageSpokenAtHome",
            "type": "integer",
            "nullable": true,
            "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
            "x-examples": {
              "example-1": 1
            },
            "x-internal": false
          },
          "homePhone": {
            "type": "string",
            "nullable": true,
            "title": "HomePhone",
            "x-examples": {
              "HomePhone Number": "0298761234"
            },
            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "maxLength": 10,
            "example": "0298761234",
            "x-internal": false,
            "minLength": 8
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true,
            "title": "MobilePhone",
            "x-examples": {
              "MobileNumber": "0413324123"
            },
            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0413324123",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "workPhone": {
            "type": "string",
            "nullable": true,
            "title": "OfficePhone",
            "x-examples": {
              "OfficePhoneNumber": "0298671234"
            },
            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0298671234",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "email": {
            "type": "string",
            "nullable": true,
            "title": "Email",
            "description": "Represents the patient email id.",
            "x-examples": {
              "Email": "Timothy.Mark@nedirecords.com"
            },
            "x-tags": [
              "Common Models"
            ],
            "format": "email",
            "example": "Timothy.Mark@nedirecords.com",
            "maxLength": 100,
            "x-internal": false
          },
          "contactMethod": {
            "title": "PatientContactMethod",
            "type": "number",
            "nullable": true,
            "x-examples": {
              "example-1": 1
            },
            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
            "x-tags": [
              "Other"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field",
            "maxLength": 500,
            "example": "Patient had a mild fever",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "type",
          "message"
        ],
        "x-examples": {
          "Example": {
            "code": "unknown_error_code",
            "type": "unknown_error_type",
            "message": "Oops! Appears that an error has occurred"
          }
        },
        "description": "Error response model",
        "x-tags": [
          "Other"
        ]
      },
      "ForbiddenErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "type",
          "message"
        ],
        "x-examples": {
          "Example": {
            "code": "unknown_error_code",
            "type": "unknown_error_type",
            "message": "Access is denied"
          }
        },
        "description": "Forbidden error response model",
        "x-tags": [
          "Other"
        ]
      },
      "UnauthorizedErrorResponse": {
        "type": "object",
        "x-examples": {
          "example": {
            "error": "unauthorized",
            "error_description": "An Authentication object was not found in the SecurityContext"
          }
        },
        "description": "Unauthorized error response model",
        "properties": {
          "error": {
            "type": "string",
            "example": "unauthorized"
          },
          "error_description": {
            "type": "string",
            "example": "An Authentication object was not found in the SecurityContext"
          }
        },
        "required": [
          "error",
          "error_description"
        ],
        "x-tags": [
          "Other"
        ]
      },
      "ValidationErrorResponse": {
        "type": "object",
        "x-examples": {
          "Example": {
            "code": "invalid_request",
            "type": "invalid_request_error",
            "message": "Invalid request parameter",
            "errors": [
              {
                "parameter": "id",
                "value": "",
                "message": "Input is required"
              }
            ]
          }
        },
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "parameter": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "parameter",
                "value",
                "message"
              ],
              "x-examples": {
                "example-1": {
                  "parameter": "string",
                  "value": "string",
                  "message": "string"
                }
              },
              "x-tags": [
                "Other"
              ]
            }
          }
        },
        "required": [
          "code",
          "type",
          "message"
        ],
        "description": "Validation error response model.",
        "x-tags": [
          "Other"
        ]
      },
      "PageableFirst": {
        "title": "PageableFirst",
        "description": "Flag to indicates if it is first page or not.",
        "type": "boolean",
        "x-tags": [
          "Other"
        ]
      },
      "PageableLast": {
        "title": "PageableLast",
        "description": "Flag to indicates if it is last page or not.",
        "type": "boolean",
        "x-tags": [
          "Other"
        ]
      },
      "PageableTotalPages": {
        "title": "PageableTotalPages",
        "description": "The total pages returned.",
        "type": "integer",
        "x-tags": [
          "Other"
        ]
      },
      "PageableTotalElements": {
        "title": "PageableTotalElements",
        "description": "The total records returned.",
        "type": "integer",
        "x-tags": [
          "Other"
        ]
      },
      "PageableNumberOfElements": {
        "title": "PageableNumberOfElements",
        "description": "The maximum records in one page.",
        "type": "integer",
        "x-tags": [
          "Other"
        ]
      },
      "PageableSize": {
        "title": "PageableSize",
        "description": "The size of a page. Similar to number of elements in a page.",
        "type": "integer",
        "x-tags": [
          "Other"
        ]
      },
      "PageablePage": {
        "title": "PageablePage",
        "description": "The page number",
        "type": "integer",
        "x-tags": [
          "Other"
        ]
      },
      "CreateUserRequest": {
        "title": "CreateUserRequest",
        "description": "",
        "type": "object",
        "x-examples": {
          "Example": {
            "titleCode": "315890000",
            "plan": 1,
            "firstName": "Jane",
            "lastName": "Smith",
            "email": "jane.smith@example.com",
            "officePhone": 491570110,
            "password": "p455w0rd",
            "userName": "Jane.Smith",
            "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
            "createdDateTime": "2020-10-02T15:00:00Z",
            "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
            "updatedDateTime": "2020-10-02T15:00:00Z",
            "homePhone": "0211111111",
            "mobilePhone": 399999999,
            "fax": 212345678,
            "categoryCode": "86",
            "userCode": "JS",
            "timeZone": 255,
            "roleCode": "9",
            "moduleCode": "CLINICAL_GP",
            "practices": [
              {
                "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                "providerNo": "2515823",
                "ahpraNo": "BBB6789423478",
                "medicalObject": "",
                "defaultPractice": true
              }
            ],
            "supervisingDoctorId": "b8f5f3b0-2402-e711-817e-06c7898ff79d",
            "prescriberNo": "2515823",
            "abn": "51824753556",
            "hpiINo": "",
            "erxId": "",
            "preferredName": "Jane",
            "biography": "Jane Smith is an IT Manager of a multinational company",
            "shared": true,
            "dob": "1995-07-18",
            "gender": 1,
            "supportEnabled": true,
            "subSpecialities": [
              {
                "subSpecialityCode": "57"
              }
            ],
            "languages": [
              {
                "languageCode": "123"
              }
            ],
            "qualifications": [
              {
                "qualificationCode": "11"
              }
            ],
            "metadata": [
              {
                "key": "employeeId",
                "value": "12345678"
              },
              {
                "key": "secondaryEmail",
                "value": "Jane.Smith@gmail.com"
              }
            ]
          }
        },
        "x-tags": [
          "Other"
        ],
        "properties": {
          "titleCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user title. Call the below endpoint to get the user title code lookup\n/code-system/title-code.",
            "example": "315890000"
          },
          "plan": {
            "type": "integer",
            "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time\n\nIf there is no plan  entered, then by default 'Full Time ' plan will be set.",
            "default": 1,
            "enum": [
              1,
              2
            ],
            "example": 1
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "description": "Represents user firstName.",
            "maxLength": 30,
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "description": "Represents user lastName.",
            "maxLength": 30,
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users email id. This should be unique.",
            "example": "jane.smith@example.com",
            "format": "email"
          },
          "officePhone": {
            "type": "string",
            "minLength": 10,
            "description": "Represents the user office phone number.",
            "maxLength": 10,
            "example": 491570110
          },
          "password": {
            "type": "string",
            "minLength": 18,
            "description": "Represents the user login password. Password should be minimum 8 characters  and max 20 characters long and must include at least 1 number.",
            "example": "p455w0rd",
            "maxLength": 20
          },
          "userName": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user name. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be John.smith.",
            "example": "Jane.Smith"
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          },
          "homePhone": {
            "type": "string",
            "minLength": 10,
            "description": "Represents the users home phone number.",
            "maxLength": 10,
            "example": "0211111111"
          },
          "mobilePhone": {
            "type": "string",
            "minLength": 10,
            "description": "Represents the users  mobile phone number.",
            "maxLength": 10,
            "example": 399999999
          },
          "fax": {
            "type": "string",
            "minLength": 10,
            "description": "Represents the users fax number.",
            "maxLength": 10,
            "example": 212345678
          },
          "categoryCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the category code. Call the below endpoint to get the user category code lookup\n/code-system/category-code. \n\nIf there is no categoryCode  entered, then by default 'Practice Owner'category will be set.",
            "example": "86"
          },
          "userCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user code. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be JS.",
            "example": "JS"
          },
          "timeZone": {
            "type": "integer",
            "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart\n\nIf no timezone is entered, then the default timezone of Canberra, Melbourne and Sydney is applied",
            "enum": [
              225,
              245,
              250,
              255,
              260,
              265
            ],
            "example": 255,
            "default": 255
          },
          "roleCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code. \n\nIf there is no roleCode  entered, then by default 'Practice Owner' role will be set.",
            "example": "9"
          },
          "moduleCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code.  If there is no moduleCode  entered, then by default 'Integrated Specialist' module will be applied.",
            "example": "CLINICAL_GP",
            "default": "INTEGRATED_SPECIALIS"
          },
          "practices": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "description": "The user subscribed practices information. If no practice(s) set, then the user will only be subscribed to the primary practice and  the primary practice will be set as the default user  practice. If multiple practice(s) set, then the user will be subscribed to multiple practices. When the user is subscribed to multiple practices, the first practice added in the list will be automatically set as the default practice.",
            "items": {
              "type": "object",
              "properties": {
                "practiceId": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the practice identifier.",
                  "format": "uuid",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "example": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630"
                },
                "providerNo": {
                  "type": "string",
                  "description": "Represents the user provider number for the practice. If its not set then the provider number will be blank for the particular practice.",
                  "maxLength": 11,
                  "example": "2515823"
                },
                "ahpraNo": {
                  "type": "string",
                  "description": "Represents the users aphra no for the practice. If it''s not set, then the aphra no will be blank for the practice. User must input 3 alphabets and 10 digit number.",
                  "maxLength": 13,
                  "example": "BBB6789423478"
                },
                "medicalObject": {
                  "type": "string",
                  "description": "Represents the user medical object identifier for the practice. If it is not set, then the medical object identifier will be blank for the subscribed practice.",
                  "maxLength": 11
                },
                "defaultPractice": {
                  "type": "boolean",
                  "description": "Represents the user default practice. If the flag is set to true then , practice is set as user default practice."
                }
              }
            }
          },
          "supervisingDoctorId": {
            "type": "string",
            "description": "Represents the user's supervising doctor user identifier. A supervising doctor can be a user under the same tenant. A supervising doctor must be an active user.",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "format": "uuid",
            "example": "b8f5f3b0-2402-e711-817e-06c7898ff79d"
          },
          "prescriberNo": {
            "type": "string",
            "description": "Represents the user prescriber number. Prescriber number is requied to allow users to prescribe drugs to the patient.",
            "maxLength": 7,
            "example": "2515823"
          },
          "abn": {
            "type": "string",
            "minLength": 11,
            "description": "Represents the users abn number.",
            "maxLength": 11,
            "example": "51824753556"
          },
          "hpiINo": {
            "type": "string",
            "description": "Represents the user Hpi-I no. Should start with '80036'",
            "maxLength": 16
          },
          "erxId": {
            "type": "string",
            "description": "Represents the user erxId.",
            "maxLength": 10
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the users preferred name. If the preferred name is null, then the firstName becomes the preferred name.",
            "maxLength": 100,
            "example": "Beckham"
          },
          "biography": {
            "type": "string",
            "description": "Represents the users biography.",
            "maxLength": 1000,
            "example": "biography"
          },
          "shared": {
            "type": "boolean",
            "description": "Represents  if the users profile will be shared to the community or not. If the flag is set to true add the user profile to the Medirecords community and contact list."
          },
          "dob": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user date of birth. Date of birth should not be in the future. Format YYYY-MM-DD.",
            "example": "2021-06-01"
          },
          "gender": {
            "type": "integer",
            "description": "Represents the user gender.\n\n* `1` - Male\n* `2` - Female",
            "example": 1,
            "enum": [
              1,
              2
            ]
          },
          "supportEnabled": {
            "type": "boolean",
            "description": "Represents support agent access to this record. If the flag is set to true, then the support agent can access this account."
          },
          "subSpecialities": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "description": "Repesents the users sub specialities information. There can may more than one sub speciality for a user.",
            "items": {
              "type": "object",
              "properties": {
                "subSpecialityCode": {
                  "type": "string",
                  "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup\n/code-system/subspeciality-code.",
                  "example": "10"
                }
              }
            }
          },
          "languages": {
            "type": "array",
            "uniqueItems": true,
            "description": "Repesents the users languages known information. There can may more than one language known for a user.",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "languageCode": {
                  "type": "string",
                  "example": "1",
                  "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n/code-system/languages-code."
                }
              }
            }
          },
          "qualifications": {
            "type": "array",
            "uniqueItems": true,
            "description": "Repesents the users qualifications information. There can may more than one qualification known for a user.",
            "maxItems": 20,
            "items": {
              "type": "object",
              "properties": {
                "qualificationCode": {
                  "type": "string",
                  "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n/code-system/qualifications-code.",
                  "example": "227"
                }
              }
            }
          },
          "metadata": {
            "type": "array",
            "uniqueItems": true,
            "description": "Repesents the user metadata information.  You can use this parameter to attach key-value data to these user object. Metadata is useful for storing additional, structured information on an object. As an example, you could store your user''s full name, user employee identifier, user secondary email or corresponding unique identifier from your system on a MediRecords user object.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Represents the users metadata key.",
                  "maxLength": 40,
                  "example": "employeeId"
                },
                "value": {
                  "type": "string",
                  "example": "12345678",
                  "maxLength": 500
                }
              }
            }
          }
        },
        "required": [
          "titleCode",
          "firstName",
          "lastName",
          "email",
          "officePhone",
          "password",
          "createdBy",
          "createdDateTime",
          "updatedBy",
          "updatedDateTime"
        ]
      },
      "UpdateUserRequest": {
        "title": "UpdateUserRequest",
        "description": "Update user data transfer object model",
        "type": "object",
        "x-examples": {
          "Example": {
            "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
            "titleCode": "315890000",
            "plan": 1,
            "firstName": "Jane",
            "lastName": "Smith",
            "email": "jane.smith@example.com",
            "officePhone": 491570110,
            "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
            "createdDateTime": "2020-10-02T15:00:00Z",
            "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
            "updatedDateTime": "2020-10-02T15:00:00Z",
            "homePhone": "0211111111",
            "mobilePhone": 399999999,
            "fax": 212345678,
            "categoryCode": "86",
            "userCode": "JS",
            "userName": "Jane.Smith",
            "timeZone": 255,
            "roleCode": "9",
            "moduleCode": "CLINICAL_GP",
            "practices": [
              {
                "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                "providerNo": "2515823",
                "ahpraNo": "BBB6789423478",
                "medicalObject": "",
                "defaultPractice": true
              }
            ],
            "supervisingDoctorId": "",
            "prescriberNo": "2515823",
            "abn": "51824753556",
            "hpiINo": "",
            "erxId": "",
            "preferredName": "Jane",
            "biography": "Jane Smith is an IT Manager of a multinational company",
            "shared": true,
            "dob": "1995-07-18",
            "gender": 1,
            "supportEnabled": true,
            "subSpecialities": [
              {
                "subSpecialityCode": "57"
              }
            ],
            "languages": [
              {
                "languageCode": "123"
              }
            ],
            "qualifications": [
              {
                "qualificationCode": "11"
              }
            ],
            "metadata": [
              {
                "key": "employeeId",
                "value": "12345678"
              },
              {
                "key": "secondaryEmail",
                "value": "Jane.Smith@gmail.com"
              }
            ]
          }
        },
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "User id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations.",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "example": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
            "format": "uuid"
          },
          "titleCode": {
            "type": "string",
            "description": "Represents the user title. Call the below endpoint to get the user title code lookup\n/code-system/title-code.",
            "example": "315890000"
          },
          "firstName": {
            "type": "string",
            "description": "Represents user firstName. Max 30 characters in length.",
            "minLength": 1,
            "maxLength": 30,
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "description": "Represents user lastName. Max 30 characters in length.",
            "minLength": 1,
            "maxLength": 30,
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "Represents the users email id. This should be unique.",
            "example": "jane.smith@example.com",
            "format": "email"
          },
          "officePhone": {
            "type": "string",
            "description": "Represents the user office phone number. Should be 10 digits in length.",
            "example": 491570110,
            "minLength": 10,
            "maxLength": 10
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          },
          "homePhone": {
            "type": "string",
            "description": "Represents the users  home phone number.",
            "minLength": 10,
            "maxLength": 10,
            "example": "0211111111"
          },
          "mobilePhone": {
            "type": "string",
            "description": "Represents the users  mobile phone number",
            "minLength": 10,
            "maxLength": 10,
            "example": 399999999
          },
          "fax": {
            "type": "string",
            "description": "Represents the users fax number.",
            "minLength": 10,
            "maxLength": 10,
            "example": 212345678
          },
          "categoryCode": {
            "type": "string",
            "description": "Represents the category code. Call the below endpoint to get the user category code lookup\n/code-system/category-code. If there is no categoryCode  entered, then by default 'Practice Owner'category will be set.",
            "example": "86"
          },
          "userCode": {
            "type": "string",
            "description": "Represents the user code. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be JS.",
            "example": "JS"
          },
          "userName": {
            "type": "string",
            "description": "Represents the user name. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be John.smith.",
            "example": "Jane.Smith"
          },
          "timeZone": {
            "type": "integer",
            "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart\n\nIf no timezone is entered, then the default timezone of Canberra, Melbourne and Sydney is applied",
            "enum": [
              225,
              245,
              250,
              255,
              260,
              265
            ],
            "default": 255,
            "example": 255
          },
          "roleCode": {
            "type": "string",
            "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code. If there is no roleCode  entered, then by default 'Practice Owner' role will be set.",
            "example": "9"
          },
          "plan": {
            "type": "integer",
            "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time\n\nIf there is no plan  entered, then by default 'Full Time ' plan will be set.",
            "example": 1,
            "default": 1,
            "enum": [
              1,
              2
            ]
          },
          "moduleCode": {
            "type": "string",
            "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code. If there is no moduleCode  entered, then by default 'Integrated Specialist' module will be applied.",
            "default": "INTEGRATED_SPECIALIS",
            "example": "CLINICAL_GP"
          },
          "practices": {
            "type": "array",
            "description": "The user subscribed practices information. If no practice(s) set, then the user will only be subscribed to the primary practice and  the primary practice will be set as the default user  practice. If multiple practice(s) set, then the user will be subscribed to multiple practices. When the user is subscribed to multiple practices, the first practice added in the list will be automatically set as the default practice.",
            "items": {
              "type": "object",
              "properties": {
                "practiceId": {
                  "type": "string",
                  "description": "A GUID that represents the practice id.",
                  "format": "uuid",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "example": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630"
                },
                "providerNo": {
                  "type": "string",
                  "description": "Represents the user provider number for the practice. If its not set then the provider number will be blank for the particular practice.",
                  "maxLength": 11,
                  "example": "2515823"
                },
                "ahpraNo": {
                  "type": "string",
                  "description": "Represents the users aphra no for the practice. If it's not set, then the aphra no will be blank for the practice. User must input 3 alphabets and 10 digit number",
                  "maxLength": 13,
                  "example": "BBB6789423478"
                },
                "medicalObject": {
                  "type": "string",
                  "description": "Represents the user medical object identifier for the practice. If it is not set, then the medical object identifier will be blank for the subscribed practice.",
                  "maxLength": 11
                },
                "defaultPractice": {
                  "type": "boolean",
                  "description": "Represents the user default practice. If the flag is set to true then , practice is set as user default practice."
                }
              }
            }
          },
          "supervisingDoctorId": {
            "type": "string",
            "description": "A GUID that represents the user's supervising doctor user id. A supervising doctor can be a user under the same tenant. A supervising doctor must be an active user.",
            "format": "uuid"
          },
          "prescriberNo": {
            "type": "string",
            "description": "Represents the user prescriber number. Prescriber number is requied to allow users to prescribe drugs to the patient.",
            "maxLength": 7,
            "example": "2515823"
          },
          "abn": {
            "type": "string",
            "description": "Represents the users abn number.",
            "minLength": 11,
            "maxLength": 11,
            "example": "51824753556"
          },
          "hpiINo": {
            "type": "string",
            "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
            "maxLength": 16
          },
          "erxId": {
            "type": "string",
            "description": "Represents the user erxId.",
            "maxLength": 10
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the users preferred name. If the preferred name is null, then the firstName becomes the preferred name.",
            "maxLength": 100,
            "example": "Beckham"
          },
          "biography": {
            "type": "string",
            "description": "Represents the users biography.",
            "maxLength": 1000,
            "example": "biography"
          },
          "shared": {
            "type": "boolean",
            "description": "Represents  if the users profile will be shared to the community or not. If the flag is set to true add the user profile to the Medirecords community and contact list."
          },
          "dob": {
            "type": "string",
            "description": "Represents the user date of birth. Date of birth should not be in the future. Format YYYY-MM-DD.",
            "example": "2021-06-01"
          },
          "gender": {
            "type": "integer",
            "description": "Represents the user gender.\n\n* `1` - Male\n* `2` - Female",
            "example": 1,
            "enum": [
              1,
              2
            ]
          },
          "supportEnabled": {
            "type": "boolean",
            "description": "Represents support agent access to this record. If the flag is set to true, then the support agent can access this account."
          },
          "subSpecialities": {
            "type": "array",
            "description": "Repesents the users sub specialities information. There can may more than one sub speciality for a user.",
            "items": {
              "type": "object",
              "properties": {
                "subSpecialityCode": {
                  "type": "string",
                  "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup\n/code-system/subspeciality-code.",
                  "example": "10"
                }
              }
            }
          },
          "languages": {
            "type": "array",
            "description": "Repesents the users languages known information. There can may more than one language known for a user.",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "languageCode": {
                  "type": "string",
                  "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n/code-system/languages-code.",
                  "example": "1"
                }
              }
            }
          },
          "qualifications": {
            "type": "array",
            "description": "Repesents the users qualifications information. There can may more than one qualification known for a user.",
            "maxItems": 20,
            "items": {
              "type": "object",
              "properties": {
                "qualificationCode": {
                  "type": "string",
                  "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n/code-system/qualifications-code.",
                  "example": "227"
                }
              }
            }
          },
          "metadata": {
            "type": "array",
            "description": "Repesents the user metadata information.  You can use this parameter to attach key-value data to these user object. Metadata is useful for storing additional, structured information on an object. As an example, you could store your user's full name, user employee identifier, user secondary email or corresponding unique identifier from your system on a MediRecords user object.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Represents the users metadata key.",
                  "maxLength": 40,
                  "example": "employeeId"
                },
                "value": {
                  "type": "string",
                  "description": "Represents the users metadata value.",
                  "maxLength": 500,
                  "example": "12345678"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "titleCode",
          "firstName",
          "lastName",
          "email",
          "officePhone",
          "createdBy",
          "createdDateTime",
          "updatedBy",
          "updatedDateTime"
        ]
      },
      "UserResponse": {
        "title": "UserResponse",
        "type": "object",
        "description": "",
        "x-examples": {
          "Example": {
            "id": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
            "titleCode": "315890000",
            "plan": 1,
            "firstName": "Jane",
            "lastName": "Smith",
            "email": "jane.smith@example.com",
            "officePhone": 491570110,
            "createdBy": "e0cd6c62-f6cf-e311-93f1-00505681676c",
            "createdDateTime": "2020-10-02T15:00:00Z",
            "updatedBy": "2c9920ca-ced0-11e5-aeb0-bb7bda67713c",
            "updatedDateTime": "2020-10-02T15:00:00Z",
            "homePhone": "0211111111",
            "mobilePhone": 399999999,
            "fax": 212345678,
            "categoryCode": "86",
            "userCode": "JS",
            "userName": "Jane.Smith",
            "timeZone": 255,
            "roleCode": "9",
            "moduleCode": "CLINICAL_GP",
            "practices": [
              {
                "practiceId": "2c98f1c2-ced0-11e5-aeaf-d39aed444d12",
                "providerNo": "2515823",
                "ahpraNo": "BBB6789423478",
                "medicalObject": "",
                "defaultPractice": true
              }
            ],
            "supervisingDoctorId": "",
            "prescriberNo": "2515823",
            "abn": "51824753556",
            "hpiINo": "",
            "erxId": "",
            "preferredName": "Jane",
            "biography": "Jane Smith is an IT Manager of a multinational company",
            "shared": true,
            "dob": "1995-07-18",
            "gender": 1,
            "subSpecialities": [
              {
                "subSpecialityCode": "57"
              }
            ],
            "languages": [
              {
                "languageCode": "123"
              }
            ],
            "qualifications": [
              {
                "qualificationCode": "11"
              }
            ],
            "supportEnabled": true,
            "metadata": [
              {
                "key": "employeeId",
                "value": "12345678"
              },
              {
                "key": "secondaryEmail",
                "value": "Jane.Smith@gmail.com"
              }
            ],
            "monthlyFee": "$10.00",
            "status": "Active",
            "usageHours": 12.5,
            "canonicalId": "Australia/Sydney",
            "patientId": "8a7ca13a-ee06-472f-94d5-c83355f8118a"
          }
        },
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "User id.This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE, GET and DELETE operations.",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "example": "8b38f093-8323-4549-a39d-3eb8f0ec8107",
            "format": "uuid"
          },
          "titleCode": {
            "type": "string",
            "description": "Represents the user title. Call the below endpoint to get the user title code lookup\n/code-system/title-code.",
            "example": "315890000"
          },
          "firstName": {
            "type": "string",
            "description": "Represents user firstName. Max 30 characters in length.",
            "minLength": 1,
            "maxLength": 30,
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "description": "Represents user lastName. Max 30 characters in length.",
            "minLength": 1,
            "maxLength": 30,
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "Represents the users email id. This should be unique.",
            "example": "jane.smith@example.com",
            "format": "email"
          },
          "officePhone": {
            "type": "string",
            "description": "Represents the user office phone number. Should be 10 digits in length.",
            "example": 491570110,
            "minLength": 10,
            "maxLength": 10
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          },
          "homePhone": {
            "type": "string",
            "description": "Represents the users  home phone number.",
            "minLength": 10,
            "maxLength": 10,
            "example": "0211111111"
          },
          "mobilePhone": {
            "type": "string",
            "description": "Represents the users  mobile phone number",
            "minLength": 10,
            "maxLength": 10,
            "example": 399999999
          },
          "fax": {
            "type": "string",
            "description": "Represents the users fax number.",
            "minLength": 10,
            "maxLength": 10,
            "example": 212345678
          },
          "categoryCode": {
            "type": "string",
            "description": "Represents the category code. Call the below endpoint to get the user category code lookup\n/code-system/category-code. If there is no categoryCode  entered, then by default 'Practice Owner'category will be set.",
            "example": "b8f5f3b0-2402-e711-817e-06c7898ff79d"
          },
          "userCode": {
            "type": "string",
            "description": "Represents the user code. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be JS.",
            "example": "JS"
          },
          "userName": {
            "type": "string",
            "description": "Represents the user name. If this field is not set, then the system will set from firstname and lastname entered e.g John Smith might be John.smith.",
            "example": "Jane.Smith"
          },
          "timeZone": {
            "type": "integer",
            "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart\n\nIf no timezone is entered, then the default timezone of Canberra, Melbourne and Sydney is applied",
            "enum": [
              225,
              245,
              250,
              255,
              260,
              265
            ],
            "default": 255,
            "example": 255
          },
          "roleCode": {
            "type": "string",
            "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code. If there is no roleCode  entered, then by default 'Practice Owner' role will be set.",
            "example": "c98a3e02-327d-4d64-bb97-cb02de7cc425"
          },
          "plan": {
            "type": "integer",
            "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time\n\nIf there is no plan  entered, then by default 'Full Time ' plan will be set.",
            "example": 1,
            "default": 1,
            "enum": [
              1,
              2
            ]
          },
          "moduleCode": {
            "type": "string",
            "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code. If there is no moduleCode  entered, then by default 'Integrated Specialist' module will be applied.",
            "default": "INTEGRATED_SPECIALIS",
            "example": "CLINICAL_GP"
          },
          "practices": {
            "type": "array",
            "description": "The user subscribed practices information. If no practice(s) set, then the user will only be subscribed to the primary practice and  the primary practice will be set as the default user  practice. If multiple practice(s) set, then the user will be subscribed to multiple practices. When the user is subscribed to multiple practices, the first practice added in the list will be automatically set as the default practice.",
            "items": {
              "type": "object",
              "properties": {
                "practiceId": {
                  "type": "string",
                  "description": "A GUID that represents the practice id.",
                  "format": "uuid",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "example": "3e76f6d8-c989-11e5-80fa-d34d5ffbc630"
                },
                "providerNo": {
                  "type": "string",
                  "description": "Represents the user provider number for the practice. If its not set then the provider number will be blank for the particular practice.",
                  "maxLength": 11,
                  "example": "2515823"
                },
                "ahpraNo": {
                  "type": "string",
                  "description": "Represents the users aphra no for the practice. If it's not set, then the aphra no will be blank for the practice. User must input 3 alphabets and 10 digit number",
                  "maxLength": 13,
                  "example": "BBB6789423478"
                },
                "medicalObject": {
                  "type": "string",
                  "description": "Represents the user medical object identifier for the practice. If it is not set, then the medical object identifier will be blank for the subscribed practice.",
                  "maxLength": 11
                },
                "defaultPractice": {
                  "type": "boolean",
                  "description": "Represents the user default practice. If the flag is set to true then , practice is set as user default practice."
                }
              }
            }
          },
          "supervisingDoctorId": {
            "type": "string",
            "description": "A GUID that represents the user's supervising doctor user id. A supervising doctor can be a user under the same tenant. A supervising doctor must be an active user.",
            "format": "uuid"
          },
          "prescriberNo": {
            "type": "string",
            "description": "Represents the user prescriber number. Prescriber number is requied to allow users to prescribe drugs to the patient.",
            "maxLength": 7,
            "example": "2515823"
          },
          "abn": {
            "type": "string",
            "description": "Represents the users abn number.",
            "minLength": 11,
            "maxLength": 11,
            "example": "51824753556"
          },
          "hpiINo": {
            "type": "string",
            "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
            "maxLength": 16
          },
          "erxId": {
            "type": "string",
            "description": "Represents the user erxId.",
            "maxLength": 10
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the users preferred name. If the preferred name is null, then the firstName becomes the preferred name.",
            "maxLength": 100,
            "example": "Beckham"
          },
          "biography": {
            "type": "string",
            "description": "Represents the users biography.",
            "maxLength": 1000,
            "example": "biography"
          },
          "shared": {
            "type": "boolean",
            "description": "Represents  if the users profile will be shared to the community or not. If the flag is set to true add the user profile to the Medirecords community and contact list."
          },
          "dob": {
            "type": "string",
            "description": "Represents the user date of birth. Date of birth should not be in the future. Format YYYY-MM-DD.",
            "example": "2021-06-01"
          },
          "gender": {
            "type": "integer",
            "description": "Represents the user gender.\n\n* `1` - Female\n* `2` - Male",
            "example": 1,
            "enum": [
              1,
              2
            ]
          },
          "supportEnabled": {
            "type": "boolean",
            "description": "Represents support agent access to this record. If the flag is set to true, then the support agent can access this account."
          },
          "subSpecialities": {
            "type": "array",
            "description": "Repesents the users sub specialities information. There can may more than one sub speciality for a user.",
            "items": {
              "type": "object",
              "properties": {
                "subSpecialityCode": {
                  "type": "string",
                  "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup\n/code-system/subspeciality-code.",
                  "example": "10"
                }
              }
            }
          },
          "languages": {
            "type": "array",
            "description": "Repesents the users languages known information. There can may more than one language known for a user.",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "languageCode": {
                  "type": "string",
                  "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n/code-system/languages-code.",
                  "example": "1"
                }
              }
            }
          },
          "qualifications": {
            "type": "array",
            "description": "Repesents the users qualifications information. There can may more than one qualification known for a user.",
            "maxItems": 20,
            "items": {
              "type": "object",
              "properties": {
                "qualificationCode": {
                  "type": "string",
                  "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n/code-system/qualifications-code.",
                  "example": "227"
                }
              }
            }
          },
          "metadata": {
            "type": "array",
            "description": "Repesents the user metadata information.  You can use this parameter to attach key-value data to these user object. Metadata is useful for storing additional, structured information on an object. As an example, you could store your user's full name, user employee identifier, user secondary email or corresponding unique identifier from your system on a MediRecords user object.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Represents the users metadata key.",
                  "maxLength": 40
                },
                "value": {
                  "type": "string",
                  "description": "Represents the users metadata value.",
                  "maxLength": 500
                }
              }
            }
          },
          "monthlyFee": {
            "type": "string",
            "description": "Represents the users monthly fee based on user subsciption.",
            "example": "$10.00"
          },
          "status": {
            "type": "string",
            "example": "Active",
            "description": "Represents the users status."
          },
          "usageHours": {
            "type": "number",
            "description": "Represents the users usage hours.",
            "example": 12.5
          },
          "canonicalId": {
            "type": "string",
            "description": "Represents the users canonicalId.",
            "example": "Australia/Sydney"
          },
          "patientId": {
            "type": "string",
            "format": "uuid",
            "example": "8a7ca13a-ee06-472f-94d5-c83355f8118a",
            "description": "Represents the patient id."
          }
        },
        "required": [
          "id",
          "titleCode",
          "firstName",
          "lastName",
          "email",
          "officePhone",
          "createdBy",
          "updatedBy",
          "updatedDateTime"
        ]
      },
      "PracticeProviderApiResponseDto": {
        "title": "PracticeProviderApiResponseDto",
        "description": "",
        "type": "object",
        "x-examples": {
          "Example": {
            "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "titleCode": "315890000",
            "plan": 1,
            "firstName": "Jane",
            "lastName": "Smith",
            "email": "jane.smith@example.com",
            "officePhone": 491570110,
            "createdBy": "string",
            "createdDateTime": "string",
            "updatedBy": "string",
            "updatedDateTime": "string",
            "homePhone": "0211111111",
            "mobilePhone": 399999999,
            "fax": 212345678,
            "categoryCode": "86",
            "userCode": "JS",
            "userName": "Jane.Smith",
            "timeZone": 255,
            "roleCode": "9",
            "moduleCode": "INTEGRATED_SPECIALIS",
            "practices": [
              {
                "practiceId": "92f21dec-e233-4194-bcc7-0ad88df5677f",
                "providerNo": "2515823",
                "ahpraNo": "BBB6789423478",
                "medicalObject": "string",
                "defaultPractice": true
              }
            ],
            "supervisingDoctorId": "1f92b268-050a-4755-9581-81573bc0421c",
            "prescriberNo": "2515823",
            "abn": "51824753556",
            "hpiINo": "string",
            "erxId": "1234",
            "preferredName": "Beckham",
            "biography": "User biography",
            "shared": true,
            "dob": "2021-06-01",
            "gender": 1,
            "subSpecialities": [
              {
                "subSpecialityCode": "10"
              }
            ],
            "languages": [
              {
                "languageCode": "1"
              }
            ],
            "qualifications": [
              {
                "qualificationCode": "227"
              }
            ],
            "supportEnabled": true,
            "metadata": [
              {
                "key": "secondEmail",
                "value": "jane.smith@gmail.com"
              }
            ],
            "status": "Active"
          }
        },
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Provider identifier. This is a unique identifier for this resource.",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
            "format": "uuid"
          },
          "titleCode": {
            "type": "string",
            "description": "Represents the user title code.\nCall the below endpoint to get the user title code lookup:\n\n/code-system/title-code.",
            "example": "315890000"
          },
          "plan": {
            "type": "integer",
            "description": "Represents the user plan identifier.\n\n* `1` - Full Time\n* `2` - Part Time",
            "enum": [
              1,
              2
            ],
            "example": 1
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "description": "Represents user firstName.",
            "maxLength": 30,
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "description": "Represents user lastName.",
            "maxLength": 30,
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users email.",
            "example": "jane.smith@example.com"
          },
          "officePhone": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user office phone number. It is 10 digits in length.",
            "example": 491570110
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          },
          "homePhone": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users  home phone number.",
            "example": "0211111111"
          },
          "mobilePhone": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users  mobile phone number.",
            "example": 399999999
          },
          "fax": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users fax number.",
            "example": 212345678
          },
          "categoryCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the category code. \nCall the below endpoint to get the user category code lookup\n/code-system/category-code.",
            "example": "86"
          },
          "userCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user code.",
            "example": "JS"
          },
          "userName": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the user name.",
            "example": "Jane.Smith"
          },
          "timeZone": {
            "type": "number",
            "description": "Represents the timezone.\n\n225 - (GMT+08:00) Perth\n245 - (GMT+09:30) Darwin\n250 - (GMT+09:30) Adelaide\n255 - (GMT+10:00) Canberra, Melbourne, Sydney\n260 - (GMT+10:00) Brisbane\n265 - (GMT+10:00) Hobart",
            "enum": [
              225,
              245,
              250,
              255,
              260,
              265
            ],
            "example": 255
          },
          "roleCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users security role. Call the below endpoint to get the user roleCode lookup\n/code-system/role-code.",
            "example": "9"
          },
          "moduleCode": {
            "type": "string",
            "minLength": 1,
            "description": "Represents the users module identifier. Call the below endpoint to get the user moduleCode lookup\n/code-system/module-code.",
            "example": "INTEGRATED_SPECIALIS"
          },
          "practices": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "practiceId": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Represents the practice identifier.",
                  "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
                  "format": "uuid"
                },
                "providerNo": {
                  "type": "string",
                  "description": "Represents the user provider number for the practice.",
                  "maxLength": 11,
                  "example": "2515823"
                },
                "ahpraNo": {
                  "type": "string",
                  "description": "Represents the users aphra no for the practice.",
                  "maxLength": 13,
                  "example": "BBB6789423478"
                },
                "medicalObject": {
                  "type": "string",
                  "description": "Represents the user medical object identifier for the practice.",
                  "maxLength": 11
                },
                "defaultPractice": {
                  "type": "boolean",
                  "description": "Represents the user default practice."
                }
              },
              "required": [
                "practiceId",
                "providerNo",
                "ahpraNo",
                "medicalObject",
                "defaultPractice"
              ]
            }
          },
          "supervisingDoctorId": {
            "type": "string",
            "description": "Represents the user's supervising doctor identifier.",
            "format": "uuid",
            "pattern": "^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$"
          },
          "prescriberNo": {
            "type": "string",
            "description": "Represents the user prescriber number.",
            "maxLength": 7,
            "example": "2515823"
          },
          "abn": {
            "type": "string",
            "minLength": 11,
            "description": "Represents the users abn number.",
            "maxLength": 11,
            "example": "51824753556"
          },
          "hpiINo": {
            "type": "string",
            "minLength": 1,
            "description": "Reprsents the user Hpi-I no. Should start with '80036'.",
            "maxLength": 16
          },
          "erxId": {
            "type": "string",
            "description": "Represents the user ERX ID.",
            "maxLength": 10,
            "example": "1234"
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the users preferred name.",
            "example": "Beckham",
            "maxLength": 100
          },
          "biography": {
            "type": "string",
            "description": "Represents the users biography.",
            "maxLength": 1000,
            "example": "User biography"
          },
          "shared": {
            "type": "boolean",
            "description": "Represents  if the users profile will be shared to the community or not."
          },
          "dob": {
            "type": "string",
            "description": "Represents the user date of birth with format YYYY-MM-DD.",
            "example": "2021-06-01"
          },
          "gender": {
            "type": "integer",
            "description": "Represents the user gender.\n\n* `1` - Female\n* `2` - Male",
            "enum": [
              1,
              2
            ],
            "example": 1
          },
          "subSpecialities": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "subSpecialityCode": {
                  "type": "string",
                  "description": "Represents the sub speciality code. Call the below endpoint to get the user sub speciality code lookup \n/code-system/subspeciality-code.",
                  "example": "10"
                }
              },
              "required": [
                "subSpecialityCode"
              ]
            }
          },
          "languages": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "languageCode": {
                  "type": "string",
                  "description": "Represents the languages code. Call the below endpoint to get the user languages  code lookup\n\n/code-system/languages-code.",
                  "example": "1"
                }
              },
              "required": [
                "languageCode"
              ]
            }
          },
          "qualifications": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "qualificationCode": {
                  "type": "string",
                  "description": "Represents the qualifications code. Call the below endpoint to get the user qualifications  code lookup\n\n/code-system/qualifications-code.",
                  "example": "227"
                }
              },
              "required": [
                "qualificationCode"
              ]
            }
          },
          "supportEnabled": {
            "type": "boolean",
            "description": "Represents support agent access to this record."
          },
          "metadata": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Represents the users metadata key.",
                  "maxLength": 40,
                  "example": "secondEmail"
                },
                "value": {
                  "type": "string",
                  "description": "Represents the users metadata value.",
                  "maxLength": 500,
                  "example": "jane.smith@gmail.com"
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "status": {
            "type": "string",
            "description": "Represents the users status.",
            "example": "Active"
          }
        },
        "required": [
          "id",
          "titleCode",
          "plan",
          "firstName",
          "lastName",
          "email",
          "officePhone",
          "createdBy",
          "createdDateTime",
          "updatedBy",
          "updatedDateTime",
          "homePhone",
          "mobilePhone",
          "fax",
          "categoryCode",
          "userCode",
          "userName",
          "timeZone",
          "roleCode",
          "moduleCode",
          "practices",
          "supervisingDoctorId",
          "prescriberNo",
          "abn",
          "hpiINo",
          "erxId",
          "preferredName",
          "biography",
          "shared",
          "dob",
          "gender",
          "subSpecialities",
          "languages",
          "qualifications",
          "supportEnabled",
          "metadata",
          "status"
        ]
      },
      "MetaFieldConstraint": {
        "title": "MetaFieldConstraint",
        "x-stoplight": {
          "id": "smd94hmjdurao"
        },
        "type": "object",
        "description": "",
        "properties": {
          "constraintType": {
            "type": "string",
            "enum": [
              "TEXT_MAX_LENGTH",
              "NUMBER_PRECISION",
              "NUMBER_MINIMUM",
              "NUMBER_MAXIMUM",
              "DATE_DEFAULT_TODAY",
              "BOOL_ALWAYS_TRUE"
            ],
            "example": "TEXT_MAX_LENGTH",
            "description": "Constraint Type of the custom field"
          },
          "numberValue": {
            "type": "number",
            "description": "Number value"
          },
          "boolValue": {
            "type": "boolean",
            "description": "Bool value"
          }
        },
        "required": [
          "constraintType"
        ],
        "x-examples": {
          "TEXT_MAX_LENGTH": {
            "constraintType": "TEXT_MAX_LENGTH",
            "numberValue": 10
          },
          "BOOL_ALWAYS_TRUE": {
            "constraintType": "BOOL_ALWAYS_TRUE",
            "boolValue": true
          },
          "NUMBER_PRECISION": {
            "constraintType": "NUMBER_PRECISION",
            "numberValue": 2
          },
          "NUMBER_MINIMUM": {
            "constraintType": "NUMBER_MINIMUM",
            "numberValue": 0
          },
          "NUMBER_MAXIMUM": {
            "constraintType": "NUMBER_MAXIMUM",
            "numberValue": 5
          },
          "DATE_DEFAULT_TODAY": {
            "constraintType": "DATE_DEFAULT_TODAY",
            "boolValue": true
          }
        }
      },
      "CustomField": {
        "title": "CustomField",
        "x-stoplight": {
          "id": "33rnqr9hgh03i"
        },
        "description": "CustomField Payload",
        "type": "object",
        "x-examples": {
          "TEXT_FIELD": {
            "fieldLabel": "Nickname",
            "entityType": "Patient",
            "fieldType": "TEXT_FIELD",
            "isMandatory": false,
            "defaultStringValue": null,
            "defaultNumericValue": null,
            "placeholder": "Known as",
            "constraints": [
              {
                "constraintType": "TEXT_MAX_LENGTH",
                "numberValue": 100
              }
            ]
          },
          "DATE": {
            "fieldLabel": "Last consult",
            "fieldType": "DATE",
            "entityType": "Patient",
            "isMandatory": false,
            "defaultStringValue": null,
            "defaultNumberValue": null,
            "placeholder": "",
            "constraints": [
              {
                "constraintType": "DATE_DEFAULT_TODAY",
                "boolValue": true
              }
            ]
          },
          "NUMBER": {
            "fieldLabel": "Rating",
            "fieldType": "NUMBER",
            "entityType": "Patient",
            "isMandatory": false,
            "defaultStringValue": "",
            "defaultNumberValue": 0,
            "placeholder": "",
            "constraints": [
              {
                "constraintType": "NUMBER_PRECISION",
                "numberValue": 2
              },
              {
                "constraintType": "NUMBER_MINIMUM",
                "numberValue": 0
              },
              {
                "constraintType": "NUMBER_MAXIMUM",
                "numberValue": 5
              }
            ]
          },
          "CHECK_BOX": {
            "fieldLabel": "Agree to Terms",
            "fieldType": "CHECK_BOX",
            "entityType": "Patient",
            "isMandatory": true,
            "defaultStringValue": null,
            "defaultNumberValue": null,
            "placeholder": "",
            "constraints": [
              {
                "constraintType": "BOOL_ALWAYS_TRUE",
                "boolValue": true
              }
            ]
          }
        },
        "properties": {
          "fieldLabel": {
            "type": "string",
            "minLength": 1,
            "description": "Field Definition",
            "maxLength": 100,
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
          },
          "entityType": {
            "type": "string",
            "minLength": 1,
            "enum": [
              "Patient"
            ],
            "description": "Attached Entity"
          },
          "fieldType": {
            "type": "string",
            "minLength": 1,
            "enum": [
              "TEXT_FIELD",
              "CHECK_BOX",
              "DATE",
              "NUMBER"
            ],
            "description": "Custom Field Types"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Should not be null/empty validation",
            "default": false
          },
          "defaultStringValue": {
            "type": "string",
            "minLength": 1,
            "description": "Default string value",
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
            "nullable": true
          },
          "defaultNumberValue": {
            "type": "number",
            "description": "Default number value",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25,
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
            "description": "Form hints to display in custom field",
            "nullable": true
          },
          "constraints": {
            "type": "array",
            "description": "Attached constraints depending on fieldType",
            "items": {
              "title": "MetaFieldConstraint",
              "x-stoplight": {
                "id": "smd94hmjdurao"
              },
              "type": "object",
              "description": "",
              "properties": {
                "constraintType": {
                  "type": "string",
                  "enum": [
                    "TEXT_MAX_LENGTH",
                    "NUMBER_PRECISION",
                    "NUMBER_MINIMUM",
                    "NUMBER_MAXIMUM",
                    "DATE_DEFAULT_TODAY",
                    "BOOL_ALWAYS_TRUE"
                  ],
                  "example": "TEXT_MAX_LENGTH",
                  "description": "Constraint Type of the custom field"
                },
                "numberValue": {
                  "type": "number",
                  "description": "Number value"
                },
                "boolValue": {
                  "type": "boolean",
                  "description": "Bool value"
                }
              },
              "required": [
                "constraintType"
              ],
              "x-examples": {
                "TEXT_MAX_LENGTH": {
                  "constraintType": "TEXT_MAX_LENGTH",
                  "numberValue": 10
                },
                "BOOL_ALWAYS_TRUE": {
                  "constraintType": "BOOL_ALWAYS_TRUE",
                  "boolValue": true
                },
                "NUMBER_PRECISION": {
                  "constraintType": "NUMBER_PRECISION",
                  "numberValue": 2
                },
                "NUMBER_MINIMUM": {
                  "constraintType": "NUMBER_MINIMUM",
                  "numberValue": 0
                },
                "NUMBER_MAXIMUM": {
                  "constraintType": "NUMBER_MAXIMUM",
                  "numberValue": 5
                },
                "DATE_DEFAULT_TODAY": {
                  "constraintType": "DATE_DEFAULT_TODAY",
                  "boolValue": true
                }
              }
            }
          }
        },
        "required": [
          "fieldLabel",
          "entityType",
          "fieldType"
        ]
      },
      "CustomFieldRead": {
        "title": "CustomFieldRead",
        "x-stoplight": {
          "id": "a07y99v19ynr7"
        },
        "description": "CustomField Response",
        "type": "object",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "format": "uuid"
          },
          "fieldLabel": {
            "type": "string",
            "minLength": 1,
            "description": "Field Definition"
          },
          "entityType": {
            "type": "string",
            "minLength": 1,
            "description": "Attached Entity",
            "enum": [
              "Patient"
            ]
          },
          "fieldType": {
            "type": "string",
            "minLength": 1,
            "enum": [
              "TEXT_FIELD",
              "CHECK_BOX",
              "DATE",
              "NUMBER"
            ],
            "description": "Custom Field Type"
          },
          "isMandatory": {
            "type": "boolean",
            "default": false,
            "description": "Should not be null/empty validation"
          },
          "isDisplay": {
            "type": "boolean",
            "default": true,
            "description": "Display or hide custom field when isActive false otherwise always true when isActive true"
          },
          "isActive": {
            "type": "boolean",
            "default": true,
            "description": "Allow inserting new custom field value and Apply custom field validation"
          },
          "defaultStringValue": {
            "type": "string",
            "minLength": 1,
            "description": "Default string value",
            "nullable": true
          },
          "defaultNumberValue": {
            "type": "number",
            "description": "Default number value",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "description": "Form hints to display in custom field",
            "nullable": true
          },
          "constraints": {
            "type": "array",
            "description": "Attached constraints to the custom field",
            "items": {
              "title": "MetaFieldConstraint",
              "x-stoplight": {
                "id": "smd94hmjdurao"
              },
              "type": "object",
              "description": "",
              "properties": {
                "constraintType": {
                  "type": "string",
                  "enum": [
                    "TEXT_MAX_LENGTH",
                    "NUMBER_PRECISION",
                    "NUMBER_MINIMUM",
                    "NUMBER_MAXIMUM",
                    "DATE_DEFAULT_TODAY",
                    "BOOL_ALWAYS_TRUE"
                  ],
                  "example": "TEXT_MAX_LENGTH",
                  "description": "Constraint Type of the custom field"
                },
                "numberValue": {
                  "type": "number",
                  "description": "Number value"
                },
                "boolValue": {
                  "type": "boolean",
                  "description": "Bool value"
                }
              },
              "required": [
                "constraintType"
              ],
              "x-examples": {
                "TEXT_MAX_LENGTH": {
                  "constraintType": "TEXT_MAX_LENGTH",
                  "numberValue": 10
                },
                "BOOL_ALWAYS_TRUE": {
                  "constraintType": "BOOL_ALWAYS_TRUE",
                  "boolValue": true
                },
                "NUMBER_PRECISION": {
                  "constraintType": "NUMBER_PRECISION",
                  "numberValue": 2
                },
                "NUMBER_MINIMUM": {
                  "constraintType": "NUMBER_MINIMUM",
                  "numberValue": 0
                },
                "NUMBER_MAXIMUM": {
                  "constraintType": "NUMBER_MAXIMUM",
                  "numberValue": 5
                },
                "DATE_DEFAULT_TODAY": {
                  "constraintType": "DATE_DEFAULT_TODAY",
                  "boolValue": true
                }
              }
            }
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CustomFieldPage": {
        "title": "CustomFieldPage",
        "x-stoplight": {
          "id": "95v1gx9a3m7eh"
        },
        "description": "Paginated CustomField Response",
        "type": "object",
        "x-examples": {
          "Custom Field Paginated": {
            "data": [
              {
                "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "fieldLabel": "Nickname",
                "entityType": "Patient",
                "fieldType": "TEXT_FIELD",
                "isMandatory": false,
                "isDisplay": true,
                "isActive": true,
                "defaultStringValue": "string",
                "defaultNumberValue": 0,
                "placeholder": "string",
                "constraints": [
                  {
                    "constraintType": "TEXT_MAX_LENGTH",
                    "numberValue": 10
                  }
                ],
                "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "createdDateTime": "2022-05-24T04:21:08.660Z",
                "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "updatedDateTime": "2022-05-24T04:21:08.661Z"
              },
              {
                "id": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                "fieldLabel": "Agree to terms",
                "entityType": "Patient",
                "fieldType": "CHECK_BOX",
                "isMandatory": true,
                "isDisplay": true,
                "isActive": true,
                "defaultStringValue": null,
                "defaultNumberValue": null,
                "placeholder": null,
                "constraints": [
                  {
                    "constraintType": "BOOL_ALWAYS_TRUE",
                    "numberValue": null,
                    "stringValue": null,
                    "dateValue": null,
                    "boolValue": true
                  }
                ],
                "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "createdDateTime": "2022-05-24T04:21:08.660Z",
                "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "updatedDateTime": "2022-05-24T04:21:08.661Z"
              },
              {
                "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                "fieldLabel": "Last consult",
                "entityType": "Patient",
                "fieldType": "DATE",
                "isMandatory": false,
                "isDisplay": true,
                "isActive": true,
                "defaultStringValue": null,
                "defaultNumberValue": null,
                "placeholder": null,
                "constraints": [
                  {
                    "constraintType": "DATE_DEFAULT_TODAY",
                    "numberValue": null,
                    "stringValue": null,
                    "dateValue": null,
                    "boolValue": true
                  }
                ],
                "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "createdDateTime": "2022-05-31T15:05:34.498Z",
                "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "updatedDateTime": "2022-05-31T15:05:34.510Z"
              },
              {
                "id": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                "fieldLabel": "Rating",
                "entityType": "Patient",
                "fieldType": "NUMBER",
                "isMandatory": false,
                "isDisplay": true,
                "isActive": true,
                "defaultStringValue": null,
                "defaultNumberValue": 12,
                "placeholder": "Intensity",
                "constraints": [
                  {
                    "constraintType": "NUMBER_PRECISION",
                    "numberValue": 2,
                    "stringValue": null,
                    "dateValue": null,
                    "boolValue": null
                  },
                  {
                    "constraintType": "NUMBER_MINIMUM",
                    "numberValue": 0,
                    "stringValue": null,
                    "dateValue": null,
                    "boolValue": null
                  },
                  {
                    "constraintType": "NUMBER_MAXIMUM",
                    "numberValue": 5,
                    "stringValue": null,
                    "dateValue": null,
                    "boolValue": null
                  }
                ],
                "createdBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "createdDateTime": "2022-05-24T04:20:59.724Z",
                "updatedBy": "9a768a64-156e-11e9-a0f5-0b717b2d2843",
                "updatedDateTime": "2022-05-24T04:20:59.741Z"
              }
            ],
            "first": true,
            "last": false,
            "totalPages": 1,
            "totalElements": 1,
            "numberOfElements": null,
            "size": 0,
            "page": 0
          }
        },
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "CustomFieldRead",
              "x-stoplight": {
                "id": "a07y99v19ynr7"
              },
              "description": "CustomField Response",
              "type": "object",
              "x-examples": {},
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier",
                  "format": "uuid"
                },
                "fieldLabel": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Field Definition"
                },
                "entityType": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Attached Entity",
                  "enum": [
                    "Patient"
                  ]
                },
                "fieldType": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "TEXT_FIELD",
                    "CHECK_BOX",
                    "DATE",
                    "NUMBER"
                  ],
                  "description": "Custom Field Type"
                },
                "isMandatory": {
                  "type": "boolean",
                  "default": false,
                  "description": "Should not be null/empty validation"
                },
                "isDisplay": {
                  "type": "boolean",
                  "default": true,
                  "description": "Display or hide custom field when isActive false otherwise always true when isActive true"
                },
                "isActive": {
                  "type": "boolean",
                  "default": true,
                  "description": "Allow inserting new custom field value and Apply custom field validation"
                },
                "defaultStringValue": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Default string value",
                  "nullable": true
                },
                "defaultNumberValue": {
                  "type": "number",
                  "description": "Default number value",
                  "nullable": true
                },
                "placeholder": {
                  "type": "string",
                  "description": "Form hints to display in custom field",
                  "nullable": true
                },
                "constraints": {
                  "type": "array",
                  "description": "Attached constraints to the custom field",
                  "items": {
                    "title": "MetaFieldConstraint",
                    "x-stoplight": {
                      "id": "smd94hmjdurao"
                    },
                    "type": "object",
                    "description": "",
                    "properties": {
                      "constraintType": {
                        "type": "string",
                        "enum": [
                          "TEXT_MAX_LENGTH",
                          "NUMBER_PRECISION",
                          "NUMBER_MINIMUM",
                          "NUMBER_MAXIMUM",
                          "DATE_DEFAULT_TODAY",
                          "BOOL_ALWAYS_TRUE"
                        ],
                        "example": "TEXT_MAX_LENGTH",
                        "description": "Constraint Type of the custom field"
                      },
                      "numberValue": {
                        "type": "number",
                        "description": "Number value"
                      },
                      "boolValue": {
                        "type": "boolean",
                        "description": "Bool value"
                      }
                    },
                    "required": [
                      "constraintType"
                    ],
                    "x-examples": {
                      "TEXT_MAX_LENGTH": {
                        "constraintType": "TEXT_MAX_LENGTH",
                        "numberValue": 10
                      },
                      "BOOL_ALWAYS_TRUE": {
                        "constraintType": "BOOL_ALWAYS_TRUE",
                        "boolValue": true
                      },
                      "NUMBER_PRECISION": {
                        "constraintType": "NUMBER_PRECISION",
                        "numberValue": 2
                      },
                      "NUMBER_MINIMUM": {
                        "constraintType": "NUMBER_MINIMUM",
                        "numberValue": 0
                      },
                      "NUMBER_MAXIMUM": {
                        "constraintType": "NUMBER_MAXIMUM",
                        "numberValue": 5
                      },
                      "DATE_DEFAULT_TODAY": {
                        "constraintType": "DATE_DEFAULT_TODAY",
                        "boolValue": true
                      }
                    }
                  }
                },
                "createdBy": {
                  "type": "string",
                  "format": "uuid"
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedBy": {
                  "type": "string",
                  "format": "uuid"
                },
                "updatedDateTime": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "first": {
            "type": "boolean",
            "description": "Indicates first page"
          },
          "last": {
            "type": "boolean",
            "description": "Indicate last page"
          },
          "totalPages": {
            "type": "number",
            "description": "total available page"
          },
          "totalElements": {
            "type": "number",
            "description": "total available element"
          },
          "numberOfElements": {
            "type": "number",
            "description": "no of element in current page"
          },
          "size": {
            "type": "number",
            "description": "page size requested"
          },
          "page": {
            "type": "number",
            "description": "current page"
          }
        }
      },
      "ErrorAttribute1": {
        "title": "ErrorAttribute",
        "type": "object",
        "properties": {
          "parameter": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "parameter",
          "value",
          "message"
        ],
        "x-examples": {
          "example-1": {
            "parameter": "string",
            "value": "string",
            "message": "string"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "CustomFieldUpdate": {
        "title": "CustomFieldUpdate",
        "x-stoplight": {
          "id": "33rnqr9hgh03i"
        },
        "description": "CustomField Payload",
        "type": "object",
        "x-examples": {},
        "properties": {
          "fieldLabel": {
            "type": "string",
            "minLength": 1,
            "description": "Field Definition",
            "maxLength": 100,
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
          },
          "entityType": {
            "type": "string",
            "minLength": 1,
            "enum": [
              "Patient"
            ],
            "description": "Attached Entity"
          },
          "fieldType": {
            "type": "string",
            "minLength": 1,
            "enum": [
              "TEXT_FIELD",
              "CHECK_BOX",
              "DATE",
              "NUMBER"
            ],
            "description": "Custom Field Types"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Should not be null/empty validation",
            "default": false
          },
          "isDisplay": {
            "type": "boolean",
            "description": "Display or hide custom field when isActive false otherwise always true when isActive true"
          },
          "isActive": {
            "type": "boolean",
            "description": "Allow inserting new custom field value and Apply validations to attached entity"
          },
          "defaultStringValue": {
            "type": "string",
            "minLength": 1,
            "description": "Default string value",
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
            "nullable": true
          },
          "defaultNumberValue": {
            "type": "number",
            "description": "Default number value",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25,
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
            "description": "Form hints to display in custom field",
            "nullable": true
          },
          "constraints": {
            "type": "array",
            "description": "Attached constraints depending on fieldType",
            "items": {
              "title": "MetaFieldConstraint",
              "x-stoplight": {
                "id": "smd94hmjdurao"
              },
              "type": "object",
              "description": "",
              "properties": {
                "constraintType": {
                  "type": "string",
                  "enum": [
                    "TEXT_MAX_LENGTH",
                    "NUMBER_PRECISION",
                    "NUMBER_MINIMUM",
                    "NUMBER_MAXIMUM",
                    "DATE_DEFAULT_TODAY",
                    "BOOL_ALWAYS_TRUE"
                  ],
                  "example": "TEXT_MAX_LENGTH",
                  "description": "Constraint Type of the custom field"
                },
                "numberValue": {
                  "type": "number",
                  "description": "Number value"
                },
                "boolValue": {
                  "type": "boolean",
                  "description": "Bool value"
                }
              },
              "required": [
                "constraintType"
              ],
              "x-examples": {
                "TEXT_MAX_LENGTH": {
                  "constraintType": "TEXT_MAX_LENGTH",
                  "numberValue": 10
                },
                "BOOL_ALWAYS_TRUE": {
                  "constraintType": "BOOL_ALWAYS_TRUE",
                  "boolValue": true
                },
                "NUMBER_PRECISION": {
                  "constraintType": "NUMBER_PRECISION",
                  "numberValue": 2
                },
                "NUMBER_MINIMUM": {
                  "constraintType": "NUMBER_MINIMUM",
                  "numberValue": 0
                },
                "NUMBER_MAXIMUM": {
                  "constraintType": "NUMBER_MAXIMUM",
                  "numberValue": 5
                },
                "DATE_DEFAULT_TODAY": {
                  "constraintType": "DATE_DEFAULT_TODAY",
                  "boolValue": true
                }
              }
            }
          }
        },
        "required": [
          "fieldLabel",
          "entityType",
          "fieldType"
        ]
      },
      "CustomFieldValue": {
        "title": "CustomFieldValue",
        "x-stoplight": {
          "id": "ofcpa9fc6qp9t"
        },
        "description": "Attached custom field value to an entity",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identfier"
          },
          "fieldId": {
            "type": "string",
            "format": "uuid",
            "description": "CustomField definition identifier"
          },
          "stringValue": {
            "type": "string",
            "description": "Value for TEXT_FIELD field type",
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
          },
          "numberValue": {
            "type": "number",
            "description": "Value for NUMBER field type"
          },
          "dateValue": {
            "type": "string",
            "format": "date-time",
            "description": "Value for DATE field type"
          },
          "boolValue": {
            "type": "boolean",
            "description": "Value for CHECK_BOX",
            "default": false
          }
        },
        "required": [
          "fieldId"
        ],
        "x-examples": {
          "Text": {
            "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
            "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
            "stringValue": "Timmy",
            "numberValue": null,
            "dateValue": null,
            "boolValue": false
          },
          "Date": {
            "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
            "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
            "stringValue": null,
            "numberValue": null,
            "dateValue": "2022-05-05",
            "boolValue": false
          },
          "Number": {
            "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
            "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
            "stringValue": null,
            "numberValue": 3,
            "dateValue": null,
            "boolValue": false
          },
          "Checkbox": {
            "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
            "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
            "stringValue": null,
            "numberValue": null,
            "dateValue": null,
            "boolValue": true
          }
        }
      },
      "CustomFieldValueRead": {
        "title": "CustomFieldValue",
        "x-stoplight": {
          "id": "ofcpa9fc6qp9t"
        },
        "description": "Attached custom field value to an entity",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identfier"
          },
          "fieldId": {
            "type": "string",
            "format": "uuid",
            "description": "CustomField definition identifier"
          },
          "stringValue": {
            "type": "string",
            "description": "Value for TEXT_FIELD field type",
            "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
          },
          "numberValue": {
            "type": "number",
            "description": "Value for NUMBER field type"
          },
          "dateValue": {
            "type": "string",
            "format": "date-time",
            "description": "Value for DATE field type"
          },
          "boolValue": {
            "type": "boolean",
            "description": "Value for CHECK_BOX",
            "default": false
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid"
          },
          "updatedDateTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "fieldId"
        ]
      },
      "PatientPage2": {
        "title": "PatientPage",
        "type": "object",
        "x-examples": {
          "Full Response with pagination": {
            "data": [
              {
                "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                "titleId": 315890000,
                "firstName": "Timothy",
                "lastName": "Mark",
                "middleName": "David",
                "preferredName": "Tim",
                "previouslyKnownAs": "Jake",
                "fullName": "Timothy Mark",
                "genderCode": 2,
                "dob": "8/12/1970",
                "estimated": true,
                "oneNameOnly": "false",
                "dateOfDeath": "12/01/2010",
                "causeOfDeath": "Cancer",
                "patientStatusCode": 2,
                "ethnicityCode": 55,
                "esl": true,
                "atsiId": 4,
                "ctgCoPaymentRelief": true,
                "placeOfBirth": "Sydney",
                "skinCode": 16,
                "languageSpokenAtHome": 0,
                "homePhone": 298761234,
                "mobilePhone": "0413324123",
                "workPhone": 298671234,
                "email": "Timothy.Mark@nedirecords.com",
                "contactMethod": 1,
                "note": "Patient had a mild fever",
                "customFields": [
                  {
                    "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                    "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                    "stringValue": "Timmy",
                    "numberValue": null,
                    "dateValue": null,
                    "boolValue": false,
                    "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                    "createdDateTime": "2019-08-24T14:15:22Z",
                    "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                    "updatedDateTime": "2019-08-24T14:15:22Z"
                  },
                  {
                    "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                    "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                    "stringValue": null,
                    "numberValue": null,
                    "dateValue": null,
                    "boolValue": true,
                    "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                    "createdDateTime": "2019-08-24T14:15:22Z",
                    "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                    "updatedDateTime": "2019-08-24T14:15:22Z"
                  },
                  {
                    "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                    "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                    "stringValue": null,
                    "numberValue": null,
                    "dateValue": "2022-05-05",
                    "boolValue": false,
                    "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                    "createdDateTime": "2019-08-24T14:15:22Z",
                    "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                    "updatedDateTime": "2019-08-24T14:15:22Z"
                  },
                  {
                    "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                    "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                    "stringValue": null,
                    "numberValue": 3,
                    "dateValue": null,
                    "boolValue": false,
                    "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                    "createdDateTime": "2019-08-24T14:15:22Z",
                    "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                    "updatedDateTime": "2019-08-24T14:15:22Z"
                  }
                ],
                "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                "updatedDateTime": "2019-08-24T14:15:22Z"
              }
            ],
            "first": true,
            "last": false,
            "totalPages": 3,
            "totalElements": 29,
            "numberOfElements": 10,
            "size": 10,
            "page": 0
          }
        },
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "title": "PatientResponse",
              "description": "The Patient Response properties that are included for a patient",
              "type": "object",
              "x-examples": {
                "Full Patient Response": {
                  "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "titleCode": 315890000,
                  "firstName": "Timothy",
                  "lastName": "Mark",
                  "middleName": "David",
                  "preferredName": "Tim",
                  "previouslyKnownAs": "Jake",
                  "fullName": "Timothy Mark",
                  "gender": 2,
                  "dob": "1970-12-12",
                  "estimated": true,
                  "oneNameOnly": "false",
                  "dateOfDeath": "2018-03-04",
                  "causeOfDeath": "Cancer",
                  "patientStatusCode": 2,
                  "ethnicityCode": 55,
                  "englishAsSecondLanguage": true,
                  "atsi": 1,
                  "ctgCoPaymentRelief": true,
                  "placeOfBirth": "Sydney",
                  "skinCode": 16,
                  "languageSpokenAtHome": 1,
                  "homePhone": 298761234,
                  "mobilePhone": "0413324123",
                  "workPhone": 298671234,
                  "email": "Timothy.Mark@nedirecords.com",
                  "contactMethod": 1,
                  "notes": "Patient had a mild fever",
                  "customFields": [
                    {
                      "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                      "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "stringValue": "Timmy",
                      "numberValue": null,
                      "dateValue": null,
                      "boolValue": false,
                      "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    },
                    {
                      "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                      "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                      "stringValue": null,
                      "numberValue": null,
                      "dateValue": null,
                      "boolValue": true,
                      "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    },
                    {
                      "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                      "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                      "stringValue": null,
                      "numberValue": null,
                      "dateValue": "2022-05-05",
                      "boolValue": false,
                      "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    },
                    {
                      "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                      "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                      "stringValue": null,
                      "numberValue": 3,
                      "dateValue": null,
                      "boolValue": false,
                      "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                      "createdDateTime": "2019-08-24T14:15:22Z",
                      "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                      "updatedDateTime": "2019-08-24T14:15:22Z"
                    }
                  ],
                  "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "createdDateTime": "2019-08-24T14:15:22Z",
                  "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "updatedDateTime": "2019-08-24T14:15:22Z"
                }
              },
              "x-tags": [
                "Other"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                  "format": "uuid",
                  "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                },
                "defaultPracticeId": {
                  "type": "string",
                  "description": "Default practice id where the patient details are created",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                  "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "format": "uuid",
                  "nullable": true
                },
                "usualDoctorId": {
                  "type": "string",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                  "description": "A user id that represents the usual doctor for the patient",
                  "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "format": "uuid",
                  "nullable": true
                },
                "titleCode": {
                  "type": "integer",
                  "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                  "example": 315890000
                },
                "firstName": {
                  "type": "string",
                  "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                  "minLength": 1,
                  "maxLength": 40,
                  "example": "Timothy",
                  "nullable": true
                },
                "lastName": {
                  "type": "string",
                  "description": "Represents patient last name",
                  "minLength": 1,
                  "maxLength": 40,
                  "example": "Mark"
                },
                "middleName": {
                  "type": "string",
                  "description": "Represents the patient middle name",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "David",
                  "nullable": true
                },
                "preferredName": {
                  "type": "string",
                  "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "Tim",
                  "nullable": true
                },
                "previouslyKnownAs": {
                  "type": "string",
                  "description": "Represents the patient previously known name",
                  "maxLength": 40,
                  "example": "Jake",
                  "minLength": 0,
                  "nullable": true
                },
                "fullName": {
                  "type": "string",
                  "description": "Represents the patient full name",
                  "nullable": true
                },
                "gender": {
                  "type": "integer",
                  "title": "Gender",
                  "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                  "default": 0,
                  "example": 2,
                  "x-examples": {
                    "Male": 2
                  },
                  "x-internal": false
                },
                "dob": {
                  "type": "string",
                  "title": "DateOfBirth",
                  "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                  "format": "date",
                  "x-examples": {
                    "Date of Birth": "1970-01-10"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "estimated": {
                  "type": "boolean",
                  "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                  "nullable": true
                },
                "oneNameOnly": {
                  "type": "boolean",
                  "example": false,
                  "description": "The flag is set to true, if the patient has one name only",
                  "nullable": true
                },
                "dateOfDeath": {
                  "type": "string",
                  "nullable": true,
                  "title": "DateOfDeath",
                  "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                  "default": "yyyy-MM-dd",
                  "example": "2018-12-01",
                  "x-examples": {
                    "Date Of Death Format": "2018-12-01"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "causeOfDeath": {
                  "type": "string",
                  "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                  "example": "Cancer",
                  "maxLength": 300,
                  "nullable": true
                },
                "patientStatusCode": {
                  "type": "integer",
                  "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                  "example": 2,
                  "nullable": true
                },
                "ethnicityCode": {
                  "type": "integer",
                  "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                  "example": 55,
                  "nullable": true
                },
                "englishAsSecondLanguage": {
                  "type": "boolean",
                  "description": "If english is the patient second language the flag is set as true else it is set to false",
                  "nullable": true
                },
                "atsiStatus": {
                  "type": "integer",
                  "title": "Atsi",
                  "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                  "example": 4,
                  "nullable": true,
                  "x-tags": [
                    "Other"
                  ]
                },
                "ctgCoPaymentRelief": {
                  "type": "boolean",
                  "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "nullable": true
                },
                "placeOfBirth": {
                  "type": "string",
                  "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "example": "Sydney",
                  "maxLength": 100,
                  "nullable": true
                },
                "skinCode": {
                  "type": "integer",
                  "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "example": 16,
                  "nullable": true
                },
                "languageSpokenAtHome": {
                  "title": "LanguageSpokenAtHome",
                  "type": "integer",
                  "nullable": true,
                  "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                  "x-examples": {
                    "example-1": 1
                  },
                  "x-internal": false
                },
                "homePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "HomePhone",
                  "x-examples": {
                    "HomePhone Number": "0298761234"
                  },
                  "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "maxLength": 10,
                  "example": "0298761234",
                  "x-internal": false,
                  "minLength": 8
                },
                "mobilePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "MobilePhone",
                  "x-examples": {
                    "MobileNumber": "0413324123"
                  },
                  "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0413324123",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "workPhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "OfficePhone",
                  "x-examples": {
                    "OfficePhoneNumber": "0298671234"
                  },
                  "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0298671234",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "email": {
                  "type": "string",
                  "nullable": true,
                  "title": "Email",
                  "description": "Represents the patient email id.",
                  "x-examples": {
                    "Email": "Timothy.Mark@nedirecords.com"
                  },
                  "x-tags": [
                    "Common Models"
                  ],
                  "format": "email",
                  "example": "Timothy.Mark@nedirecords.com",
                  "maxLength": 100,
                  "x-internal": false
                },
                "contactMethod": {
                  "title": "PatientContactMethod",
                  "type": "number",
                  "nullable": true,
                  "x-examples": {
                    "example-1": 1
                  },
                  "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                  "x-tags": [
                    "Other"
                  ]
                },
                "notes": {
                  "type": "string",
                  "description": "Any comments or notes can be recorded in this field",
                  "maxLength": 500,
                  "example": "Patient had a mild fever",
                  "nullable": true
                },
                "customFields": {
                  "type": "array",
                  "items": {
                    "title": "CustomFieldValue",
                    "x-stoplight": {
                      "id": "ofcpa9fc6qp9t"
                    },
                    "description": "Attached custom field value to an entity",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identfier"
                      },
                      "fieldId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "CustomField definition identifier"
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "Value for TEXT_FIELD field type",
                        "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                      },
                      "numberValue": {
                        "type": "number",
                        "description": "Value for NUMBER field type"
                      },
                      "dateValue": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Value for DATE field type"
                      },
                      "boolValue": {
                        "type": "boolean",
                        "description": "Value for CHECK_BOX",
                        "default": false
                      },
                      "createdBy": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "createdDateTime": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedBy": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "updatedDateTime": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "fieldId"
                    ]
                  }
                },
                "createdBy": {
                  "type": "string",
                  "title": "CreatedBy",
                  "description": "A GUID refers to User identifier who created the resource.",
                  "x-examples": {
                    "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                  },
                  "default": "UUID",
                  "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                  "x-internal": false
                },
                "createdDateTime": {
                  "type": "string",
                  "title": "CreatedDate",
                  "description": "Time when the resource was created.",
                  "x-internal": false
                },
                "updatedBy": {
                  "type": "string",
                  "title": "UpdatedBy",
                  "description": "A GUID refers to User identifier who updated the resource.",
                  "default": "UUID",
                  "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                  "x-internal": false
                },
                "updatedDateTime": {
                  "title": "UpdatedDate",
                  "type": "string",
                  "description": "Time when the resource was updated.",
                  "x-internal": false
                }
              }
            }
          },
          "first": {
            "type": "boolean",
            "description": "Showing the first page."
          },
          "last": {
            "type": "boolean",
            "description": "Showing the last page."
          },
          "totalPages": {
            "type": "integer",
            "description": "Total Pages"
          },
          "totalElements": {
            "description": "Total records",
            "type": "integer"
          },
          "numberOfElements": {
            "type": "integer",
            "description": "Total records"
          },
          "size": {
            "description": "Number of records in a page",
            "type": "integer"
          },
          "page": {
            "type": "integer",
            "description": "current page number"
          }
        },
        "description": "Get all patients with pagination",
        "x-tags": [
          "Other"
        ]
      },
      "PatientResponse2": {
        "title": "PatientResponse",
        "description": "The Patient Response properties that are included for a patient",
        "type": "object",
        "x-examples": {
          "Full Patient Response": {
            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "titleCode": 315890000,
            "firstName": "Timothy",
            "lastName": "Mark",
            "middleName": "David",
            "preferredName": "Tim",
            "previouslyKnownAs": "Jake",
            "fullName": "Timothy Mark",
            "gender": 2,
            "dob": "1970-12-12",
            "estimated": true,
            "oneNameOnly": "false",
            "dateOfDeath": "2018-03-04",
            "causeOfDeath": "Cancer",
            "patientStatusCode": 2,
            "ethnicityCode": 55,
            "englishAsSecondLanguage": true,
            "atsi": 1,
            "ctgCoPaymentRelief": true,
            "placeOfBirth": "Sydney",
            "skinCode": 16,
            "languageSpokenAtHome": 1,
            "homePhone": 298761234,
            "mobilePhone": "0413324123",
            "workPhone": 298671234,
            "email": "Timothy.Mark@nedirecords.com",
            "contactMethod": 1,
            "notes": "Patient had a mild fever",
            "customFields": [
              {
                "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "stringValue": "Timmy",
                "numberValue": null,
                "dateValue": null,
                "boolValue": false,
                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                "updatedDateTime": "2019-08-24T14:15:22Z"
              },
              {
                "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                "stringValue": null,
                "numberValue": null,
                "dateValue": null,
                "boolValue": true,
                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                "updatedDateTime": "2019-08-24T14:15:22Z"
              },
              {
                "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                "stringValue": null,
                "numberValue": null,
                "dateValue": "2022-05-05",
                "boolValue": false,
                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                "updatedDateTime": "2019-08-24T14:15:22Z"
              },
              {
                "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                "stringValue": null,
                "numberValue": 3,
                "dateValue": null,
                "boolValue": false,
                "createdBy": "25a02396-1048-48f9-bf93-102d2fb7895e",
                "createdDateTime": "2019-08-24T14:15:22Z",
                "updatedBy": "b0efe45f-0520-4e21-90f0-7e35f137732e",
                "updatedDateTime": "2019-08-24T14:15:22Z"
              }
            ],
            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "createdDateTime": "2019-08-24T14:15:22Z",
            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "updatedDateTime": "2019-08-24T14:15:22Z"
          }
        },
        "x-tags": [
          "Other"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
            "format": "uuid",
            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
          },
          "defaultPracticeId": {
            "type": "string",
            "description": "Default practice id where the patient details are created",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
            "format": "uuid",
            "nullable": true
          },
          "usualDoctorId": {
            "type": "string",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "description": "A user id that represents the usual doctor for the patient",
            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "format": "uuid",
            "nullable": true
          },
          "titleCode": {
            "type": "integer",
            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
            "example": 315890000
          },
          "firstName": {
            "type": "string",
            "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
            "minLength": 1,
            "maxLength": 40,
            "example": "Timothy",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Represents patient last name",
            "minLength": 1,
            "maxLength": 40,
            "example": "Mark"
          },
          "middleName": {
            "type": "string",
            "description": "Represents the patient middle name",
            "minLength": 0,
            "maxLength": 40,
            "example": "David",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
            "minLength": 0,
            "maxLength": 40,
            "example": "Tim",
            "nullable": true
          },
          "previouslyKnownAs": {
            "type": "string",
            "description": "Represents the patient previously known name",
            "maxLength": 40,
            "example": "Jake",
            "minLength": 0,
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "Represents the patient full name",
            "nullable": true
          },
          "gender": {
            "type": "integer",
            "title": "Gender",
            "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
            "default": 0,
            "example": 2,
            "x-examples": {
              "Male": 2
            },
            "x-internal": false
          },
          "dob": {
            "type": "string",
            "title": "DateOfBirth",
            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
            "format": "date",
            "x-examples": {
              "Date of Birth": "1970-01-10"
            },
            "x-tags": [
              "Other"
            ]
          },
          "estimated": {
            "type": "boolean",
            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
            "nullable": true
          },
          "oneNameOnly": {
            "type": "boolean",
            "example": false,
            "description": "The flag is set to true, if the patient has one name only",
            "nullable": true
          },
          "dateOfDeath": {
            "type": "string",
            "nullable": true,
            "title": "DateOfDeath",
            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
            "default": "yyyy-MM-dd",
            "example": "2018-12-01",
            "x-examples": {
              "Date Of Death Format": "2018-12-01"
            },
            "x-tags": [
              "Other"
            ]
          },
          "causeOfDeath": {
            "type": "string",
            "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
            "example": "Cancer",
            "maxLength": 300,
            "nullable": true
          },
          "patientStatusCode": {
            "type": "integer",
            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
            "example": 2,
            "nullable": true
          },
          "ethnicityCode": {
            "type": "integer",
            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
            "example": 55,
            "nullable": true
          },
          "englishAsSecondLanguage": {
            "type": "boolean",
            "description": "If english is the patient second language the flag is set as true else it is set to false",
            "nullable": true
          },
          "atsiStatus": {
            "type": "integer",
            "title": "Atsi",
            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
            "example": 4,
            "nullable": true,
            "x-tags": [
              "Other"
            ]
          },
          "ctgCoPaymentRelief": {
            "type": "boolean",
            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
            "nullable": true
          },
          "placeOfBirth": {
            "type": "string",
            "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
            "example": "Sydney",
            "maxLength": 100,
            "nullable": true
          },
          "skinCode": {
            "type": "integer",
            "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
            "example": 16,
            "nullable": true
          },
          "languageSpokenAtHome": {
            "title": "LanguageSpokenAtHome",
            "type": "integer",
            "nullable": true,
            "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
            "x-examples": {
              "example-1": 1
            },
            "x-internal": false
          },
          "homePhone": {
            "type": "string",
            "nullable": true,
            "title": "HomePhone",
            "x-examples": {
              "HomePhone Number": "0298761234"
            },
            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "maxLength": 10,
            "example": "0298761234",
            "x-internal": false,
            "minLength": 8
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true,
            "title": "MobilePhone",
            "x-examples": {
              "MobileNumber": "0413324123"
            },
            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0413324123",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "workPhone": {
            "type": "string",
            "nullable": true,
            "title": "OfficePhone",
            "x-examples": {
              "OfficePhoneNumber": "0298671234"
            },
            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0298671234",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "email": {
            "type": "string",
            "nullable": true,
            "title": "Email",
            "description": "Represents the patient email id.",
            "x-examples": {
              "Email": "Timothy.Mark@nedirecords.com"
            },
            "x-tags": [
              "Common Models"
            ],
            "format": "email",
            "example": "Timothy.Mark@nedirecords.com",
            "maxLength": 100,
            "x-internal": false
          },
          "contactMethod": {
            "title": "PatientContactMethod",
            "type": "number",
            "nullable": true,
            "x-examples": {
              "example-1": 1
            },
            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
            "x-tags": [
              "Other"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field",
            "maxLength": 500,
            "example": "Patient had a mild fever",
            "nullable": true
          },
          "customFields": {
            "type": "array",
            "items": {
              "title": "CustomFieldValue",
              "x-stoplight": {
                "id": "ofcpa9fc6qp9t"
              },
              "description": "Attached custom field value to an entity",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identfier"
                },
                "fieldId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "CustomField definition identifier"
                },
                "stringValue": {
                  "type": "string",
                  "description": "Value for TEXT_FIELD field type",
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                },
                "numberValue": {
                  "type": "number",
                  "description": "Value for NUMBER field type"
                },
                "dateValue": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Value for DATE field type"
                },
                "boolValue": {
                  "type": "boolean",
                  "description": "Value for CHECK_BOX",
                  "default": false
                },
                "createdBy": {
                  "type": "string",
                  "format": "uuid"
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedBy": {
                  "type": "string",
                  "format": "uuid"
                },
                "updatedDateTime": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": [
                "fieldId"
              ]
            }
          },
          "createdBy": {
            "type": "string",
            "title": "CreatedBy",
            "description": "A GUID refers to User identifier who created the resource.",
            "x-examples": {
              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
            },
            "default": "UUID",
            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
            "x-internal": false
          },
          "createdDateTime": {
            "type": "string",
            "title": "CreatedDate",
            "description": "Time when the resource was created.",
            "x-internal": false
          },
          "updatedBy": {
            "type": "string",
            "title": "UpdatedBy",
            "description": "A GUID refers to User identifier who updated the resource.",
            "default": "UUID",
            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
            "x-internal": false
          },
          "updatedDateTime": {
            "title": "UpdatedDate",
            "type": "string",
            "description": "Time when the resource was updated.",
            "x-internal": false
          }
        }
      },
      "ErrorAttribute2": {
        "title": "ErrorAttribute",
        "type": "object",
        "properties": {
          "parameter": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "parameter",
          "value",
          "message"
        ],
        "x-examples": {
          "example-1": {
            "parameter": "string",
            "value": "string",
            "message": "string"
          }
        },
        "x-tags": [
          "Other"
        ]
      },
      "Patient1": {
        "title": "Patient",
        "type": "object",
        "description": "The common properties that are included for a patient",
        "x-examples": {
          "Full Patient Details the can be change": {
            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "titleCode": 315890000,
            "firstName": "Timothy",
            "lastName": "Mark",
            "middleName": "David",
            "preferredName": "Tim",
            "previouslyKnownAs": "Jake",
            "fullName": "Timothy Mark",
            "gender": 2,
            "dob": "1970-01-03",
            "estimated": true,
            "oneNameOnly": false,
            "dateOfDeath": "2016-09-07",
            "causeOfDeath": "Cancer",
            "patientStatusCode": 2,
            "ethnicityCode": 55,
            "englishAsSecondLanguage": true,
            "atsi": 3,
            "ctgCoPaymentRelief": true,
            "placeOfBirth": "Sydney",
            "skinCode": 16,
            "languageSpokenAtHome": 2,
            "homePhone": 298761234,
            "mobilePhone": "0413324123",
            "workPhone": 298671234,
            "email": "Timothy.Mark@nedirecords.com",
            "contactMethod": 1,
            "notes": "Patient had a mild fever",
            "customFields": [
              {
                "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                "stringValue": "Timmy",
                "numberValue": null,
                "dateValue": null,
                "boolValue": false
              },
              {
                "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                "stringValue": null,
                "numberValue": null,
                "dateValue": null,
                "boolValue": true
              },
              {
                "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                "stringValue": null,
                "numberValue": null,
                "dateValue": "2022-05-05",
                "boolValue": false
              },
              {
                "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                "stringValue": null,
                "numberValue": 3,
                "dateValue": null,
                "boolValue": false
              }
            ]
          }
        },
        "x-tags": [
          "Other"
        ],
        "properties": {
          "defaultPracticeId": {
            "type": "string",
            "description": "Default practice id where the patient details are created",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
            "format": "uuid"
          },
          "usualDoctorId": {
            "type": "string",
            "description": "A user id that represents the usual doctor for the patient",
            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
            "format": "uuid",
            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)"
          },
          "titleCode": {
            "type": "integer",
            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title-code",
            "example": 315890000
          },
          "firstName": {
            "description": "Represents the patient first name. The firstName is null when oneNameOnly flag is set to true",
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Represents patient last name",
            "minLength": 1,
            "maxLength": 40,
            "example": "Mark"
          },
          "middleName": {
            "type": "string",
            "description": "Represents the patient middle name",
            "minLength": 0,
            "maxLength": 40,
            "example": "David",
            "nullable": true
          },
          "preferredName": {
            "type": "string",
            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
            "minLength": 0,
            "maxLength": 40,
            "example": "Tim",
            "nullable": true
          },
          "previouslyKnownAs": {
            "type": "string",
            "description": "Represents the patient previously known name",
            "maxLength": 40,
            "example": "Jake",
            "minLength": 0,
            "nullable": true
          },
          "gender": {
            "type": "integer",
            "title": "Gender",
            "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
            "default": 0,
            "example": 2,
            "x-examples": {
              "Male": 2
            },
            "x-internal": false
          },
          "dob": {
            "type": "string",
            "title": "DateOfBirth",
            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
            "format": "date",
            "x-examples": {
              "Date of Birth": "1970-01-10"
            },
            "x-tags": [
              "Other"
            ]
          },
          "estimated": {
            "type": "boolean",
            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
            "nullable": true
          },
          "oneNameOnly": {
            "type": "boolean",
            "example": false,
            "description": "The flag is set to true, if the patient has one name only",
            "nullable": true
          },
          "dateOfDeath": {
            "type": "string",
            "nullable": true,
            "title": "DateOfDeath",
            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
            "default": "yyyy-MM-dd",
            "example": "2018-12-01",
            "x-examples": {
              "Date Of Death Format": "2018-12-01"
            },
            "x-tags": [
              "Other"
            ]
          },
          "causeOfDeath": {
            "type": "string",
            "description": "Represents the patient cause of death. This field is mandatory if the date of death is entered.",
            "example": "Cancer",
            "maxLength": 300,
            "nullable": true
          },
          "patientStatusCode": {
            "type": "integer",
            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status-code",
            "example": 2
          },
          "ethnicityCode": {
            "type": "integer",
            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity-code",
            "example": 55,
            "nullable": true
          },
          "englishAsSecondLanguage": {
            "type": "boolean",
            "description": "If english is the patient second language the flag is set as true else it is set to false",
            "nullable": true
          },
          "atsiStatus": {
            "type": "integer",
            "title": "Atsi",
            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
            "example": 4,
            "nullable": true,
            "x-tags": [
              "Other"
            ]
          },
          "ctgCoPaymentRelief": {
            "type": "boolean",
            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is only set when the atsi status is 1, 2 or 3.",
            "nullable": true
          },
          "placeOfBirth": {
            "type": "string",
            "description": "Represents the  place of birth for patient with atsi status. This field is  only set when the atsi status is 1, 2 or 3.",
            "example": "Sydney",
            "minLength": 0,
            "maxLength": 100,
            "nullable": true
          },
          "skinCode": {
            "type": "integer",
            "description": "Represents the skin code for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin-code. This field is  only set when the atsi status is 1, 2 or 3.",
            "example": 16,
            "nullable": true
          },
          "languageSpokenAtHome": {
            "type": "integer",
            "description": "Represents the language spoken at home for patient with atsi status\n1 - Aghu Tharrnggala\n2 - Alngith dialect.\nThis field is  only set when the atsi status is 1, 2 or 3.",
            "nullable": true
          },
          "homePhone": {
            "type": "string",
            "nullable": true,
            "title": "HomePhone",
            "x-examples": {
              "HomePhone Number": "0298761234"
            },
            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "maxLength": 10,
            "example": "0298761234",
            "x-internal": false,
            "minLength": 8
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true,
            "title": "MobilePhone",
            "x-examples": {
              "MobileNumber": "0413324123"
            },
            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0413324123",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "workPhone": {
            "type": "string",
            "nullable": true,
            "title": "OfficePhone",
            "x-examples": {
              "OfficePhoneNumber": "0298671234"
            },
            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
            "x-tags": [
              "Common Models"
            ],
            "example": "0298671234",
            "maxLength": 10,
            "x-internal": false,
            "minLength": 8
          },
          "email": {
            "type": "string",
            "nullable": true,
            "title": "Email",
            "description": "Represents the patient email id.",
            "x-examples": {
              "Email": "Timothy.Mark@nedirecords.com"
            },
            "x-tags": [
              "Common Models"
            ],
            "format": "email",
            "example": "Timothy.Mark@nedirecords.com",
            "maxLength": 100,
            "x-internal": false
          },
          "contactMethod": {
            "title": "PatientContactMethod",
            "type": "number",
            "nullable": true,
            "x-examples": {
              "example-1": 1
            },
            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
            "x-tags": [
              "Other"
            ]
          },
          "notes": {
            "type": "string",
            "description": "Any comments or notes can be recorded in this field",
            "maxLength": 500,
            "example": "Patient had a mild fever",
            "nullable": true
          },
          "customFields": {
            "type": "array",
            "items": {
              "title": "CustomFieldValue",
              "x-stoplight": {
                "id": "ofcpa9fc6qp9t"
              },
              "description": "Attached custom field value to an entity",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique identfier"
                },
                "fieldId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "CustomField definition identifier"
                },
                "stringValue": {
                  "type": "string",
                  "description": "Value for TEXT_FIELD field type",
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                },
                "numberValue": {
                  "type": "number",
                  "description": "Value for NUMBER field type"
                },
                "dateValue": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Value for DATE field type"
                },
                "boolValue": {
                  "type": "boolean",
                  "description": "Value for CHECK_BOX",
                  "default": false
                }
              },
              "required": [
                "fieldId"
              ],
              "x-examples": {
                "Text": {
                  "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                  "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "stringValue": "Timmy",
                  "numberValue": null,
                  "dateValue": null,
                  "boolValue": false
                },
                "Date": {
                  "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                  "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                  "stringValue": null,
                  "numberValue": null,
                  "dateValue": "2022-05-05",
                  "boolValue": false
                },
                "Number": {
                  "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                  "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                  "stringValue": null,
                  "numberValue": 3,
                  "dateValue": null,
                  "boolValue": false
                },
                "Checkbox": {
                  "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                  "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                  "stringValue": null,
                  "numberValue": null,
                  "dateValue": null,
                  "boolValue": true
                }
              }
            }
          }
        },
        "required": [
          "defaultPracticeId",
          "titleCode",
          "lastName",
          "gender",
          "dob"
        ]
      },
      "UserGroupSearchResponseList": {
        "title": "UserGroupSearchResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "GUID of UserGroup",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Name of the User Group",
            "maxLength": 50
          },
          "groupTypeId": {
            "type": "integer",
            "description": "Type ID of the User Group. Refer to lookup UserGroupType"
          },
          "groupType": {
            "type": "string",
            "description": "The String name of the group type based on UserGroupTypeID"
          },
          "statusId": {
            "description": "record's status id",
            "type": "integer"
          },
          "status": {
            "type": "string",
            "description": "string description of record's status id"
          },
          "createdBy": {
            "type": "string",
            "description": "GUID of the creating user",
            "format": "uuid"
          },
          "createdByName": {
            "type": "string",
            "description": "Complete Name of the creating user"
          },
          "createdDateTime": {
            "type": "string",
            "description": "Date of creation",
            "format": "date-time",
            "pattern": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
          },
          "updatedBy": {
            "type": "string",
            "description": "GUID of the updating user",
            "format": "uuid"
          },
          "updatedByName": {
            "type": "string",
            "description": "Complete Name of the creating user"
          },
          "updatedDateTime": {
            "type": "string",
            "description": "Date of update",
            "format": "date-time",
            "pattern": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
          }
        },
        "required": [
          "id",
          "name",
          "groupTypeId",
          "groupType",
          "statusId",
          "status",
          "createdBy",
          "createdByName",
          "createdDateTime",
          "updatedBy",
          "updatedByName",
          "updatedDateTime"
        ]
      },
      "UserGroupCreateResponse": {
        "title": "UserGroupCreateResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User Group Primary ID"
          },
          "name": {
            "type": "string",
            "description": "User Group Name, can not duplicate if the group type is the same"
          },
          "groupTypeId": {
            "type": "number",
            "description": "This field is user for determining group type of user group (meta.lookup UserGroupTypeID)"
          },
          "statusId": {
            "type": "integer",
            "description": "Record's status id (1=Active, 2=Inactive)"
          }
        },
        "required": [
          "id",
          "name",
          "groupTypeId",
          "statusId"
        ]
      },
      "UserGroupCreateRequest": {
        "title": "UserGroupCreateRequest",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User Group Name, can not duplicate if the group type is the same"
          },
          "groupTypeId": {
            "type": "number",
            "description": "This is the user group type of the user group. Call this endpoint to get the valid values for groupTypeId:  /code-system/user-group-id"
          }
        },
        "required": [
          "name",
          "groupTypeId"
        ]
      },
      "CreatedBy.v1": {
        "type": "string",
        "title": "CreatedBy",
        "description": "A GUID refers to User identifier who created the resource.",
        "x-examples": {
          "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
        },
        "default": "UUID",
        "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
        "x-internal": false
      },
      "CreatedDate.v1": {
        "type": "string",
        "title": "CreatedDate",
        "description": "Time when the resource was created.",
        "x-internal": false
      },
      "UpdatedBy.v1": {
        "type": "string",
        "title": "UpdatedBy",
        "description": "A GUID refers to User identifier who updated the resource.",
        "default": "UUID",
        "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
        "x-internal": false
      },
      "UpdatedDate.v1": {
        "title": "UpdatedDate",
        "type": "string",
        "description": "Time when the resource was updated.",
        "x-internal": false
      },
      "ErrorResponseObject.v1": {
        "title": "ErrorResponseObject",
        "type": "object",
        "description": "Object returned for Error Responses",
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "parameter": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-examples": {
          "example-1": {
            "message": "Invalid request parameter",
            "type": "invalid_request_error",
            "code": "invalid_request",
            "errors": [
              {
                "parameter": "referred_category_id",
                "value": "null",
                "message": "must not be null"
              }
            ]
          }
        },
        "x-internal": false
      },
      "ForbiddenErrorResponseObject.v1": {
        "title": "ForbiddenErrorResponseObject",
        "type": "object",
        "description": "Object returned for Forbidden Error Responses",
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "x-examples": {
          "example": {
            "message": "Access is denied",
            "type": "unknown_error_type",
            "code": "unknown_error_type"
          }
        },
        "x-internal": false
      },
      "AuthenticationError-2": {
        "type": "object",
        "x-stoplight": {
          "id": "17lb92rqpnj73"
        },
        "properties": {
          "error": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          }
        },
        "required": [
          "error",
          "error_description"
        ]
      },
      "LanguageSpokenAtHome.v1": {
        "title": "LanguageSpokenAtHome",
        "type": "integer",
        "nullable": true,
        "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
        "x-examples": {
          "example-1": 1
        },
        "x-internal": false
      },
      "HomePhone.v1": {
        "type": "string",
        "nullable": true,
        "title": "HomePhone",
        "x-examples": {
          "HomePhone Number": "0298761234"
        },
        "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
        "x-tags": [
          "Common Models"
        ],
        "maxLength": 10,
        "example": "0298761234",
        "x-internal": false,
        "minLength": 8
      },
      "MobilePhone.v1": {
        "type": "string",
        "nullable": true,
        "title": "MobilePhone",
        "x-examples": {
          "MobileNumber": "0413324123"
        },
        "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
        "x-tags": [
          "Common Models"
        ],
        "example": "0413324123",
        "maxLength": 10,
        "x-internal": false,
        "minLength": 8
      },
      "OfficePhone-3.v1": {
        "type": "string",
        "nullable": true,
        "title": "OfficePhone",
        "x-examples": {
          "OfficePhoneNumber": "0298671234"
        },
        "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
        "x-tags": [
          "Common Models"
        ],
        "example": "0298671234",
        "maxLength": 10,
        "x-internal": false,
        "minLength": 8
      },
      "Email.v1": {
        "type": "string",
        "nullable": true,
        "title": "Email",
        "description": "Represents the patient email id.",
        "x-examples": {
          "Email": "Timothy.Mark@nedirecords.com"
        },
        "x-tags": [
          "Common Models"
        ],
        "format": "email",
        "example": "Timothy.Mark@nedirecords.com",
        "maxLength": 100,
        "x-internal": false
      },
      "GenderId.v1": {
        "type": "integer",
        "title": "Gender",
        "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
        "default": 0,
        "example": 2,
        "x-examples": {
          "Male": 2
        },
        "x-internal": false
      },
      "Error-2": {
        "type": "object",
        "x-stoplight": {
          "id": "9k0ok7h8dw6bu"
        },
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "OAuthAuthorization": {
        "in": "header",
        "name": "Authorization",
        "schema": {
          "type": "string"
        },
        "description": "The OAuth 2.0 bearer tokens.\n```json\nBearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2\n```\n",
        "required": true
      },
      "ContentType": {
        "in": "header",
        "name": "Content-Type",
        "schema": {
          "type": "string"
        },
        "description": "The request content type.\n",
        "required": true
      },
      "X-Pagination-Limit": {
        "in": "header",
        "name": "X-Pagination-Limit",
        "schema": {
          "type": "integer"
        },
        "description": "Maximum number of results. Default 10",
        "required": false
      },
      "X-Pagination-Page": {
        "in": "header",
        "name": "X-Pagination-Page",
        "schema": {
          "type": "integer"
        },
        "description": "Page number. Default 0",
        "required": false
      },
      "Rsql": {
        "name": "q",
        "in": "query",
        "required": false,
        "description": "Rsql queries for searchable fields, see [RSQL](../../#RSQL). Example:\n```\n?q=id=='066d6372-bb2d-11e5-b129-a3dd177bf747';row_status==1\n```\n",
        "schema": {
          "type": "string"
        }
      },
      "Sort": {
        "name": "s",
        "in": "query",
        "required": false,
        "description": "Sort expressions, see [RSQL Sorting Operator](../../#RSQL). Example:\n```\n?s=id:asc;scheduled_time:desc\n````\n",
        "schema": {
          "type": "string"
        }
      },
      "Pagination-Page": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer",
          "default": 0
        },
        "required": false,
        "description": "The page to be returned."
      },
      "Pagination-Size": {
        "in": "query",
        "name": "size",
        "schema": {
          "type": "integer",
          "default": 20
        },
        "required": false,
        "description": "The number of items to be returned."
      },
      "PracticeId": {
        "in": "path",
        "name": "id",
        "schema": {
          "type": "string"
        },
        "description": "A GUID represents Practice ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
        "required": true
      },
      "RelationshipId": {
        "in": "path",
        "name": "relationship_id",
        "schema": {
          "type": "string"
        },
        "description": "A GUID represents Relationship ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
        "required": true
      },
      "patientid": {
        "name": "patient_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "A GUID that represents the patient_id"
      },
      "PracticeId1": {
        "in": "path",
        "name": "practice_id",
        "schema": {
          "type": "string"
        },
        "description": "A GUID represents the Practice ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
        "required": true
      },
      "SessionId": {
        "in": "path",
        "name": "id",
        "schema": {
          "type": "string"
        },
        "description": "A GUID represents the Session ID. See [Resource Identifier](../../#Resource-Identifier) format\n",
        "required": true
      },
      "EntityType": {
        "name": "entityType",
        "in": "query",
        "required": true,
        "schema": {
          "type": "array",
          "enum": [
            "Patient"
          ],
          "example": "Patient"
        },
        "description": "Attached entity"
      },
      "FieldType": {
        "name": "fieldType",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "enum": [
            "TEXT_FIELD",
            "CHECK_BOX",
            "DATE",
            "NUMBER"
          ],
          "example": "NUMBER,TEXT_FIELD"
        },
        "description": "Custom field types"
      },
      "FieldLabel": {
        "name": "fieldLabel",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
          "minLength": 1,
          "maxLength": 100
        },
        "description": "Field Name"
      },
      "Sort1": {
        "name": "sort",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "enum": [
            "fieldLabel",
            "entityType",
            "fieldType",
            "mandatory",
            "display",
            "active",
            "defaultValue",
            "placeholder"
          ],
          "example": "defaultValue,ASC"
        },
        "description": "Sort direction"
      },
      "OAuthAuthorization1": {
        "name": "OAuthAuthorization",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "description": "The OAuth 2.0 bearer tokens. ```Bearer db3efb4e-82bb-4bbb-997b-b5a3c39ce7e2 ```",
        "required": true
      }
    },
    "responses": {
      "ErrorResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "type",
                "message"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "code": "500",
                  "type": "internal server error",
                  "message": "Exception in thread \"main\" java.lang.NullPointerException"
                }
              }
            }
          }
        },
        "x-examples": {
          "Example": {
            "code": "unknown_error_code",
            "type": "unknown_error_type",
            "message": "Oops! Appears that an error has occurred"
          }
        },
        "description": "Generic error response model"
      },
      "UnauthorizedErrorResponse": {
        "x-examples": {
          "example": {
            "error": "unauthorized",
            "error_description": "Unauthorized"
          }
        },
        "description": "Unathorized.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "unauthorized"
                },
                "error_description": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "unauthorized",
                  "error_description": "The request does not contain authorization"
                }
              }
            }
          }
        }
      },
      "ForbiddenErrorResponse": {
        "x-examples": {
          "example": {
            "error": "forbidden",
            "error_description": "Forbidden"
          }
        },
        "description": "Forbidden.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "forbidden"
                },
                "error_description": {
                  "type": "string",
                  "example": "Forbidden"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "forbidden",
                  "error_description": "The user is not allowed to access this resource"
                }
              }
            }
          }
        }
      },
      "ValidationErrorResponse": {
        "x-examples": {
          "example": {
            "error": "bad request",
            "error_description": "Bad Request",
            "errors": [
              {
                "parameter": "id",
                "value": "",
                "message": "Input is required"
              }
            ]
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "bad request"
                },
                "error_description": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "parameter": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "parameter",
                      "value",
                      "message"
                    ],
                    "x-examples": {
                      "example-1": {
                        "parameter": "string",
                        "value": "string",
                        "message": "string"
                      }
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "example": [
                    {
                      "parameter": "id",
                      "value": "",
                      "message": "Input is required"
                    }
                  ]
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "bad request",
                  "error_description": "The request contains a malformed body",
                  "errors": [
                    {
                      "parameter": "id",
                      "value": "",
                      "message": "Input is required"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Bad Request."
      },
      "ConflictErrorResponse": {
        "x-examples": {
          "example": {
            "error": "conflict",
            "error_description": "Conflict"
          }
        },
        "description": "Conflict.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "conflict"
                },
                "error_description": {
                  "type": "string",
                  "example": "Conflict"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "conflict",
                  "error_description": "The resource is already existing"
                }
              }
            }
          }
        },
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "URL pointing to the existing resource"
          }
        }
      },
      "DeleteTagEntityResponse": {
        "description": "OK.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The tag record id of the resource that was deleted"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "message"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "id": "2b0f7904-3bee-4214-89a4-a5b682e6204b",
                  "message": "Successfully Deleted"
                }
              }
            }
          }
        }
      },
      "InternalServerErrorResponse": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "number"
                },
                "type": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "type",
                "message"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "code": 500,
                  "type": "internal server error",
                  "message": "Exception in thread \"main\" java.lang.NullPointerException"
                }
              }
            }
          }
        }
      },
      "EntitiesPageResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "title": "TagEntityResult",
              "type": "object",
              "properties": {
                "patients": {
                  "title": "PatientPage",
                  "type": "object",
                  "x-examples": {
                    "Full Response with pagination": {
                      "data": [
                        {
                          "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                          "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                          "titleId": 315890000,
                          "firstName": "Timothy",
                          "lastName": "Mark",
                          "middleName": "David",
                          "preferredName": "Tim",
                          "previouslyKnownAs": "Jake",
                          "fullName": "Timothy Mark",
                          "genderCode": 2,
                          "dob": "1970-12-08",
                          "estimated": true,
                          "oneNameOnly": "false",
                          "dateOfDeath": "12/01/2010",
                          "causeOfDeath": "Cancer",
                          "patientStatusCode": 2,
                          "ethnicityCode": 55,
                          "esl": true,
                          "atsiId": 4,
                          "ctgCoPaymentRelief": true,
                          "placeOfBirth": "Sydney",
                          "skinCode": 16,
                          "languageSpokenAtHome": 0,
                          "homePhone": 298761234,
                          "mobilePhone": "0413324123",
                          "workPhone": 298671234,
                          "email": "Timothy.Mark@nedirecords.com",
                          "contactMethod": 1,
                          "note": "Patient had a mild fever",
                          "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                          "createdDateTime": "2019-08-24T14:15:22Z",
                          "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                          "updatedDateTime": "2019-08-24T14:15:22Z"
                        }
                      ],
                      "first": true,
                      "last": false,
                      "totalPages": 3,
                      "totalElements": 29,
                      "numberOfElements": 10,
                      "size": 10,
                      "page": 0
                    }
                  },
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "PatientResponse",
                        "description": "The Patient Response properties that are included for a patient",
                        "type": "object",
                        "x-examples": {
                          "Full Patient Response": {
                            "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "titleCode": 315890000,
                            "firstName": "Timothy",
                            "lastName": "Mark",
                            "middleName": "David",
                            "preferredName": "Tim",
                            "previouslyKnownAs": "Jake",
                            "fullName": "Timothy Mark",
                            "gender": 2,
                            "dob": "1970-12-12",
                            "estimated": true,
                            "oneNameOnly": "false",
                            "dateOfDeath": "2018-03-04",
                            "causeOfDeath": "Cancer",
                            "patientStatusCode": 2,
                            "ethnicityCode": 55,
                            "englishAsSecondLanguage": true,
                            "atsi": 1,
                            "ctgCoPaymentRelief": true,
                            "placeOfBirth": "Sydney",
                            "skinCode": 16,
                            "languageSpokenAtHome": 1,
                            "homePhone": 298761234,
                            "mobilePhone": "0413324123",
                            "workPhone": 298671234,
                            "email": "Timothy.Mark@nedirecords.com",
                            "contactMethod": 1,
                            "notes": "Patient had a mild fever",
                            "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "createdDateTime": "2019-08-24T14:15:22Z",
                            "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "updatedDateTime": "2019-08-24T14:15:22Z"
                          }
                        },
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Patient id. This is a unique identifier for this resource. This is a mandatory field in case of a PUT/UPDATE,GET and DELETE operations.",
                            "format": "uuid",
                            "example": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                          },
                          "defaultPracticeId": {
                            "type": "string",
                            "description": "Default practice id where the patient details are created",
                            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                            "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                            "format": "uuid",
                            "nullable": true
                          },
                          "usualDoctorId": {
                            "type": "string",
                            "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                            "description": "A user id that represents the usual doctor for the patient",
                            "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                            "format": "uuid",
                            "nullable": true
                          },
                          "titleCode": {
                            "type": "integer",
                            "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title",
                            "example": 315890000
                          },
                          "firstName": {
                            "type": "string",
                            "description": "Represents the patient first name . The firstName is null when oneNameOnly flag is set to true",
                            "minLength": 1,
                            "maxLength": 40,
                            "example": "Timothy",
                            "nullable": true
                          },
                          "lastName": {
                            "type": "string",
                            "description": "Represents patient last name",
                            "minLength": 1,
                            "maxLength": 40,
                            "example": "Mark"
                          },
                          "middleName": {
                            "type": "string",
                            "description": "Represents the patient middle name",
                            "minLength": 0,
                            "maxLength": 40,
                            "example": "David",
                            "nullable": true
                          },
                          "preferredName": {
                            "type": "string",
                            "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                            "minLength": 0,
                            "maxLength": 40,
                            "example": "Tim",
                            "nullable": true
                          },
                          "previouslyKnownAs": {
                            "type": "string",
                            "description": "Represents the patient previously known name",
                            "maxLength": 40,
                            "example": "Jake",
                            "minLength": 0,
                            "nullable": true
                          },
                          "fullName": {
                            "type": "string",
                            "description": "Represents the patient full name",
                            "nullable": true
                          },
                          "gender": {
                            "type": "integer",
                            "title": "Gender",
                            "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                            "default": 0,
                            "example": 2,
                            "x-examples": {
                              "Male": 2
                            },
                            "x-internal": false
                          },
                          "dob": {
                            "type": "string",
                            "title": "DateOfBirth",
                            "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                            "format": "date",
                            "default": "1970-01-10",
                            "example": "1970-01-10",
                            "x-examples": {
                              "Date of Birth": "1970-01-10"
                            },
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "estimated": {
                            "type": "boolean",
                            "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                            "nullable": true
                          },
                          "oneNameOnly": {
                            "type": "boolean",
                            "example": false,
                            "description": "The flag is set to true, if the patient has one name only",
                            "nullable": true
                          },
                          "dateOfDeath": {
                            "type": "string",
                            "nullable": true,
                            "title": "DateOfDeath",
                            "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                            "default": "yyyy-MM-dd",
                            "example": "2018-12-01",
                            "x-examples": {
                              "Date Of Death Format": "2018-12-01"
                            },
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "causeOfDeath": {
                            "type": "string",
                            "description": "Represents the patient cause of death.This field is mandatory if the date of death is entered",
                            "example": "Cancer",
                            "maxLength": 300,
                            "nullable": true
                          },
                          "patientStatusCode": {
                            "type": "integer",
                            "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status.",
                            "example": 2,
                            "nullable": true
                          },
                          "ethnicityCode": {
                            "type": "integer",
                            "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity",
                            "example": 55,
                            "nullable": true
                          },
                          "englishAsSecondLanguage": {
                            "type": "boolean",
                            "description": "If english is the patient second language the flag is set as true else it is set to false",
                            "nullable": true
                          },
                          "atsiStatus": {
                            "type": "integer",
                            "title": "Atsi",
                            "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                            "example": 4,
                            "nullable": true,
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "ctgCoPaymentRelief": {
                            "type": "boolean",
                            "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "nullable": true
                          },
                          "placeOfBirth": {
                            "type": "string",
                            "description": "Represents the  place of birth for patient with atsi status. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "example": "Sydney",
                            "maxLength": 100,
                            "nullable": true
                          },
                          "skinCode": {
                            "type": "integer",
                            "description": "Represents the skin for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "example": 16,
                            "nullable": true
                          },
                          "languageSpokenAtHome": {
                            "title": "LanguageSpokenAtHome",
                            "type": "integer",
                            "nullable": true,
                            "description": "Represents the language spoken at home for patient with atsi status\n\n* `1` - Aghu Tharrnggala\n* `2` - Alngith dialect\n\n. This field is mandatory when the atsi status is 1, 2 or 3.",
                            "x-examples": {
                              "example-1": 1
                            },
                            "x-internal": false
                          },
                          "homePhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "HomePhone",
                            "x-examples": {
                              "HomePhone Number": "0298761234"
                            },
                            "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "maxLength": 10,
                            "example": "0298761234",
                            "x-internal": false,
                            "minLength": 8
                          },
                          "mobilePhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "MobilePhone",
                            "x-examples": {
                              "MobileNumber": "0413324123"
                            },
                            "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "example": "0413324123",
                            "maxLength": 10,
                            "x-internal": false,
                            "minLength": 8
                          },
                          "workPhone": {
                            "type": "string",
                            "nullable": true,
                            "title": "OfficePhone",
                            "x-examples": {
                              "OfficePhoneNumber": "0298671234"
                            },
                            "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                            "x-tags": [
                              "Common Models"
                            ],
                            "example": "0298671234",
                            "maxLength": 10,
                            "x-internal": false,
                            "minLength": 8
                          },
                          "email": {
                            "type": "string",
                            "nullable": true,
                            "title": "Email",
                            "description": "Represents the patient email id.",
                            "x-examples": {
                              "Email": "Timothy.Mark@nedirecords.com"
                            },
                            "x-tags": [
                              "Common Models"
                            ],
                            "format": "email",
                            "example": "Timothy.Mark@nedirecords.com",
                            "maxLength": 100,
                            "x-internal": false
                          },
                          "contactMethod": {
                            "title": "PatientContactMethod",
                            "type": "number",
                            "nullable": true,
                            "x-examples": {
                              "example-1": 1
                            },
                            "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                            "x-tags": [
                              "Other"
                            ]
                          },
                          "notes": {
                            "type": "string",
                            "description": "Any comments or notes can be recorded in this field",
                            "maxLength": 500,
                            "example": "Patient had a mild fever",
                            "nullable": true
                          },
                          "createdBy": {
                            "type": "string",
                            "title": "CreatedBy",
                            "description": "A GUID refers to User identifier who created the resource.",
                            "x-examples": {
                              "example-1": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7"
                            },
                            "default": "UUID",
                            "example": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                            "x-internal": false
                          },
                          "createdDateTime": {
                            "type": "string",
                            "title": "CreatedDate",
                            "description": "Time when the resource was created.",
                            "x-internal": false
                          },
                          "updatedBy": {
                            "type": "string",
                            "title": "UpdatedBy",
                            "description": "A GUID refers to User identifier who updated the resource.",
                            "default": "UUID",
                            "example": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                            "x-internal": false
                          },
                          "updatedDateTime": {
                            "title": "UpdatedDate",
                            "type": "string",
                            "description": "Time when the resource was updated.",
                            "x-internal": false
                          }
                        },
                        "x-tags": [
                          "Other"
                        ]
                      }
                    },
                    "first": {
                      "type": "boolean",
                      "description": "Showing the first page."
                    },
                    "last": {
                      "type": "boolean",
                      "description": "Showing the last page."
                    },
                    "totalPages": {
                      "type": "integer",
                      "description": "Total Pages"
                    },
                    "totalElements": {
                      "description": "Total records",
                      "type": "integer"
                    },
                    "numberOfElements": {
                      "type": "integer",
                      "description": "Total records"
                    },
                    "size": {
                      "description": "Number of records in a page",
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer",
                      "description": "current page number"
                    }
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "appointments": {
                  "type": "object"
                }
              },
              "x-tags": [
                "Other"
              ]
            },
            "examples": {
              "Example for Patient entity type": {
                "value": {
                  "patients": {
                    "data": [
                      {
                        "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                        "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                        "titleCode": 315890000,
                        "firstName": "Timothy",
                        "lastName": "Mark",
                        "middleName": "David",
                        "preferredName": "Tim",
                        "previouslyKnownAs": "Jake",
                        "fullName": "Timothy Mark",
                        "gender": 2,
                        "dob": "1970-10-12",
                        "estimated": true,
                        "oneNameOnly": false,
                        "dateOfDeath": "2014-05-08",
                        "causeOfDeath": "Cancer",
                        "patientStatusCode": 2,
                        "ethnicityCode": 55,
                        "englishAsSecondLanguage": true,
                        "atsiStatus": 3,
                        "ctgCoPaymentRelief": true,
                        "placeOfBirth": "Sydney",
                        "skinCode": 16,
                        "languageSpokenAtHome": 1,
                        "homePhone": 298761234,
                        "mobilePhone": "0413324123",
                        "workPhone": 298671234,
                        "email": "Timothy.Mark@nedirecords.com",
                        "contactMethod": 1,
                        "notes": "Patient had a mild fever",
                        "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "createdDateTime": "2020-10-28T04:55:06.766Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2020-10-29T15:00:40.226Z"
                      },
                      {
                        "id": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                        "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                        "titleCode": 315890000,
                        "firstName": "Timothy",
                        "lastName": "Mark",
                        "middleName": "David",
                        "preferredName": "Tim",
                        "previouslyKnownAs": "Jake",
                        "fullName": "Timothy Mark",
                        "gender": 2,
                        "dob": "1970-10-12",
                        "estimated": true,
                        "oneNameOnly": false,
                        "dateOfDeath": "2014-05-08",
                        "causeOfDeath": "Cancer",
                        "patientStatusCode": 2,
                        "ethnicityCode": 55,
                        "englishAsSecondLanguage": true,
                        "atsiStatus": 3,
                        "ctgCoPaymentRelief": true,
                        "placeOfBirth": "Sydney",
                        "skinCode": 16,
                        "languageSpokenAtHome": 1,
                        "homePhone": 298761234,
                        "mobilePhone": "0413324123",
                        "workPhone": 298671234,
                        "email": "Timothy.Mark@nedirecords.com",
                        "contactMethod": 1,
                        "notes": "Patient had a mild fever",
                        "createdBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "createdDateTime": "2020-10-28T04:55:06.766Z",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2020-10-29T15:00:40.226Z"
                      }
                    ],
                    "first": true,
                    "last": false,
                    "totalPages": 3,
                    "totalElements": 29,
                    "numberOfElements": 10,
                    "size": 10,
                    "page": 0
                  },
                  "appointments": {}
                }
              },
              "Example for Appointment entity type": {
                "value": {
                  "patients": {},
                  "appointments": {
                    "data": [
                      {
                        "id": "bdaa710e-bc1a-11ea-bf9f-ef9c3dc58a1e",
                        "practiceId": "dd18c5fc-85be-11e8-b3b8-673b2f45aa43",
                        "patientId": "2643ada4-a175-11ea-9c20-47ffa6607fbc",
                        "appointmentTypeId": "1e4518a0-85bf-11e8-b3dc-f3ec468955e1",
                        "scheduleTime": "2019-02-13 05:10:09.088",
                        "appointmentStatus": 2,
                        "appointmentIntervalCode": 6,
                        "roomId": "d6e560e1-43ee-4bac-b5af-ee62ccfb7258",
                        "referralId": "2f1eb08a-4f18-11eb-b39a-5765279ef281",
                        "notes": "Patient injured knee",
                        "providerId": "e19bd9ae-fe9c-11e9-8cda-73bb33bb60fe",
                        "walkIn": true,
                        "firstAvailableDoctor": true,
                        "urgency": 1,
                        "cancellationReason": 1,
                        "emailReminder": true,
                        "reminderMethod": 1,
                        "reminderType": 7,
                        "confirmationLink": "https://medirecords.page.link/JLTg",
                        "telehealthLinkForProvider": "https://coviu.com/session/fe316718-5d71-430a-acdf-8d52f0b4a060",
                        "telehealthLinkForPatient": "https://coviu.com/session/b500f007-6fba-4ed5-aaaa-6224f4c00ae3",
                        "createdBy": "2e6f9df4-23ba-11eb-ba03-c77fdfbcd9a7",
                        "createdDateTime": "2019-02-13 05:10:09.088",
                        "updatedBy": "037dbf27-f7a0-411d-a7e9-35986108ef70",
                        "updatedDateTime": "2019-02-14 05:10:09.088"
                      }
                    ],
                    "first": true,
                    "last": true,
                    "totalPages": 1,
                    "totalElements": 2,
                    "numberOfElements": 2,
                    "size": 2,
                    "page": 0
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedErrorResponse1": {
        "x-examples": {
          "example": {
            "error": "unauthorized",
            "error_description": "Unauthorized"
          }
        },
        "description": "Unathorized",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "unauthorized"
                },
                "error_description": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "unauthorized",
                  "error_description": "The request does not contain authorization"
                }
              }
            }
          }
        }
      },
      "ForbiddenErrorResponse1": {
        "x-examples": {
          "example": {
            "error": "forbidden",
            "error_description": "Forbidden"
          }
        },
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "forbidden"
                },
                "error_description": {
                  "type": "string",
                  "example": "Forbidden"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "forbidden",
                  "error_description": "The user is not allowed to access this resource"
                }
              }
            }
          }
        }
      },
      "ValidationErrorResponse1": {
        "x-examples": {
          "example": {
            "error": "bad request",
            "error_description": "Bad Request",
            "errors": [
              {
                "parameter": "id",
                "value": "",
                "message": "Input is required"
              }
            ]
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "bad request"
                },
                "error_description": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "ErrorAttribute",
                    "type": "object",
                    "properties": {
                      "parameter": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "parameter",
                      "value",
                      "message"
                    ],
                    "x-examples": {
                      "example-1": {
                        "parameter": "string",
                        "value": "string",
                        "message": "string"
                      }
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "example": [
                    {
                      "parameter": "id",
                      "value": "",
                      "message": "Input is required"
                    }
                  ]
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "bad request",
                  "error_description": "The request contains a malformed body",
                  "errors": [
                    {
                      "parameter": "id",
                      "value": "",
                      "message": "Input is required"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Bad Request"
      },
      "UnauthorizedErrorResponse2": {
        "x-examples": {
          "example": {
            "error": "unauthorized",
            "error_description": "Unauthorized"
          }
        },
        "description": "Unathorized",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "unauthorized"
                },
                "error_description": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "unauthorized",
                  "error_description": "The request does not contain authorization"
                }
              }
            }
          }
        }
      },
      "ForbiddenErrorResponse2": {
        "x-examples": {
          "example": {
            "error": "forbidden",
            "error_description": "Forbidden"
          }
        },
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "forbidden"
                },
                "error_description": {
                  "type": "string",
                  "example": "Forbidden"
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "forbidden",
                  "error_description": "The user is not allowed to access this resource"
                }
              }
            }
          }
        }
      },
      "ValidationErrorResponse2": {
        "x-examples": {
          "example": {
            "error": "bad request",
            "error_description": "Bad Request",
            "errors": [
              {
                "parameter": "id",
                "value": "",
                "message": "Input is required"
              }
            ]
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "bad request"
                },
                "error_description": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "title": "ErrorAttribute",
                    "type": "object",
                    "properties": {
                      "parameter": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "parameter",
                      "value",
                      "message"
                    ],
                    "x-examples": {
                      "example-1": {
                        "parameter": "string",
                        "value": "string",
                        "message": "string"
                      }
                    },
                    "x-tags": [
                      "Other"
                    ]
                  },
                  "example": [
                    {
                      "parameter": "id",
                      "value": "",
                      "message": "Input is required"
                    }
                  ]
                }
              },
              "required": [
                "error",
                "error_description"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "bad request",
                  "error_description": "The request contains a malformed body",
                  "errors": [
                    {
                      "parameter": "id",
                      "value": "",
                      "message": "Input is required"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Bad Request"
      }
    },
    "requestBodies": {
      "TagEntityRequest": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tagId": {
                  "type": "string",
                  "title": "TagId",
                  "maxLength": 36,
                  "description": "A globally unique identifier (GUID) for tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                  "format": "uuid",
                  "x-examples": {
                    "example-1": "eab7aa24-56f0-11eb-9499-0b1199252fc0"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "entityId": {
                  "type": "string",
                  "title": "EntityId",
                  "maxLength": 36,
                  "description": "A globally unique identifier (GUID) for an entity being linked to a tag. This field has maximum limit of no more than 36 characters, and is mandatory field.",
                  "format": "uuid",
                  "x-examples": {
                    "example-1": "6e0a119d-04ee-4bad-b848-5371638d6450"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "entityType": {
                  "title": "EntityType",
                  "type": "number",
                  "description": "A type identifier for an entity being linked to a tag. This a mandatory field.",
                  "x-examples": {
                    "example-1": 1
                  },
                  "x-tags": [
                    "Other"
                  ]
                }
              },
              "required": [
                "tagId",
                "entityId",
                "entityType"
              ]
            },
            "examples": {
              "example-1": {
                "value": {
                  "tagId": "f69eb9f1-ae9f-4086-b25c-c39758a43fb3",
                  "entityId": "156e622c-6cdf-4c27-9bc9-2f2db69919f5",
                  "entityType": 1
                }
              }
            }
          }
        },
        "description": ""
      },
      "CustomFieldRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "CustomField",
              "x-stoplight": {
                "id": "33rnqr9hgh03i"
              },
              "description": "CustomField Payload",
              "type": "object",
              "x-examples": {
                "TEXT_FIELD": {
                  "fieldLabel": "Nickname",
                  "entityType": "Patient",
                  "fieldType": "TEXT_FIELD",
                  "isMandatory": false,
                  "defaultStringValue": null,
                  "defaultNumericValue": null,
                  "placeholder": "Known as",
                  "constraints": [
                    {
                      "constraintType": "TEXT_MAX_LENGTH",
                      "numberValue": 100
                    }
                  ]
                },
                "DATE": {
                  "fieldLabel": "Last consult",
                  "fieldType": "DATE",
                  "entityType": "Patient",
                  "isMandatory": false,
                  "defaultStringValue": null,
                  "defaultNumberValue": null,
                  "placeholder": "",
                  "constraints": [
                    {
                      "constraintType": "DATE_DEFAULT_TODAY",
                      "boolValue": true
                    }
                  ]
                },
                "NUMBER": {
                  "fieldLabel": "Rating",
                  "fieldType": "NUMBER",
                  "entityType": "Patient",
                  "isMandatory": false,
                  "defaultStringValue": "",
                  "defaultNumberValue": 0,
                  "placeholder": "",
                  "constraints": [
                    {
                      "constraintType": "NUMBER_PRECISION",
                      "numberValue": 2
                    },
                    {
                      "constraintType": "NUMBER_MINIMUM",
                      "numberValue": 0
                    },
                    {
                      "constraintType": "NUMBER_MAXIMUM",
                      "numberValue": 5
                    }
                  ]
                },
                "CHECK_BOX": {
                  "fieldLabel": "Agree to Terms",
                  "fieldType": "CHECK_BOX",
                  "entityType": "Patient",
                  "isMandatory": true,
                  "defaultStringValue": null,
                  "defaultNumberValue": null,
                  "placeholder": "",
                  "constraints": [
                    {
                      "constraintType": "BOOL_ALWAYS_TRUE",
                      "boolValue": true
                    }
                  ]
                }
              },
              "properties": {
                "fieldLabel": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Field Definition",
                  "maxLength": 100,
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                },
                "entityType": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "Patient"
                  ],
                  "description": "Attached Entity"
                },
                "fieldType": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "TEXT_FIELD",
                    "CHECK_BOX",
                    "DATE",
                    "NUMBER"
                  ],
                  "description": "Custom Field Types"
                },
                "isMandatory": {
                  "type": "boolean",
                  "description": "Should not be null/empty validation",
                  "default": false
                },
                "defaultStringValue": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Default string value",
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
                  "nullable": true
                },
                "defaultNumberValue": {
                  "type": "number",
                  "description": "Default number value",
                  "nullable": true
                },
                "placeholder": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 25,
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
                  "description": "Form hints to display in custom field",
                  "nullable": true
                },
                "constraints": {
                  "type": "array",
                  "description": "Attached constraints depending on fieldType",
                  "items": {
                    "title": "MetaFieldConstraint",
                    "x-stoplight": {
                      "id": "smd94hmjdurao"
                    },
                    "type": "object",
                    "description": "",
                    "properties": {
                      "constraintType": {
                        "type": "string",
                        "enum": [
                          "TEXT_MAX_LENGTH",
                          "NUMBER_PRECISION",
                          "NUMBER_MINIMUM",
                          "NUMBER_MAXIMUM",
                          "DATE_DEFAULT_TODAY",
                          "BOOL_ALWAYS_TRUE"
                        ],
                        "example": "TEXT_MAX_LENGTH",
                        "description": "Constraint Type of the custom field"
                      },
                      "numberValue": {
                        "type": "number",
                        "description": "Number value"
                      },
                      "boolValue": {
                        "type": "boolean",
                        "description": "Bool value"
                      }
                    },
                    "required": [
                      "constraintType"
                    ],
                    "x-examples": {
                      "TEXT_MAX_LENGTH": {
                        "constraintType": "TEXT_MAX_LENGTH",
                        "numberValue": 10
                      },
                      "BOOL_ALWAYS_TRUE": {
                        "constraintType": "BOOL_ALWAYS_TRUE",
                        "boolValue": true
                      },
                      "NUMBER_PRECISION": {
                        "constraintType": "NUMBER_PRECISION",
                        "numberValue": 2
                      },
                      "NUMBER_MINIMUM": {
                        "constraintType": "NUMBER_MINIMUM",
                        "numberValue": 0
                      },
                      "NUMBER_MAXIMUM": {
                        "constraintType": "NUMBER_MAXIMUM",
                        "numberValue": 5
                      },
                      "DATE_DEFAULT_TODAY": {
                        "constraintType": "DATE_DEFAULT_TODAY",
                        "boolValue": true
                      }
                    }
                  }
                }
              },
              "required": [
                "fieldLabel",
                "entityType",
                "fieldType"
              ]
            },
            "examples": {}
          }
        }
      },
      "CustomFieldUpdateRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "CustomFieldUpdate",
              "x-stoplight": {
                "id": "33rnqr9hgh03i"
              },
              "description": "CustomField Payload",
              "type": "object",
              "x-examples": {},
              "properties": {
                "fieldLabel": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Field Definition",
                  "maxLength": 100,
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                },
                "entityType": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "Patient"
                  ],
                  "description": "Attached Entity"
                },
                "fieldType": {
                  "type": "string",
                  "minLength": 1,
                  "enum": [
                    "TEXT_FIELD",
                    "CHECK_BOX",
                    "DATE",
                    "NUMBER"
                  ],
                  "description": "Custom Field Types"
                },
                "isMandatory": {
                  "type": "boolean",
                  "description": "Should not be null/empty validation",
                  "default": false
                },
                "isDisplay": {
                  "type": "boolean",
                  "description": "Display or hide custom field when isActive false otherwise always true when isActive true"
                },
                "isActive": {
                  "type": "boolean",
                  "description": "Allow inserting new custom field value and Apply validations to attached entity"
                },
                "defaultStringValue": {
                  "type": "string",
                  "minLength": 1,
                  "description": "Default string value",
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
                  "nullable": true
                },
                "defaultNumberValue": {
                  "type": "number",
                  "description": "Default number value",
                  "nullable": true
                },
                "placeholder": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 25,
                  "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$",
                  "description": "Form hints to display in custom field",
                  "nullable": true
                },
                "constraints": {
                  "type": "array",
                  "description": "Attached constraints depending on fieldType",
                  "items": {
                    "title": "MetaFieldConstraint",
                    "x-stoplight": {
                      "id": "smd94hmjdurao"
                    },
                    "type": "object",
                    "description": "",
                    "properties": {
                      "constraintType": {
                        "type": "string",
                        "enum": [
                          "TEXT_MAX_LENGTH",
                          "NUMBER_PRECISION",
                          "NUMBER_MINIMUM",
                          "NUMBER_MAXIMUM",
                          "DATE_DEFAULT_TODAY",
                          "BOOL_ALWAYS_TRUE"
                        ],
                        "example": "TEXT_MAX_LENGTH",
                        "description": "Constraint Type of the custom field"
                      },
                      "numberValue": {
                        "type": "number",
                        "description": "Number value"
                      },
                      "boolValue": {
                        "type": "boolean",
                        "description": "Bool value"
                      }
                    },
                    "required": [
                      "constraintType"
                    ],
                    "x-examples": {
                      "TEXT_MAX_LENGTH": {
                        "constraintType": "TEXT_MAX_LENGTH",
                        "numberValue": 10
                      },
                      "BOOL_ALWAYS_TRUE": {
                        "constraintType": "BOOL_ALWAYS_TRUE",
                        "boolValue": true
                      },
                      "NUMBER_PRECISION": {
                        "constraintType": "NUMBER_PRECISION",
                        "numberValue": 2
                      },
                      "NUMBER_MINIMUM": {
                        "constraintType": "NUMBER_MINIMUM",
                        "numberValue": 0
                      },
                      "NUMBER_MAXIMUM": {
                        "constraintType": "NUMBER_MAXIMUM",
                        "numberValue": 5
                      },
                      "DATE_DEFAULT_TODAY": {
                        "constraintType": "DATE_DEFAULT_TODAY",
                        "boolValue": true
                      }
                    }
                  }
                }
              },
              "required": [
                "fieldLabel",
                "entityType",
                "fieldType"
              ]
            }
          }
        }
      },
      "PatientRequest": {
        "content": {
          "application/json": {
            "schema": {
              "title": "Patient",
              "type": "object",
              "description": "The common properties that are included for a patient",
              "x-examples": {
                "Full Patient Details the can be change": {
                  "defaultPracticeId": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "usualDoctorId": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "titleCode": 315890000,
                  "firstName": "Timothy",
                  "lastName": "Mark",
                  "middleName": "David",
                  "preferredName": "Tim",
                  "previouslyKnownAs": "Jake",
                  "fullName": "Timothy Mark",
                  "gender": 2,
                  "dob": "1970-01-03",
                  "estimated": true,
                  "oneNameOnly": false,
                  "dateOfDeath": "2016-09-07",
                  "causeOfDeath": "Cancer",
                  "patientStatusCode": 2,
                  "ethnicityCode": 55,
                  "englishAsSecondLanguage": true,
                  "atsi": 3,
                  "ctgCoPaymentRelief": true,
                  "placeOfBirth": "Sydney",
                  "skinCode": 16,
                  "languageSpokenAtHome": 2,
                  "homePhone": 298761234,
                  "mobilePhone": "0413324123",
                  "workPhone": 298671234,
                  "email": "Timothy.Mark@nedirecords.com",
                  "contactMethod": 1,
                  "notes": "Patient had a mild fever",
                  "customFields": [
                    {
                      "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                      "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "stringValue": "Timmy",
                      "numberValue": null,
                      "dateValue": null,
                      "boolValue": false
                    },
                    {
                      "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                      "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                      "stringValue": null,
                      "numberValue": null,
                      "dateValue": null,
                      "boolValue": true
                    },
                    {
                      "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                      "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                      "stringValue": null,
                      "numberValue": null,
                      "dateValue": "2022-05-05",
                      "boolValue": false
                    },
                    {
                      "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                      "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                      "stringValue": null,
                      "numberValue": 3,
                      "dateValue": null,
                      "boolValue": false
                    }
                  ]
                }
              },
              "x-tags": [
                "Other"
              ],
              "properties": {
                "defaultPracticeId": {
                  "type": "string",
                  "description": "Default practice id where the patient details are created",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)",
                  "example": "0076b99c-294f-11eb-80f0-077af7b65082",
                  "format": "uuid"
                },
                "usualDoctorId": {
                  "type": "string",
                  "description": "A user id that represents the usual doctor for the patient",
                  "example": "b0a05a90-19a9-11eb-a908-d3ad64a772f0",
                  "format": "uuid",
                  "pattern": "(^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$)"
                },
                "titleCode": {
                  "type": "integer",
                  "description": "Represents the patient title. Call the below endpoint to get the patient title lookup\n/code-system/title-code",
                  "example": 315890000
                },
                "firstName": {
                  "description": "Represents the patient first name. The firstName is null when oneNameOnly flag is set to true",
                  "type": "string",
                  "nullable": true
                },
                "lastName": {
                  "type": "string",
                  "description": "Represents patient last name",
                  "minLength": 1,
                  "maxLength": 40,
                  "example": "Mark"
                },
                "middleName": {
                  "type": "string",
                  "description": "Represents the patient middle name",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "David",
                  "nullable": true
                },
                "preferredName": {
                  "type": "string",
                  "description": "Represents the patient preferred name.If no preferred name is entered , the first name is stored as the preferred name.",
                  "minLength": 0,
                  "maxLength": 40,
                  "example": "Tim",
                  "nullable": true
                },
                "previouslyKnownAs": {
                  "type": "string",
                  "description": "Represents the patient previously known name",
                  "maxLength": 40,
                  "example": "Jake",
                  "minLength": 0,
                  "nullable": true
                },
                "gender": {
                  "type": "integer",
                  "title": "Gender",
                  "description": "Represents the patient gender.\n\n* `1` - Female\n* `2` - Male\n* `3` - Other\n* `4` - Unknown",
                  "default": 0,
                  "example": 2,
                  "x-examples": {
                    "Male": 2
                  },
                  "x-internal": false
                },
                "dob": {
                  "type": "string",
                  "title": "DateOfBirth",
                  "description": "Represents the date of birth of the patient in YYYY-MM-DD format. Date of birth should not be in the future",
                  "format": "date",
                  "x-examples": {
                    "Date of Birth": "1970-01-10"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "estimated": {
                  "type": "boolean",
                  "description": "If the patient dob is an estimated one, the flag is set to to true else it is set to false",
                  "nullable": true
                },
                "oneNameOnly": {
                  "type": "boolean",
                  "example": false,
                  "description": "The flag is set to true, if the patient has one name only",
                  "nullable": true
                },
                "dateOfDeath": {
                  "type": "string",
                  "nullable": true,
                  "title": "DateOfDeath",
                  "description": "Represents the patient date of death in the format YYYY-MM-DD. Date of death should not be in the future.",
                  "default": "yyyy-MM-dd",
                  "example": "2018-12-01",
                  "x-examples": {
                    "Date Of Death Format": "2018-12-01"
                  },
                  "x-tags": [
                    "Other"
                  ]
                },
                "causeOfDeath": {
                  "type": "string",
                  "description": "Represents the patient cause of death. This field is mandatory if the date of death is entered.",
                  "example": "Cancer",
                  "maxLength": 300,
                  "nullable": true
                },
                "patientStatusCode": {
                  "type": "integer",
                  "description": "Represents the patient_status (e.g Standard,VIP etc). Call the below endpoint to get the patient status  lookup\n/code-system/patient-status-code",
                  "example": 2
                },
                "ethnicityCode": {
                  "type": "integer",
                  "description": "Represents the patient ethnicity.Call the endpoint to get the patient ethnicity lookup\n/code-system/ethnicity-code",
                  "example": 55,
                  "nullable": true
                },
                "englishAsSecondLanguage": {
                  "type": "boolean",
                  "description": "If english is the patient second language the flag is set as true else it is set to false",
                  "nullable": true
                },
                "atsiStatus": {
                  "type": "integer",
                  "title": "Atsi",
                  "description": "Represents the patient atsi status.\n\n* `1` - Aboriginal\n* `2` - Torres strait Islander\n* `3` - Aboriginal &Torres strait Islander\n* `4` - Neither Aboriginal or Torres strait Islander",
                  "example": 4,
                  "nullable": true,
                  "x-tags": [
                    "Other"
                  ]
                },
                "ctgCoPaymentRelief": {
                  "type": "boolean",
                  "description": "Represents whether the patient with atsi status is eligible for ctg co payment relief. This field is only set when the atsi status is 1, 2 or 3.",
                  "nullable": true
                },
                "placeOfBirth": {
                  "type": "string",
                  "description": "Represents the  place of birth for patient with atsi status. This field is  only set when the atsi status is 1, 2 or 3.",
                  "example": "Sydney",
                  "minLength": 0,
                  "maxLength": 100,
                  "nullable": true
                },
                "skinCode": {
                  "type": "integer",
                  "description": "Represents the skin code for patient with atsi status.Call the endpoint to get the patient skin lookup /code-system/skin-code. This field is  only set when the atsi status is 1, 2 or 3.",
                  "example": 16,
                  "nullable": true
                },
                "languageSpokenAtHome": {
                  "type": "integer",
                  "description": "Represents the language spoken at home for patient with atsi status\n1 - Aghu Tharrnggala\n2 - Alngith dialect.\nThis field is  only set when the atsi status is 1, 2 or 3.",
                  "nullable": true
                },
                "homePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "HomePhone",
                  "x-examples": {
                    "HomePhone Number": "0298761234"
                  },
                  "description": "Represents the patient  home phone number. The home phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "maxLength": 10,
                  "example": "0298761234",
                  "x-internal": false,
                  "minLength": 8
                },
                "mobilePhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "MobilePhone",
                  "x-examples": {
                    "MobileNumber": "0413324123"
                  },
                  "description": "Represents the patient  mobile phone number . The mobile phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0413324123",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "workPhone": {
                  "type": "string",
                  "nullable": true,
                  "title": "OfficePhone",
                  "x-examples": {
                    "OfficePhoneNumber": "0298671234"
                  },
                  "description": "Represents the patient  work phone number.The work phone entered should be between 8 and 10 digits in length",
                  "x-tags": [
                    "Common Models"
                  ],
                  "example": "0298671234",
                  "maxLength": 10,
                  "x-internal": false,
                  "minLength": 8
                },
                "email": {
                  "type": "string",
                  "nullable": true,
                  "title": "Email",
                  "description": "Represents the patient email id.",
                  "x-examples": {
                    "Email": "Timothy.Mark@nedirecords.com"
                  },
                  "x-tags": [
                    "Common Models"
                  ],
                  "format": "email",
                  "example": "Timothy.Mark@nedirecords.com",
                  "maxLength": 100,
                  "x-internal": false
                },
                "contactMethod": {
                  "title": "PatientContactMethod",
                  "type": "number",
                  "nullable": true,
                  "x-examples": {
                    "example-1": 1
                  },
                  "description": "Represents the patient contact method\n\n* `1` - Email\n* `2` - Home Phone\n* `3` - Mobile Phone\n* `4` - Work Phone\n* `5` - SMS\n* `6` - Letter",
                  "x-tags": [
                    "Other"
                  ]
                },
                "notes": {
                  "type": "string",
                  "description": "Any comments or notes can be recorded in this field",
                  "maxLength": 500,
                  "example": "Patient had a mild fever",
                  "nullable": true
                },
                "customFields": {
                  "type": "array",
                  "items": {
                    "title": "CustomFieldValue",
                    "x-stoplight": {
                      "id": "ofcpa9fc6qp9t"
                    },
                    "description": "Attached custom field value to an entity",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identfier"
                      },
                      "fieldId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "CustomField definition identifier"
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "Value for TEXT_FIELD field type",
                        "pattern": "^[A-Za-z0-9!@#$%^&*(),\\\\-. ]+$"
                      },
                      "numberValue": {
                        "type": "number",
                        "description": "Value for NUMBER field type"
                      },
                      "dateValue": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Value for DATE field type"
                      },
                      "boolValue": {
                        "type": "boolean",
                        "description": "Value for CHECK_BOX",
                        "default": false
                      }
                    },
                    "required": [
                      "fieldId"
                    ],
                    "x-examples": {
                      "Text": {
                        "id": "69942e3c-bb9c-4f08-8321-9783c05b7548",
                        "fieldId": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "stringValue": "Timmy",
                        "numberValue": null,
                        "dateValue": null,
                        "boolValue": false
                      },
                      "Date": {
                        "id": "0146173e-cdd7-42af-9b86-f983ba72b7f9",
                        "fieldId": "ce964b51-ce43-4203-be39-30b0b9a050af",
                        "stringValue": null,
                        "numberValue": null,
                        "dateValue": "2022-05-05",
                        "boolValue": false
                      },
                      "Number": {
                        "id": "8746dc1b-e450-48c2-86fc-b62b2d2c079a",
                        "fieldId": "a9989ddb-3c03-4ed1-b6ea-a0e46774c38a",
                        "stringValue": null,
                        "numberValue": 3,
                        "dateValue": null,
                        "boolValue": false
                      },
                      "Checkbox": {
                        "id": "784fe131-2ff5-4c0a-9eb8-682ef60b3457",
                        "fieldId": "54035541-2bb4-41cc-9c79-959e19e2e23d",
                        "stringValue": null,
                        "numberValue": null,
                        "dateValue": null,
                        "boolValue": true
                      }
                    }
                  }
                }
              },
              "required": [
                "defaultPracticeId",
                "titleCode",
                "lastName",
                "gender",
                "dob"
              ]
            }
          }
        }
      }
    }
  },
  "x-stoplight": {
    "id": "hbf602tj6pm1l"
  }
}